"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7979],{5262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>u,default:()=>v,frontMatter:()=>j,metadata:()=>p,toc:()=>w});var s=n(5893),i=n(1151);const r=n.p+"assets/images/per-sec-aggr-a87f3956a65dd5bc7d4e0f7e965a3a9b.png";n(2808);const a=n.p+"assets/images/aggregation-components-dc9f319fb9dfb0b6ddf5c3c030b3dfc4.png",o=n.p+"assets/images/bottlenecks-027b934b676924261254ec9e9fb4b586.png",d=n.p+"assets/images/cardinality-sampling-noise-58e6825a4c5500c54cef2aac227df503.png",l=n.p+"assets/images/higher-sampling-coef-bb44ce33891709cae6bcba650712bf36.png";n(7444);const h=n.p+"assets/images/min-available-aggregation-25c11af0fb1df0946f0e1187665685b2.png",c=n.p+"assets/images/t-sf-corner-d2bb2aeae71e6263b3783596329b80a7.png",g=n.p+"assets/images/t-sampling-badges-41a5af0a062bf46f4b03443f3052c4ce.png",x=n.p+"assets/images/t-sf-what-5b411257f17f6cfa4f5c625df2382043.png",m=n.p+"assets/images/tag-level-sampling-338f4456f49ef69ee596e5b1c7df1fd4.png",j={sidebar_position:2},u="Concepts",p={id:"overview/concepts",title:"Concepts",description:"Read the TLDR.",source:"@site/docs/overview/concepts.md",sourceDirName:"overview",slug:"/overview/concepts",permalink:"/statshouse/overview/concepts",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Features",permalink:"/statshouse/overview/features"},next:{title:"Components",permalink:"/statshouse/overview/components"}},f={},w=[{value:"Aggregation",id:"aggregation",level:2},{value:"Aggregate",id:"aggregate",level:3},{value:"Minimal available aggregation interval",id:"minimal-available-aggregation-interval",level:3},{value:"Resolution",id:"resolution",level:3},{value:"Cardinality",id:"cardinality",level:2},{value:"Sampling",id:"sampling",level:2},{value:"Sampling coefficient",id:"sampling-coefficient",level:3},{value:"How to know the sampling coefficient for a metric in advance",id:"how-to-know-the-sampling-coefficient-for-a-metric-in-advance",level:4},{value:"Where to find the sampling coefficient",id:"where-to-find-the-sampling-coefficient",level:4},{value:"How to understand the sampling coefficient",id:"how-to-understand-the-sampling-coefficient",level:4},{value:"Non-integer sampling coefficients",id:"non-integer-sampling-coefficients",level:4},{value:"Fair resource sharing",id:"fair-resource-sharing",level:3},{value:"Sampling &quot;mainstays&quot;",id:"sampling-mainstays",level:3},{value:"User-guided sampling",id:"user-guided-sampling",level:3},{value:"Tag-level budgeting (&quot;Fair key tags&quot;)",id:"tag-level-budgeting-fair-key-tags",level:3},{value:"Tag-level budgeting: disabled",id:"tag-level-budgeting-disabled",level:4},{value:"Tag-level budgeting: enabled",id:"tag-level-budgeting-enabled",level:4}];function b(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"concepts",children:"Concepts"}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:[(0,s.jsxs)(t.a,{href:"/statshouse/tldr",children:["Read the ",(0,s.jsx)(t.strong,{children:"TLDR"})]}),"."]})}),"\n",(0,s.jsx)(t.p,{children:"To understand StatsHouse deeply, learn the basic metric-related concepts:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"#aggregation",children:"Aggregation"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#aggregate",children:"Aggregate"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#minimal-available-aggregation-interval",children:"Minimal available aggregation interval"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#resolution",children:"Resolution"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#cardinality",children:"Cardinality"})}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"#sampling",children:"Sampling"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"#sampling-coefficient",children:"Sampling coefficient"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#how-to-know-the-sampling-coefficient-for-a-metric-in-advance",children:"How to know the sampling coefficient for a metric in advance"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#where-to-find-the-sampling-coefficient",children:"Where to find the sampling coefficient"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#how-to-understand-the-sampling-coefficient",children:"How to understand the sampling coefficient"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#non-integer-sampling-coefficients",children:"Non-integer sampling coefficients"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#fair-resource-sharing",children:"Fair resource sharing"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#sampling-mainstays",children:'Sampling "mainstays"'})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#user-guided-sampling",children:"User-guided sampling"})}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"#tag-level-budgeting-fair-key-tags",children:'Tag-level budgeting ("Fair key tags")'}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#tag-level-budgeting-disabled",children:"Tag-level budgeting: disabled"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"#tag-level-budgeting-enabled",children:"Tag-level budgeting: enabled"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"aggregation",children:"Aggregation"}),"\n",(0,s.jsx)(t.p,{children:"StatsHouse aggregates the events with the same tag sets\u2014both within the time period and between the hosts."}),"\n",(0,s.jsx)(t.h3,{id:"aggregate",children:"Aggregate"}),"\n",(0,s.jsxs)(t.p,{children:["An ",(0,s.jsx)(t.strong,{children:"aggregate"})," is the result of aggregation.\nIt is the minimal set of descriptive statistics such as ",(0,s.jsx)(t.em,{children:"count"}),", ",(0,s.jsx)(t.em,{children:"sum"}),", ",(0,s.jsx)(t.em,{children:"min"}),", ",(0,s.jsx)(t.em,{children:"max"}),". StatsHouse uses them to\nreconstruct the rest of statistics if necessary.\nFor example, this is what an aggregate within one second looks like:"]}),"\n",(0,s.jsx)("img",{src:r,width:"700"}),"\n",(0,s.jsx)(t.admonition,{type:"important",children:(0,s.jsxs)(t.p,{children:["StatsHouse does not store an exact metric value per each moment.\nInstead, it stores aggregates associated with time intervals\n(see more about the ",(0,s.jsx)(t.a,{href:"#minimal-available-aggregation-interval",children:"minimal available aggregation interval"}),")."]})}),"\n",(0,s.jsx)(t.p,{children:"Upon aggregation, StatsHouse inserts data into the ClickHouse database\u2014specifically, into a per-second table.\nThe amount of per-second data is huge, so StatsHouse downsamples data: per-second data is available for two days."}),"\n",(0,s.jsx)(t.p,{children:"StatsHouse aggregates data within a minute and inserts it to a per-minute ClickHouse table.\nSimilarly, StatsHouse aggregates per-minute data to per-hour one."}),"\n",(0,s.jsx)(t.h3,{id:"minimal-available-aggregation-interval",children:"Minimal available aggregation interval"}),"\n",(0,s.jsx)(t.p,{children:'The currently available aggregate depends on the "age" of the data:'}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"per-second aggregated data is stored for the first two days,"}),"\n",(0,s.jsx)(t.li,{children:"per-minute aggregated data is stored for a month,"}),"\n",(0,s.jsx)(t.li,{children:"per-hour aggregated data is available forever (if not deleted manually)."}),"\n"]}),"\n",(0,s.jsx)("img",{src:h,width:"700"}),"\n",(0,s.jsx)(t.p,{children:"Imagine a hypothetical product. For this product, we need to get the number of received packets per second.\nThe packets may have different"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["formats: ",(0,s.jsx)(t.code,{children:"TL"}),", ",(0,s.jsx)(t.code,{children:"JSON"}),";"]}),"\n",(0,s.jsxs)(t.li,{children:['statuses: "correct" (',(0,s.jsx)(t.code,{children:"ok"}),') or "incorrect" (',(0,s.jsx)(t.code,{children:"error_too_short"}),", ",(0,s.jsx)(t.code,{children:"error_too_long"}),", etc.)."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["When the user-defined code receives a packet, it sends an event to StatsHouse, specifically,\nto an ",(0,s.jsx)(t.a,{href:"/statshouse/overview/components#agent",children:"agent"}),'.\nFor example, let this event have a JSON format and a "correct" status:']}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'    {"metrics":[ {"name": "toy_packets_count",\n     "tags":{"format": "JSON", "status": "ok"},\n     "counter": 1}] }\n'})}),"\n",(0,s.jsx)(t.p,{children:"Formats and statuses may vary for the packets:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'    {"metrics":[ {"name": "toy_packets_count",\n     "tags":{"format": "TL", "status": "error_too_short"},\n     "counter": 1} ]}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Let's represent an event as a row in a conventional database. Upon per-second aggregation,\nwe'll get the table below\u2014for each tag value combination received, we get the row with the corresponding count:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"timestamp"}),(0,s.jsx)(t.th,{children:"metric"}),(0,s.jsx)(t.th,{children:"format"}),(0,s.jsx)(t.th,{children:"status"}),(0,s.jsx)(t.th,{children:"counter"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"JSON"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsx)(t.td,{children:"100"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsx)(t.td,{children:"200"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"error_too_short"}),(0,s.jsx)(t.td,{children:"5"})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["The number of rows in such a table is a metric's ",(0,s.jsx)(t.a,{href:"#cardinality",children:"cardinality"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"resolution",children:"Resolution"}),"\n",(0,s.jsxs)(t.p,{children:["The highest available resolution of data to show on a graph depends on the currently available\n",(0,s.jsx)(t.a,{href:"#aggregation",children:"aggregate"}),": you can get per-second data for the last two days, per-minute data for the last month,\nand you can get per-hour data for any period you want."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["If getting the highest available resolution is not crucial for you, but it is important for you\nto reduce ",(0,s.jsx)(t.a,{href:"#sampling",children:"sampling"}),", ",(0,s.jsx)(t.a,{href:"/statshouse/guides/edit-metrics#resolution",children:"reduce your metric resolution"}),"."]})}),"\n",(0,s.jsxs)(t.p,{children:["For example, you may choose a custom resolution to make the ",(0,s.jsx)(t.a,{href:"/statshouse/overview/components#agent",children:"agent"}),"\nsend data once per five seconds instead of sending per-second data.\nStatsHouse will send data five times more rarely and grant five times more rows for the metric.\nThe processing delay will increase by ",(0,s.jsx)(t.strong,{children:"ten"})," seconds:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["StatsHouse will be collecting data for ",(0,s.jsx)(t.strong,{children:"five"})," seconds,"]}),"\n",(0,s.jsx)(t.li,{children:"then it will shard data into five partitions,"}),"\n",(0,s.jsxs)(t.li,{children:["and will be sending data for the next ",(0,s.jsx)(t.strong,{children:"five"})," seconds\u2014one shard per second."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"This way of sending data ensures fair channel sharing for the metrics with differing resolution."}),"\n",(0,s.jsx)(t.h2,{id:"cardinality",children:"Cardinality"}),"\n",(0,s.jsx)(t.admonition,{type:"important",children:(0,s.jsx)(t.p,{children:"Cardinality is how many unique tag value combinations you send for a metric."})}),"\n",(0,s.jsxs)(t.p,{children:["In the example above, the metric's cardinality for the current second is ",(0,s.jsx)(t.em,{children:"three"})," as we have three tag value combinations."]}),"\n",(0,s.jsx)(t.p,{children:'The amount of inserted data does not depend on the number of events. It depends on the number of unique tag\nvalue combinations. StatsHouse "collapses" the rows with the same tag value combinations and summarizes the counters.'}),"\n",(0,s.jsxs)(t.p,{children:["StatsHouse collects data from many hosts (",(0,s.jsx)(t.a,{href:"/statshouse/overview/components#agent",children:"agents"}),") simultaneously. Upon collecting and\naggregating data within a second, it sends data to ",(0,s.jsx)(t.a,{href:"/statshouse/overview/components#aggregator",children:"aggregators"}),"."]}),"\n",(0,s.jsx)("img",{src:a,width:"1000"}),"\n",(0,s.jsx)(t.p,{children:"For our hypothetical metric, the between-host aggregation per second leads to the following:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"timestamp"}),(0,s.jsx)(t.th,{children:"metric"}),(0,s.jsx)(t.th,{children:"format"}),(0,s.jsx)(t.th,{children:"status"}),(0,s.jsx)(t.th,{children:"counter"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"JSON"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsx)(t.td,{children:"1100"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"JSON"}),(0,s.jsx)(t.td,{children:"error_too_short"}),(0,s.jsx)(t.td,{children:"40"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"JSON"}),(0,s.jsx)(t.td,{children:"error_too_long"}),(0,s.jsx)(t.td,{children:"20"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsx)(t.td,{children:"30"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"error_too_short"}),(0,s.jsx)(t.td,{children:"2400"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"msgpack"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsx)(t.td,{children:"1"})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["Cardinality may increase due to between-host aggregation: the sets of tag value combinations for the hosts may vary.\nIn the example above, the total cardinality for the current second is ",(0,s.jsx)(t.em,{children:"six"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The total ",(0,s.jsx)(t.a,{href:"/statshouse/guides/view-graph#cardinality",children:"hour cardinality"})," for a metric determines how many\nrows for a metric can be stored in a database for a long time."]}),"\n",(0,s.jsx)(t.p,{children:"When retrieving data from a database, we have to iterate over the rows for the chosen time interval. It is\nthe cardinality that determines the number of these rows and the time we spend on doing this."}),"\n",(0,s.jsx)(t.h2,{id:"sampling",children:"Sampling"}),"\n",(0,s.jsx)(t.p,{children:"StatsHouse has two bottlenecks:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"sending data from agents to aggregators,"}),"\n",(0,s.jsx)(t.li,{children:"inserting data into the ClickHouse database."}),"\n"]}),"\n",(0,s.jsx)("img",{src:o,width:"1000"}),"\n",(0,s.jsx)(t.p,{children:"If the number of sent or inserted data rows exceeded the aggregator's or database's capacity, it could lead to a\nprocessing delay. This delay could increase indefinitely or disappear if the amount of data was reduced.\nTo ensure minimal delay, StatsHouse samples data."}),"\n",(0,s.jsx)(t.admonition,{type:"important",children:(0,s.jsxs)(t.p,{children:["Sampling means that StatsHouse throws away data ",(0,s.jsx)(t.em,{children:"rows"})," to reduce the overall amount of inserted data.\nTo keep aggregates and statistics the same, StatsHouse multiplies the sums and counts in the remaining rows by a\nsampling coefficient."]})}),"\n",(0,s.jsx)(t.p,{children:"Suppose we have three data rows per second for a single metric:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"timestamp"}),(0,s.jsx)(t.th,{children:"metric"}),(0,s.jsx)(t.th,{children:"format"}),(0,s.jsx)(t.th,{children:"status"}),(0,s.jsx)(t.th,{children:"counter"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"JSON"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsx)(t.td,{children:"100"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsx)(t.td,{children:"200"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"error_too_short"}),(0,s.jsx)(t.td,{children:"5"})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["Suppose also that the channel width allows us to send only two rows to the aggregator. StatsHouse will set\nthe sampling coefficient to ",(0,s.jsx)(t.code,{children:"1.5"}),", then randomize the rows, and send only the first two rows multiplied by ",(0,s.jsx)(t.code,{children:"1.5"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"The data sent will look like this:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"timestamp"}),(0,s.jsx)(t.th,{children:"metric"}),(0,s.jsx)(t.th,{children:"format"}),(0,s.jsx)(t.th,{children:"status"}),(0,s.jsx)(t.th,{children:"counter"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsx)(t.td,{children:"300"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"JSON"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsx)(t.td,{children:"150"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"or like this:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"timestamp"}),(0,s.jsx)(t.th,{children:"metric"}),(0,s.jsx)(t.th,{children:"format"}),(0,s.jsx)(t.th,{children:"status"}),(0,s.jsx)(t.th,{children:"counter"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsx)(t.td,{children:"300"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"error_too_short"}),(0,s.jsx)(t.td,{children:"7.5"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"or like that:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"timestamp"}),(0,s.jsx)(t.th,{children:"metric"}),(0,s.jsx)(t.th,{children:"format"}),(0,s.jsx)(t.th,{children:"status"}),(0,s.jsx)(t.th,{children:"counter"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"error_too_short"}),(0,s.jsx)(t.td,{children:"7.5"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"JSON"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsx)(t.td,{children:"150"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"If each agent samples data in this way, it will throw away some rows. Upon aggregating data between the agents,\nthe counters for the rows will be close to their original values (as if data was not sampled at all).\nThe more agents aggregate their sampled data, the more accurate the resulting counters are."}),"\n",(0,s.jsx)(t.p,{children:"The same is true for downsampling data: when StatsHouse aggregates 60-second rows to a one-minute row, or\n60-minute rows\u2014to a one-hour row."}),"\n",(0,s.jsx)(t.p,{children:"The aggregates' averages will stay the same but will get the high-frequency noise."}),"\n",(0,s.jsx)("img",{src:d,width:"900"}),"\n",(0,s.jsx)(t.admonition,{type:"important",children:(0,s.jsxs)(t.p,{children:["We strongly ",(0,s.jsx)(t.a,{href:"/statshouse/guides/design-metric#how-many-tag-values",children:"recommend reducing metrics' cardinality"}),"."]})}),"\n",(0,s.jsx)(t.p,{children:"The same algorithm applies both when the agents send data to the aggregator and when the aggregator inserts data into\nthe database."}),"\n",(0,s.jsx)(t.h3,{id:"sampling-coefficient",children:"Sampling coefficient"}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.strong,{children:["Sampling coefficient = the amount of data sent ",(0,s.jsx)(t.em,{children:"(rows)"})," / the budget ",(0,s.jsx)(t.em,{children:"(rows)"})]})})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"For example:"})}),"\n",(0,s.jsxs)(t.p,{children:["you send ",(0,s.jsx)(t.strong,{children:"100 rows"})," per second, but you can only insert ",(0,s.jsx)(t.strong,{children:"20 rows"})," into the aggregator."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The sampling coefficient will be 5."}),"\n",(0,s.jsxs)(t.li,{children:["StatsHouse will ",(0,s.jsx)(t.strong,{children:"reduce the amount of data sent by a factor of 5"}),": 1/5 rows will be kept and the other 4/5 will be discarded."]}),"\n",(0,s.jsx)(t.li,{children:"The counters and values in the remaining rows will be multiplied by 5."}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"how-to-know-the-sampling-coefficient-for-a-metric-in-advance",children:"How to know the sampling coefficient for a metric in advance"}),"\n",(0,s.jsx)(t.p,{children:"You can't know in advance how the metric will be sampled. Why not?"}),"\n",(0,s.jsx)(t.p,{children:"Both values (the amount of data sent and the budget) are varying:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The budget is a relative value \u2014 a weight, not a fixed value in bytes."}),"\n",(0,s.jsx)(t.li,{children:"The amount of data sent can vary significantly."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Start sending metrics to StatsHouse to find the sample rate."}),"\n",(0,s.jsx)(t.h4,{id:"where-to-find-the-sampling-coefficient",children:"Where to find the sampling coefficient"}),"\n",(0,s.jsx)(t.p,{children:"You can find the links to sampling metametrics above the graph:"}),"\n",(0,s.jsx)("img",{src:g,width:"300"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"__src_sampling_factor"})," \u2014 sampling coefficient information for the agent (source),"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"__agg_sampling_factor"})," \u2014 sampling coefficient information for the aggregator level."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Learn more about the ",(0,s.jsx)(t.a,{href:"/statshouse/guides/view-graph#13--meta-metrics",children:"Sampling"})," metametrics."]}),"\n",(0,s.jsx)(t.h4,{id:"how-to-understand-the-sampling-coefficient",children:"How to understand the sampling coefficient"}),"\n",(0,s.jsx)(t.p,{children:"What are the values you see in the sampling metric data?"}),"\n",(0,s.jsx)("img",{src:x,width:"1000"}),"\n",(0,s.jsx)(t.p,{children:"They are NOT the percentage of the rows discarded."}),"\n",(0,s.jsxs)(t.p,{children:["The values on these graphs are sampling coefficients (or ",(0,s.jsxs)(t.em,{children:[(0,s.jsx)(t.strong,{children:"sampling factors"}),", ",(0,s.jsx)(t.strong,{children:"SF"})]}),"). They show ",(0,s.jsx)(t.strong,{children:"the factor the\namount of data has been decreased by"}),". These are the factors you multiply the counters and values in the remaining\nrows by."]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"SF = 2"})," \u2014 there's exactly a half of all the rows left. The amount of data sent is cut in half."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"SF = 3"})," \u2014 one-third of the rows is left, i.e., three times less than you sent."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"SF = 1,5"})," \u2014 two-thirds of the rows remain. The amount of data sent is reduced by one-and-a-half times."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"SF = 100"})," \u2014 one row out of 100 remains. The amount of data sent is reduced by a hundred times."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"A higher sampling coefficient means less data remaining."}),"\n",(0,s.jsx)(t.h4,{id:"non-integer-sampling-coefficients",children:"Non-integer sampling coefficients"}),"\n",(0,s.jsxs)(t.p,{children:["Sampling coefficients should sometimes be non-integer to keep aggregates and statistics the same.\nThis leads to ",(0,s.jsx)(t.a,{href:"/statshouse/guides/view-graph#3--descriptive-statistics",children:"non-integer values for counters"}),",\nthough each counter is an integer number at its core."]}),"\n",(0,s.jsxs)(t.p,{children:["In StatsHouse, counters are floating-point by default.\nFor a particular metric, you can choose the option to randomly round the sampling coefficients:\nif the desired sampling coefficient is ",(0,s.jsx)(t.code,{children:"1.1"}),", it will be rounded to ",(0,s.jsx)(t.code,{children:"1"})," nine times out of ten\u2014and it will be rounded to\n",(0,s.jsx)(t.code,{children:"2"})," only once."]}),"\n",(0,s.jsx)(t.h3,{id:"fair-resource-sharing",children:"Fair resource sharing"}),"\n",(0,s.jsx)(t.p,{children:"Now assume we have more than one metric, and they share the same channel of a given width.\nIdeally, the metrics should not affect each other.\nIf a metric starts generating a lot more rows than the others, it should get the higher sampling coefficient, so that\nthe other metrics are not affected."}),"\n",(0,s.jsx)("img",{src:l,width:"700"}),"\n",(0,s.jsx)(t.p,{children:"The algorithm's logic is the following:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"StatsHouse sorts all the metrics in ascending order by a number of occupied bytes. Then it\nrefers to them one by one."}),"\n",(0,s.jsx)(t.li,{children:"StatsHouse calculates the number of bytes to grant to each metric. The rest of the budget is shared\nbetween the rest of the metrics."}),"\n",(0,s.jsx)(t.li,{children:"If a metric does not spend its budget, its data is not sampled at all."}),"\n",(0,s.jsx)(t.li,{children:"If a metric exceeds its budget, StatsHouse samples it so that the metric data fits in the budget:\nfor a metric with 2000 rows and the budget of 500 rows, the sampling coefficient is set to 4."}),"\n",(0,s.jsx)(t.li,{children:"StatsHouse reduces the rest of the budget by the number of bytes spent."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The number of occupied bytes depends on the ",(0,s.jsx)(t.a,{href:"/statshouse/guides/design-metric#metric-types",children:"metric type"}),"\nand the number of tag values. ",(0,s.jsx)(t.em,{children:"Counter"})," metrics require less space than ",(0,s.jsx)(t.em,{children:"value"})," metrics."]}),"\n",(0,s.jsxs)(t.p,{children:["In practice, some metrics are more important than the other. StatsHouse administrators can set up\n",(0,s.jsx)(t.a,{href:"/statshouse/guides/edit-metrics#admin-settings",children:"weights"})," for the particular metrics.\nA metric having a weight of 2 gets the channel two times as broad as the channel for a 1-weight metric."]}),"\n",(0,s.jsx)(t.h3,{id:"sampling-mainstays",children:'Sampling "mainstays"'}),"\n",(0,s.jsx)(t.p,{children:'The above-mentioned algorithm works fine when the original counters for the rows are close to each other.\nOften, a metric has one or several "mainstays" that are dominating rows.\nFor example, if we successfully process 1000 packets per second,\nbut we also get one error of each type, the first "ok" row becomes the "mainstay":'}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"timestamp"}),(0,s.jsx)(t.th,{children:"metric"}),(0,s.jsx)(t.th,{children:"format"}),(0,s.jsx)(t.th,{children:"status"}),(0,s.jsx)(t.th,{children:"counter"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"JSON"}),(0,s.jsx)(t.td,{children:"ok"}),(0,s.jsxs)(t.td,{children:["1000 ",(0,s.jsx)("text",{className:"orange-text",children:"\u2190 will not be sampled"})]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"error_too_short"}),(0,s.jsx)(t.td,{children:"1"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"error_too_long"}),(0,s.jsx)(t.td,{children:"1"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"error_too_bad"}),(0,s.jsx)(t.td,{children:"1"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13:45:05"}),(0,s.jsx)(t.td,{children:"toy_packets_count"}),(0,s.jsx)(t.td,{children:"TL"}),(0,s.jsx)(t.td,{children:"error_too_good"}),(0,s.jsx)(t.td,{children:"1"})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["When we display the sum of counters on a graph, we get the flat graph for the ",(0,s.jsx)(t.code,{children:"1004"})," value."]}),"\n",(0,s.jsx)(t.p,{children:"Imagine, we have to insert only four rows out of five because of a budget.\nWe will throw away one row per each second:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["for four seconds out of five the value will be ",(0,s.jsx)(t.code,{children:"1003 * (5 / 4) ~ 1203"}),","]}),"\n",(0,s.jsxs)(t.li,{children:["for one second out of five the value will be ",(0,s.jsx)(t.code,{children:"4 * (5 / 4) = 5"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["On average, these values look valid: if we summarize them, we'll get ",(0,s.jsx)(t.code,{children:"1004"}),". But the graph will be located higher than\nthe average value\u2014around ",(0,s.jsx)(t.code,{children:"1200"}),"\u2014and will have the ravines down to 0."]}),"\n",(0,s.jsx)(t.p,{children:'While applying the sampling "mainstays" algorithm, StatsHouse divides the budget in two:'}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The first part of the budget (two rows in our example) is granted for the rows with the maximum counters. They are not sampled."}),"\n",(0,s.jsx)(t.li,{children:'The second part of the budget is spent for the rest of the rows: the random rows are inserted while the others are\ndiscarded. These "weak" rows get the respectively higher sampling rate.'}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In our example, StatsHouse will insert the row with the ",(0,s.jsx)(t.code,{children:"1000"})," counter as is, i.e., will not sample this row. So,\nwe'll get the graph with the average value of ",(0,s.jsx)(t.code,{children:"1004"}),"."]}),"\n",(0,s.jsxs)(t.admonition,{type:"warning",children:[(0,s.jsx)(t.p,{children:'If you need to never discard peaks in your data, it might seem that sampling "mainstays" will help.'}),(0,s.jsx)(t.p,{children:'Unfortunately, this is not the case. The sampling "mainstays" algorithm allows you to avoid the jitter on a graph.\nThe algorithm is NOT intended to prevent you from discarding rows with peak values.'}),(0,s.jsx)(t.p,{children:"Why not?"}),(0,s.jsx)(t.p,{children:'The algorithms around the sampling coefficient are probabilistic. They "flip a coin" with a given probability:\nto discard the row or not. The example below illustrates the physical sense of this process.'})]}),"\n",(0,s.jsx)(t.p,{children:"Imagine:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"we need to send eight data rows"}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["the budget requires us to decrease the amount of data sent to one-fifth: ",(0,s.jsx)(t.strong,{children:"SF = 5"})]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"one of the rows is a peak (dominating)"}),"\n",(0,s.jsxs)(t.p,{children:["\u2192 With the common sampling algorithm, the budget should be enough for ",(0,s.jsx)(t.strong,{children:"inserting 1.6 rows (8/5=1.6)"}),". StatsHouse\nwill insert only one row: either a peak row or any other one."]}),"\n",(0,s.jsx)(t.p,{children:'\u2192 Having a sampling coefficient, StatsHouse determines if it should use the sampling "mainstays" algorithm or not.'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The number of rows to insert ",(0,s.jsx)(t.strong,{children:"should be halved"}),":"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"1.6 / 2 = 0.8"})}),"\n",(0,s.jsx)(t.p,{children:'The quotient appeares to be less than one. It means that StatsHouse cannot allocate the half of the budget for\n"mainstays" (dominating rows).\nStatsHouse cannot round the budget value upwards \u2014 this could lead to sending more bytes than allowed. So using the\nsampling "mainstays" algorithm is impossible, and StatsHouse has to discard the peak values!..'}),"\n",(0,s.jsx)("img",{src:c,width:"800"}),"\n",(0,s.jsxs)(t.p,{children:["You cannot prevent data from being sampled for sure, but you can\n",(0,s.jsx)(t.a,{href:"/statshouse/tldr#how-to-minimize-sampling",children:"make sampling less likely"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"user-guided-sampling",children:"User-guided sampling"}),"\n",(0,s.jsxs)(t.p,{children:["Though it is better to let StatsHouse ",(0,s.jsx)(t.a,{href:"#sampling",children:"sample"})," data for you,\nyou may want to sample your data before sending them to StatsHouse.\nUse this kind of sampling to control the memory footprint."]}),"\n",(0,s.jsxs)(t.p,{children:["In this case, you can explicitly specify ",(0,s.jsx)(t.code,{children:"counter"})," for the ",(0,s.jsx)(t.code,{children:"value"})," metric:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'`{"metrics":[{"name":"my_metric","tags":{},"counter":6, "value":[1, 2, 3]}]}`\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This means that the number of events is 6, and the values are sampled\u2014as if the original ",(0,s.jsx)(t.code,{children:"value"}),"\nwas ",(0,s.jsx)(t.code,{children:"[1, 1, 2, 2, 3, 3]"})]}),"\n",(0,s.jsx)(t.h3,{id:"tag-level-budgeting-fair-key-tags",children:'Tag-level budgeting ("Fair key tags")'}),"\n",(0,s.jsxs)(t.p,{children:['Tag-level budgeting ("Fair key tags") is for communal metrics that receive data from many services.\nThe ',(0,s.jsx)(t.a,{href:"/statshouse/guides/edit-metrics#fair-key-tags",children:'"Fair key tags" feature'})," allows you to allocate metric resources\nfairly \u2014 accordingly to the tag values, e.g., services."]}),"\n",(0,s.jsx)(t.h4,{id:"tag-level-budgeting-disabled",children:"Tag-level budgeting: disabled"}),"\n",(0,s.jsx)(t.p,{children:"Imagine you have a metric that receives data from two services: Service A and Service B."}),"\n",(0,s.jsxs)(t.p,{children:["The services' identifiers appear in the tag ",(0,s.jsx)(t.code,{children:"service_id"}),", so you can distinguish between the data rows from the\nService A and the ones from the Service B."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The Service A generates 99 events per second."}),"\n",(0,s.jsx)(t.li,{children:"The Service B generates one event per second."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"If there are 100 rows in the database from the metric:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"99 of them are from the Service A,"}),"\n",(0,s.jsx)(t.li,{children:"and only one row is from the Service B."}),"\n"]}),"\n",(0,s.jsx)("img",{src:m,width:"800"}),"\n",(0,s.jsx)(t.p,{children:"Both services are sampled equally (within the metric), so the data rows from the Service B appear rarer in\nthe database than the rows of the Service A."}),"\n",(0,s.jsx)(t.p,{children:"Let's have a sampling factor (SF) = 10. It means that only one row out of 10 remains."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"For the Service A: nine rows will be added to the database at a 100% chance, and one more row (the tenth one) \u2014 at\na 90% chance."}),"\n",(0,s.jsx)(t.li,{children:"For the Service B: only one row will be added to the database (at a 10% chance)."}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"tag-level-budgeting-enabled",children:"Tag-level budgeting: enabled"}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["You can assign the ",(0,s.jsx)(t.code,{children:"service_id"}),' tag to be a "fair key" \u2014 to fairly share the metric budget between two services.']})}),"\n",(0,s.jsxs)(t.p,{children:["See how to ",(0,s.jsx)(t.a,{href:"/statshouse/guides/edit-metrics#fair-key-tags",children:'enable the "Fair key tags" feature'})," for a tag. The metric budget\nwill be fairly shared between the services:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"the rare events from the Service B improve their chances to appear on a StatsHouse graph;"}),"\n",(0,s.jsx)(t.li,{children:"the intensively-generating Service A gets the reduced budget."}),"\n"]})]})}function v(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(b,{...e})}):b(e)}},7444:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/metric-formula-type-ae2fb9691e4f00ceb27d33a8d2df9eaa.png"},2808:(e,t,n)=>{n.p},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var s=n(7294);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);