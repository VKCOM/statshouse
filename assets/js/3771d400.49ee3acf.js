"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[442],{6104:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>u,contentTitle:()=>j,default:()=>f,frontMatter:()=>x,metadata:()=>g,toc:()=>m});var n=s(5893),i=s(1151);const r=s.p+"assets/images/per-sec-aggr-a87f3956a65dd5bc7d4e0f7e965a3a9b.png";s(2808);const a=s.p+"assets/images/aggregation-components-dc9f319fb9dfb0b6ddf5c3c030b3dfc4.png",o=s.p+"assets/images/bottlenecks-027b934b676924261254ec9e9fb4b586.png",d=s.p+"assets/images/cardinality-sampling-noise-58e6825a4c5500c54cef2aac227df503.png",c=s.p+"assets/images/higher-sampling-coef-bb44ce33891709cae6bcba650712bf36.png",l=s.p+"assets/images/lod-ccc79f120c00efa43b6939d6ebd4aed0.png";s(7444);const h=s.p+"assets/images/min-available-aggregation-25c11af0fb1df0946f0e1187665685b2.png",x={sidebar_position:2},j="Concepts",g={id:"conceptual overview/concepts",title:"Concepts",description:"To understand StatsHouse deeply, learn the basic metric-related concepts:",source:"@site/docs/conceptual overview/concepts.md",sourceDirName:"conceptual overview",slug:"/conceptual overview/concepts",permalink:"/statshouse/conceptual overview/concepts",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Features",permalink:"/statshouse/conceptual overview/features"},next:{title:"Components",permalink:"/statshouse/conceptual overview/components"}},u={},m=[{value:"Aggregation",id:"aggregation",level:2},{value:"Aggregate",id:"aggregate",level:3},{value:"Minimal available aggregation interval",id:"minimal-available-aggregation-interval",level:3},{value:"Cardinality",id:"cardinality",level:3},{value:"Sampling",id:"sampling",level:2},{value:"Non-integer sampling coefficients",id:"non-integer-sampling-coefficients",level:3},{value:"Fair resource sharing",id:"fair-resource-sharing",level:3},{value:"Sampling &quot;mainstays&quot;",id:"sampling-mainstays",level:3},{value:"User-guided sampling",id:"user-guided-sampling",level:3},{value:"Resolution",id:"resolution",level:3}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"concepts",children:"Concepts"}),"\n",(0,n.jsx)(t.p,{children:"To understand StatsHouse deeply, learn the basic metric-related concepts:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#aggregation",children:"aggregation"}),","]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#cardinality",children:"cardinality"}),","]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"#sampling",children:"sampling"}),"."]}),"\n"]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["Find a kind of ",(0,n.jsx)(t.strong,{children:"TL;DR"})," ",(0,n.jsx)(t.a,{href:"/statshouse/guides/design-metric#how-many-tag-values",children:(0,n.jsx)(t.strong,{children:"here"})}),"."]})}),"\n",(0,n.jsx)(t.h2,{id:"aggregation",children:"Aggregation"}),"\n",(0,n.jsx)(t.p,{children:"StatsHouse aggregates the events with the same tag sets\u2014both within the time period and between the hosts."}),"\n",(0,n.jsx)(t.h3,{id:"aggregate",children:"Aggregate"}),"\n",(0,n.jsxs)(t.p,{children:["An ",(0,n.jsx)(t.strong,{children:"aggregate"})," is the result of aggregation.\nIt is the minimal set of descriptive statistics such as ",(0,n.jsx)(t.em,{children:"count"}),", ",(0,n.jsx)(t.em,{children:"sum"}),", ",(0,n.jsx)(t.em,{children:"min"}),", ",(0,n.jsx)(t.em,{children:"max"}),". StatsHouse uses them to\nreconstruct the rest of statistics if necessary.\nFor example, this is what an aggregate within one second looks like:"]}),"\n",(0,n.jsx)("img",{src:r,width:"700"}),"\n",(0,n.jsx)(t.admonition,{type:"important",children:(0,n.jsxs)(t.p,{children:["StatsHouse does not store an exact metric value per each moment.\nInstead, it stores aggregates associated with time intervals\n(see more about the ",(0,n.jsx)(t.a,{href:"#minimal-available-aggregation-interval",children:"minimal available aggregation interval"}),")."]})}),"\n",(0,n.jsx)(t.p,{children:"Upon aggregation, StatsHouse inserts data into the ClickHouse database\u2014specifically, into a per-second table.\nThe amount of per-second data is huge, so StatsHouse downsamples data: per-second data is available for two days."}),"\n",(0,n.jsx)(t.p,{children:"StatsHouse aggregates data within a minute and inserts it to a per-minute ClickHouse table.\nSimilarly, StatsHouse aggregates per-minute data to per-hour one."}),"\n",(0,n.jsx)(t.h3,{id:"minimal-available-aggregation-interval",children:"Minimal available aggregation interval"}),"\n",(0,n.jsx)(t.p,{children:'The currently available aggregate depends on the "age" of the data:'}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"per-second aggregated data is stored for the first two days,"}),"\n",(0,n.jsx)(t.li,{children:"per-minute aggregated data is stored for a month,"}),"\n",(0,n.jsx)(t.li,{children:"per-hour aggregated data is available forever (if not deleted manually)."}),"\n"]}),"\n",(0,n.jsx)("img",{src:h,width:"700"}),"\n",(0,n.jsx)(t.p,{children:"Imagine a hypothetical product. For this product, we need to get the number of received packets per second.\nThe packets may have different"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["formats: ",(0,n.jsx)(t.code,{children:"TL"}),", ",(0,n.jsx)(t.code,{children:"JSON"}),";"]}),"\n",(0,n.jsxs)(t.li,{children:['statuses: "correct" (',(0,n.jsx)(t.code,{children:"ok"}),') or "incorrect" (',(0,n.jsx)(t.code,{children:"error_too_short"}),", ",(0,n.jsx)(t.code,{children:"error_too_long"}),", etc.)."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["When the user-defined code receives a packet, it sends an event to StatsHouse, specifically,\nto an ",(0,n.jsx)(t.a,{href:"/statshouse/conceptual%20overview/components#agent",children:"agent"}),'.\nFor example, let this event have a JSON format and a "correct" status:']}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'    {"metrics":[ {"name": "toy_packets_count",\n     "tags":{"format": "JSON", "status": "ok"},\n     "counter": 1}] }\n'})}),"\n",(0,n.jsx)(t.p,{children:"Formats and statuses may vary for the packets:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'    {"metrics":[ {"name": "toy_packets_count",\n     "tags":{"format": "TL", "status": "error_too_short"},\n     "counter": 1} ]}\n'})}),"\n",(0,n.jsx)(t.p,{children:"Let's represent an event as a row in a conventional database. Upon per-second aggregation,\nwe'll get the table below\u2014for each tag value combination received, we get the row with the corresponding count:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"timestamp"}),(0,n.jsx)(t.th,{children:"metric"}),(0,n.jsx)(t.th,{children:"format"}),(0,n.jsx)(t.th,{children:"status"}),(0,n.jsx)(t.th,{children:"counter"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"JSON"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsx)(t.td,{children:"100"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsx)(t.td,{children:"200"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"error_too_short"}),(0,n.jsx)(t.td,{children:"5"})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"The number of rows in such a table is a metric's cardinality."}),"\n",(0,n.jsx)(t.h3,{id:"cardinality",children:"Cardinality"}),"\n",(0,n.jsx)(t.admonition,{type:"important",children:(0,n.jsx)(t.p,{children:"Cardinality is how many unique tag value combinations you send for a metric."})}),"\n",(0,n.jsxs)(t.p,{children:["In the example above, the metric's cardinality for the current second is ",(0,n.jsx)(t.em,{children:"three"})," as we have three tag value combinations."]}),"\n",(0,n.jsx)(t.p,{children:'The amount of inserted data does not depend on the number of events. It depends on the number of unique tag\nvalue combinations. StatsHouse "collapses" the rows with the same tag value combinations and summarizes the counters.'}),"\n",(0,n.jsxs)(t.p,{children:["StatsHouse collects data from many hosts (",(0,n.jsx)(t.a,{href:"/statshouse/conceptual%20overview/components#agent",children:"agents"}),") simultaneously. Upon collecting and\naggregating data within a second, it sends data to ",(0,n.jsx)(t.a,{href:"/statshouse/conceptual%20overview/components#aggregator",children:"aggregators"}),"."]}),"\n",(0,n.jsx)("img",{src:a,width:"1000"}),"\n",(0,n.jsx)(t.p,{children:"For our hypothetical metric, the between-host aggregation per second leads to the following:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"timestamp"}),(0,n.jsx)(t.th,{children:"metric"}),(0,n.jsx)(t.th,{children:"format"}),(0,n.jsx)(t.th,{children:"status"}),(0,n.jsx)(t.th,{children:"counter"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"JSON"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsx)(t.td,{children:"1100"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"JSON"}),(0,n.jsx)(t.td,{children:"error_too_short"}),(0,n.jsx)(t.td,{children:"40"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"JSON"}),(0,n.jsx)(t.td,{children:"error_too_long"}),(0,n.jsx)(t.td,{children:"20"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsx)(t.td,{children:"30"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"error_too_short"}),(0,n.jsx)(t.td,{children:"2400"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"msgpack"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsx)(t.td,{children:"1"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:["Cardinality may increase due to between-host aggregation: the sets of tag value combinations for the hosts may vary.\nIn the example above, the total cardinality for the current second is ",(0,n.jsx)(t.em,{children:"six"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["The total ",(0,n.jsx)(t.a,{href:"/statshouse/guides/view-graph#cardinality",children:"hour cardinality"})," for a metric determines how many\nrows for a metric can be stored in a database for a long time."]}),"\n",(0,n.jsx)(t.p,{children:"When retrieving data from a database, we have to iterate over the rows for the chosen time interval. It is\nthe cardinality that determines the number of these rows and the time we spend on doing this."}),"\n",(0,n.jsx)(t.h2,{id:"sampling",children:"Sampling"}),"\n",(0,n.jsx)(t.p,{children:"StatsHouse has two bottlenecks:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"sending data from agents to aggregators,"}),"\n",(0,n.jsx)(t.li,{children:"inserting data into the ClickHouse database."}),"\n"]}),"\n",(0,n.jsx)("img",{src:o,width:"1000"}),"\n",(0,n.jsx)(t.p,{children:"If the amount of sent or inserted data exceeded the aggregator's or database's capacity, it could lead to a\nprocessing delay. This delay could increase indefinitely or disappear if the amount of data was reduced.\nTo ensure minimal delay, StatsHouse samples data."}),"\n",(0,n.jsx)(t.admonition,{type:"important",children:(0,n.jsx)(t.p,{children:"Sampling means that StatsHouse throws away pieces of data to reduce its overall amount.\nTo keep aggregates and statistics the same, StatsHouse multiplies the rest of data by a sampling coefficient."})}),"\n",(0,n.jsx)(t.p,{children:"Suppose we have three data rows per second for a single metric:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"timestamp"}),(0,n.jsx)(t.th,{children:"metric"}),(0,n.jsx)(t.th,{children:"format"}),(0,n.jsx)(t.th,{children:"status"}),(0,n.jsx)(t.th,{children:"counter"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"JSON"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsx)(t.td,{children:"100"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsx)(t.td,{children:"200"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"error_too_short"}),(0,n.jsx)(t.td,{children:"5"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:["Suppose also that the channel width allows us to send only two rows to the aggregator. StatsHouse will set\nthe sampling coefficient to ",(0,n.jsx)(t.code,{children:"1.5"}),", then randomize the rows, and send only the first two rows multiplied by ",(0,n.jsx)(t.code,{children:"1.5"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"The data sent will look like this:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"timestamp"}),(0,n.jsx)(t.th,{children:"metric"}),(0,n.jsx)(t.th,{children:"format"}),(0,n.jsx)(t.th,{children:"status"}),(0,n.jsx)(t.th,{children:"counter"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsx)(t.td,{children:"300"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"JSON"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsx)(t.td,{children:"150"})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"or like this:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"timestamp"}),(0,n.jsx)(t.th,{children:"metric"}),(0,n.jsx)(t.th,{children:"format"}),(0,n.jsx)(t.th,{children:"status"}),(0,n.jsx)(t.th,{children:"counter"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsx)(t.td,{children:"300"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"error_too_short"}),(0,n.jsx)(t.td,{children:"7.5"})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"or like that:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"timestamp"}),(0,n.jsx)(t.th,{children:"metric"}),(0,n.jsx)(t.th,{children:"format"}),(0,n.jsx)(t.th,{children:"status"}),(0,n.jsx)(t.th,{children:"counter"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"error_too_short"}),(0,n.jsx)(t.td,{children:"7.5"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"JSON"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsx)(t.td,{children:"150"})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"If each agent samples data in this way, it will throw away some rows. Upon aggregating data between the agents,\nthe counters for the rows will be close to their original values (as if data was not sampled at all).\nThe more agents aggregate their sampled data, the more accurate the resulting counters are."}),"\n",(0,n.jsx)(t.p,{children:"The same is true for downsampling data: when StatsHouse aggregates 60-second rows to a one-minute row, or\n60-minute rows\u2014to a one-hour row."}),"\n",(0,n.jsx)(t.p,{children:"The aggregates' averages will stay the same but will get the high-frequency noise."}),"\n",(0,n.jsx)("img",{src:d,width:"900"}),"\n",(0,n.jsx)(t.admonition,{type:"important",children:(0,n.jsxs)(t.p,{children:["We strongly ",(0,n.jsx)(t.a,{href:"/statshouse/guides/design-metric#how-many-tag-values",children:"recommend reducing metrics' cardinality"}),"."]})}),"\n",(0,n.jsx)(t.p,{children:"The same algorithm applies both when the agents send data to the aggregator and when the aggregator inserts data into\nthe database."}),"\n",(0,n.jsx)(t.h3,{id:"non-integer-sampling-coefficients",children:"Non-integer sampling coefficients"}),"\n",(0,n.jsxs)(t.p,{children:["Sampling coefficients should sometimes be non-integer to keep aggregates and statistics the same.\nThis leads to ",(0,n.jsx)(t.a,{href:"/statshouse/guides/view-graph#3--descriptive-statistics",children:"non-integer values for counters"}),",\nthough each counter is an integer number at its core."]}),"\n",(0,n.jsxs)(t.p,{children:["In StatsHouse, counters are floating-point by default.\nFor a particular metric, you can choose the option to randomly round the sampling coefficients:\nif the desired sampling coefficient is ",(0,n.jsx)(t.code,{children:"1.1"}),", it will be rounded to ",(0,n.jsx)(t.code,{children:"1"})," nine times out of ten\u2014and it will be rounded to\n",(0,n.jsx)(t.code,{children:"2"})," only once."]}),"\n",(0,n.jsx)(t.h3,{id:"fair-resource-sharing",children:"Fair resource sharing"}),"\n",(0,n.jsx)(t.p,{children:"Now assume we have more than one metric, and they share the same channel of a given width.\nIdeally, the metrics should not affect each other.\nIf a metric starts generating a lot more rows than the others, it should get the higher sampling coefficient, so that\nthe other metrics are not affected."}),"\n",(0,n.jsx)("img",{src:c,width:"700"}),"\n",(0,n.jsx)(t.p,{children:"The algorithm's logic is the following:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"StatsHouse sorts all the metrics in ascending order by a number of occupied bytes. Then it\nrefers to them one by one."}),"\n",(0,n.jsx)(t.li,{children:"StatsHouse calculates the number of bytes to grant to each metric. The rest of the budget is shared\nbetween the rest of the metrics."}),"\n",(0,n.jsx)(t.li,{children:"If a metric does not spend its budget, its data is not sampled at all."}),"\n",(0,n.jsx)(t.li,{children:"If a metric exceeds its budget, StatsHouse samples it so that the metric data fits in the budget:\nfor a metric with 2000 rows and the budget of 500 rows, the sampling coefficient is set to 4."}),"\n",(0,n.jsx)(t.li,{children:"StatsHouse reduces the rest of the budget by the number of bytes spent."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["The number of occupied bytes depends on the ",(0,n.jsx)(t.a,{href:"/statshouse/guides/design-metric#metric-types",children:"metric type"}),"\nand the number of tag values. ",(0,n.jsx)(t.em,{children:"Counter"})," metrics require less space than ",(0,n.jsx)(t.em,{children:"value"})," metrics."]}),"\n",(0,n.jsxs)(t.p,{children:["In practice, some metrics are more important than the other. StatsHouse administrators can set up\n",(0,n.jsx)(t.a,{href:"/statshouse/guides/edit-metrics#admin-settings",children:"weights"})," for the particular metrics.\nA metric having a weight of 2 gets the channel two times as broad as the channel for a 1-weight metric."]}),"\n",(0,n.jsx)(t.h3,{id:"sampling-mainstays",children:'Sampling "mainstays"'}),"\n",(0,n.jsx)(t.p,{children:'The above-mentioned algorithm works fine when the original counters for the rows are close to each other.\nOften, a metric has one or several "mainstays" that are dominating rows.\nFor example, if we successfully process 1000 packets per second,\nbut we also get one error of each type, the first "ok" row becomes the "mainstay":'}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"timestamp"}),(0,n.jsx)(t.th,{children:"metric"}),(0,n.jsx)(t.th,{children:"format"}),(0,n.jsx)(t.th,{children:"status"}),(0,n.jsx)(t.th,{children:"counter"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"JSON"}),(0,n.jsx)(t.td,{children:"ok"}),(0,n.jsxs)(t.td,{children:["1000 ",(0,n.jsx)("text",{className:"orange-text",children:"\u2190 will not be sampled"})]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"error_too_short"}),(0,n.jsx)(t.td,{children:"1"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"error_too_long"}),(0,n.jsx)(t.td,{children:"1"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"error_too_bad"}),(0,n.jsx)(t.td,{children:"1"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"13:45:05"}),(0,n.jsx)(t.td,{children:"toy_packets_count"}),(0,n.jsx)(t.td,{children:"TL"}),(0,n.jsx)(t.td,{children:"error_too_good"}),(0,n.jsx)(t.td,{children:"1"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:["When we display the sum of counters on a graph, we get the flat graph for the ",(0,n.jsx)(t.code,{children:"1004"})," value."]}),"\n",(0,n.jsx)(t.p,{children:"Imagine, we have to insert only four rows out of five because of a budget.\nWe will throw away one row per each second:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["for four seconds out of five the value will be ",(0,n.jsx)(t.code,{children:"1003 * (5 / 4) ~ 1203"}),","]}),"\n",(0,n.jsxs)(t.li,{children:["for one second out of five the value will be ",(0,n.jsx)(t.code,{children:"4 * (5 / 4) = 5"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["On average, these values look valid: if we summarize them, we'll get ",(0,n.jsx)(t.code,{children:"1004"}),". But the graph will be located higher than\nthe average value\u2014around ",(0,n.jsx)(t.code,{children:"1200"}),"\u2014and will have the ravines down to 0."]}),"\n",(0,n.jsx)(t.p,{children:'When StatsHouse has to sample such data (with "mainstays"), it divides the budget in two. The first part of the\nbudget (two rows in our example) is granted for the non-sampled rows with the maximum counter values.\nThe second part of the budget is spent for the rest of the rows: the random rows are inserted while the others are\nthrown away. Unlike "mainstays," these "weak" rows get the respectively higher sampling rate.'}),"\n",(0,n.jsxs)(t.p,{children:["In our example, StatsHouse will insert the row with the ",(0,n.jsx)(t.code,{children:"1000"})," counter as is, i.e., will not sample this row. So,\nwe'll get the graph with the average value of ",(0,n.jsx)(t.code,{children:"1004"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"user-guided-sampling",children:"User-guided sampling"}),"\n",(0,n.jsxs)(t.p,{children:["Though it is better to let StatsHouse ",(0,n.jsx)(t.a,{href:"#sampling",children:"sample"})," data for you,\nyou may want to sample your data before sending them to StatsHouse.\nUse this kind of sampling to control the memory footprint."]}),"\n",(0,n.jsxs)(t.p,{children:["In this case, you can explicitly specify ",(0,n.jsx)(t.code,{children:"counter"})," for the ",(0,n.jsx)(t.code,{children:"value"})," metric:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:'`{"metrics":[{"name":"my_metric","tags":{},"counter":6, "value":[1, 2, 3]}]}`\n'})}),"\n",(0,n.jsxs)(t.p,{children:["This means that the number of events is 6, and the values are sampled\u2014as if the original ",(0,n.jsx)(t.code,{children:"value"}),"\nwas ",(0,n.jsx)(t.code,{children:"[1, 1, 2, 2, 3, 3]"})]}),"\n",(0,n.jsx)(t.h3,{id:"resolution",children:"Resolution"}),"\n",(0,n.jsxs)(t.p,{children:["The highest available resolution of data to show on a graph depends on the currently available\n",(0,n.jsx)(t.a,{href:"#aggregation",children:"aggregate"}),": you can get per-second data for the last two days, per-minute data for the last month,\nand you can get per-hour data for any period you want."]}),"\n",(0,n.jsxs)(t.p,{children:["If getting the highest available resolution is not crucial for you, but it is important for you\nto reduce ",(0,n.jsx)(t.a,{href:"#sampling",children:"sampling"}),", ",(0,n.jsx)(t.a,{href:"/statshouse/guides/edit-metrics#resolution",children:"reduce your metric resolution"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["For example, you may choose a custom resolution to make the ",(0,n.jsx)(t.a,{href:"/statshouse/conceptual%20overview/components#agent",children:"agent"}),"\nsend data once per five seconds instead of sending per-second data.\nStatsHouse will send data five times more rarely and grant five times more rows for the metric.\nThe processing delay will increase by ",(0,n.jsx)(t.strong,{children:"ten"})," seconds:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["StatsHouse will be collecting data for ",(0,n.jsx)(t.strong,{children:"five"})," seconds,"]}),"\n",(0,n.jsx)(t.li,{children:"then it will shard data into five partitions,"}),"\n",(0,n.jsxs)(t.li,{children:["and will be sending data for the next ",(0,n.jsx)(t.strong,{children:"five"})," seconds\u2014one shard per second."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"This way of sending data ensures fair channel sharing for the metrics with differing resolution."}),"\n",(0,n.jsx)(t.p,{children:'The resolution level may be a divisor of 60. To avoid jitter on a graph, use the "native" resolution levels:\n1, 5, 15, 60 seconds. These levels correspond to levels of details (LOD) in the UI.\nIf you choose a 2-second resolution level, the events will be distributed between 5-second LODs unevenly\u2014two or\nthree events per LOD:'}),"\n",(0,n.jsx)("img",{src:l,width:"300"}),"\n",(0,n.jsx)(t.p,{children:"This uneven distribution leads to a jitter on a graph."})]})}function f(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},7444:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/metric-formula-type-ae2fb9691e4f00ceb27d33a8d2df9eaa.png"},2808:(e,t,s)=>{s.p},1151:(e,t,s)=>{s.d(t,{Z:()=>o,a:()=>a});var n=s(7294);const i={},r=n.createContext(i);function a(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);