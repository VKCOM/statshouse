CREATE TABLE IF NOT EXISTS statshouse_internal_log ON CLUSTER statlogs2
(`time` DateTime,
 `host` String,
 `type` String,
 `key0` String,
 `key1` String,
 `key2` String,
 `key3` String,
 `key4` String,
 `key5` String,
 `message` String)
ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{shard}/{table}', '{replica}')
PARTITION BY toYYYYMM(time)
ORDER BY (time, host, type, key0, key1, key2, key3, key4, key5)
TTL time + toIntervalMonth(3)
SETTINGS ttl_only_drop_parts = 1, index_granularity = 8192;

CREATE TABLE IF NOT EXISTS statshouse_internal_log_buffer ON CLUSTER statlogs2
(`time` DateTime,
 `host` String,
 `type` String,
 `key0` String,
 `key1` String,
 `key2` String,
 `key3` String,
 `key4` String,
 `key5` String,
 `message` String)
ENGINE = Buffer('default', 'statshouse_internal_log', 2, 120, 120, 10000000, 10000000, 100000000, 100000000);

CREATE TABLE IF NOT EXISTS statshouse_internal_log_dist ON CLUSTER statlogs2
(`time` DateTime,
 `host` String,
 `type` String,
 `key0` String,
 `key1` String,
 `key2` String,
 `key3` String,
 `key4` String,
 `key5` String,
 `message` String)
ENGINE = Distributed('statlogs2', 'default', 'statshouse_internal_log');

CREATE TABLE IF NOT EXISTS statshouse_value_1h ON CLUSTER statlogs2
(`metric` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{shard}/{table}', '{replica}')
PARTITION BY toYYYYMM(time)
ORDER BY (metric, time, key0, key1, key2, key3, key4, key5, key6, key7, key8, key9, key10, key11, key12, key13, key14, key15, skey)
TTL time + toIntervalDay(4) TO DISK 'default'
SETTINGS index_granularity = 8192, ttl_only_drop_parts = 1;

CREATE TABLE IF NOT EXISTS statshouse_value_1h_dist ON CLUSTER statlogs2
(`metric` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = Distributed('statlogs2', 'default', 'statshouse_value_1h');

CREATE TABLE IF NOT EXISTS statshouse_value_1h_prekey ON CLUSTER statlogs2
(`metric` Int32,
 `prekey` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{shard}/{table}', '{replica}')
PARTITION BY toYYYYMM(time)
ORDER BY (metric, prekey, time, key0, key1, key2, key3, key4, key5, key6, key7, key8, key9, key10, key11, key12, key13, key14, key15, skey)
TTL time + toIntervalDay(4) TO DISK 'default'
SETTINGS ttl_only_drop_parts = 1, index_granularity = 8192;

CREATE TABLE IF NOT EXISTS statshouse_value_1h_prekey_dist ON CLUSTER statlogs2
(`metric` Int32,
 `prekey` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = Distributed('statlogs2', 'default', 'statshouse_value_1h_prekey');

CREATE TABLE IF NOT EXISTS statshouse_value_1m ON CLUSTER statlogs2
(`metric` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{shard}/{table}', '{replica}')
PARTITION BY toDate(time)
ORDER BY (metric, time, key0, key1, key2, key3, key4, key5, key6, key7, key8, key9, key10, key11, key12, key13, key14, key15, skey)
TTL time + toIntervalDay(4) TO DISK 'default', time + toIntervalDay(33)
SETTINGS ttl_only_drop_parts = 1, index_granularity = 8192;


CREATE TABLE IF NOT EXISTS statshouse_value_1m_dist ON CLUSTER statlogs2
(`metric` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = Distributed('statlogs2', 'default', 'statshouse_value_1m');

CREATE TABLE IF NOT EXISTS statshouse_value_1m_prekey ON CLUSTER statlogs2
(`metric` Int32,
 `prekey` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{shard}/{table}', '{replica}')
PARTITION BY toDate(time)
ORDER BY (metric, prekey, time, key0, key1, key2, key3, key4, key5, key6, key7, key8, key9, key10, key11, key12, key13, key14, key15, skey)
TTL time + toIntervalDay(4) TO DISK 'default', time + toIntervalDay(33)
SETTINGS ttl_only_drop_parts = 1, index_granularity = 8192;

CREATE TABLE IF NOT EXISTS statshouse_value_1m_prekey_dist ON CLUSTER statlogs2
(`metric` Int32,
 `prekey` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = Distributed('statlogs2', 'default', 'statshouse_value_1m_prekey');

CREATE TABLE IF NOT EXISTS statshouse_value_1s ON CLUSTER statlogs2
(`metric` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{shard}/{table}', '{replica}')
PARTITION BY toStartOfInterval(time, toIntervalHour(6))
ORDER BY (metric, time, key0, key1, key2, key3, key4, key5, key6, key7, key8, key9, key10, key11, key12, key13, key14, key15, skey)
TTL time + toIntervalHour(52)
SETTINGS ttl_only_drop_parts = 1, index_granularity = 8192, max_bytes_to_merge_at_max_space_in_pool = 16106127360;


CREATE TABLE IF NOT EXISTS statshouse_value_1s_dist ON CLUSTER statlogs2
(`metric` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = Distributed('statlogs2', 'default', 'statshouse_value_1s');

CREATE TABLE IF NOT EXISTS statshouse_value_1s_prekey ON CLUSTER statlogs2
(`metric` Int32,
 `prekey` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{shard}/{table}', '{replica}')
PARTITION BY toStartOfInterval(time, toIntervalHour(6))
ORDER BY (metric, prekey, time, key0, key1, key2, key3, key4, key5, key6, key7, key8, key9, key10, key11, key12, key13, key14, key15, skey)
TTL time + toIntervalHour(52)
SETTINGS ttl_only_drop_parts = 1, max_bytes_to_merge_at_max_space_in_pool = 16106127360, index_granularity = 8192;

CREATE TABLE IF NOT EXISTS statshouse_value_1s_prekey_dist ON CLUSTER statlogs2
(`metric` Int32,
 `prekey` Int32,
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64),
 `max` SimpleAggregateFunction(max, Float64),
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32))
ENGINE = Distributed('statlogs2', 'default', 'statshouse_value_1s_prekey');


CREATE TABLE IF NOT EXISTS statshouse_value_incoming_prekey3 ON CLUSTER statlogs2
(
    `metric` Int32,
    `prekey` Int32,
    `prekey_set` UInt8,
    `time` DateTime,
    `key0` Int32,
    `key1` Int32,
    `key2` Int32,
    `key3` Int32,
    `key4` Int32,
    `key5` Int32,
    `key6` Int32,
    `key7` Int32,
    `key8` Int32,
    `key9` Int32,
    `key10` Int32,
    `key11` Int32,
    `key12` Int32,
    `key13` Int32,
    `key14` Int32,
    `key15` Int32,
    `skey` String,
    `count` SimpleAggregateFunction(sum, Float64),
    `min` SimpleAggregateFunction(min, Float64),
    `max` SimpleAggregateFunction(max, Float64),
    `sum` SimpleAggregateFunction(sum, Float64),
    `sumsquare` SimpleAggregateFunction(sum, Float64),
    `min_host` AggregateFunction(argMin, Int32, Float32),
    `max_host` AggregateFunction(argMax, Int32, Float32),
    `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
    `uniq_state` AggregateFunction(uniq, Int64)
    )
    ENGINE = Null;


CREATE MATERIALIZED VIEW IF NOT EXISTS statshouse_value_1h_agg3 ON CLUSTER statlogs2 TO statshouse_value_1h
(
    `metric` Int32,
    `time` DateTime,
    `key0` Int32,
    `key1` Int32,
    `key2` Int32,
    `key3` Int32,
    `key4` Int32,
    `key5` Int32,
    `key6` Int32,
    `key7` Int32,
    `key8` Int32,
    `key9` Int32,
    `key10` Int32,
    `key11` Int32,
    `key12` Int32,
    `key13` Int32,
    `key14` Int32,
    `key15` Int32,
    `skey` String,
    `count` SimpleAggregateFunction(sum, Float64),
    `min` SimpleAggregateFunction(min, Float64),
    `max` SimpleAggregateFunction(max, Float64),
    `sum` SimpleAggregateFunction(sum, Float64),
    `sumsquare` SimpleAggregateFunction(sum, Float64),
    `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
    `uniq_state` AggregateFunction(uniq, Int64),
    `min_host` AggregateFunction(argMin, Int32, Float32),
    `max_host` AggregateFunction(argMax, Int32, Float32)
) AS
SELECT
    metric,
    toStartOfInterval(time, toIntervalHour(1)) AS time,
    key0,
    key1,
    key2,
    key3,
    key4,
    key5,
    key6,
    key7,
    key8,
    key9,
    key10,
    key11,
    key12,
    key13,
    key14,
    key15,
    skey,
    count,
    min,
    max,
    sum,
    sumsquare,
    percentiles,
    uniq_state,
    min_host,
    max_host
FROM statshouse_value_incoming_prekey3
WHERE (toDate(time) >= (today() - 3)) AND (toDate(time) <= (today() + 1)) AND (prekey_set <> 2);


CREATE MATERIALIZED VIEW IF NOT EXISTS statshouse_value_1h_agg_prekey3 ON CLUSTER statlogs2 TO statshouse_value_1h_prekey
(
    `metric` Int32,
    `prekey` Int32,
    `prekey_set` UInt8,
    `time` DateTime,
    `key0` Int32,
    `key1` Int32,
    `key2` Int32,
    `key3` Int32,
    `key4` Int32,
    `key5` Int32,
    `key6` Int32,
    `key7` Int32,
    `key8` Int32,
    `key9` Int32,
    `key10` Int32,
    `key11` Int32,
    `key12` Int32,
    `key13` Int32,
    `key14` Int32,
    `key15` Int32,
    `skey` String,
    `count` SimpleAggregateFunction(sum, Float64),
    `min` SimpleAggregateFunction(min, Float64),
    `max` SimpleAggregateFunction(max, Float64),
    `sum` SimpleAggregateFunction(sum, Float64),
    `sumsquare` SimpleAggregateFunction(sum, Float64),
    `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
    `uniq_state` AggregateFunction(uniq, Int64),
    `min_host` AggregateFunction(argMin, Int32, Float32),
    `max_host` AggregateFunction(argMax, Int32, Float32)
) AS
SELECT
    metric,
    prekey,
    prekey_set,
    toStartOfInterval(time, toIntervalHour(1)) AS time,
    key0,
    key1,
    key2,
    key3,
    key4,
    key5,
    key6,
    key7,
    key8,
    key9,
    key10,
    key11,
    key12,
    key13,
    key14,
    key15,
    skey,
    count,
    min,
    max,
    sum,
    sumsquare,
    percentiles,
    uniq_state,
    min_host,
    max_host
FROM statshouse_value_incoming_prekey3
WHERE (toDate(time) >= (today() - 3)) AND (toDate(time) <= (today() + 1)) AND (prekey_set > 0);

CREATE MATERIALIZED VIEW IF NOT EXISTS statshouse_value_1m_agg3 ON CLUSTER statlogs2 TO statshouse_value_1m
(
    `metric` Int32,
    `time` DateTime,
    `key0` Int32,
    `key1` Int32,
    `key2` Int32,
    `key3` Int32,
    `key4` Int32,
    `key5` Int32,
    `key6` Int32,
    `key7` Int32,
    `key8` Int32,
    `key9` Int32,
    `key10` Int32,
    `key11` Int32,
    `key12` Int32,
    `key13` Int32,
    `key14` Int32,
    `key15` Int32,
    `skey` String,
    `count` SimpleAggregateFunction(sum, Float64),
    `min` SimpleAggregateFunction(min, Float64),
    `max` SimpleAggregateFunction(max, Float64),
    `sum` SimpleAggregateFunction(sum, Float64),
    `sumsquare` SimpleAggregateFunction(sum, Float64),
    `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
    `uniq_state` AggregateFunction(uniq, Int64),
    `min_host` AggregateFunction(argMin, Int32, Float32),
    `max_host` AggregateFunction(argMax, Int32, Float32)
) AS
SELECT
    metric,
    toStartOfInterval(time, toIntervalMinute(1)) AS time,
    key0,
    key1,
    key2,
    key3,
    key4,
    key5,
    key6,
    key7,
    key8,
    key9,
    key10,
    key11,
    key12,
    key13,
    key14,
    key15,
    skey,
    count,
    min,
    max,
    sum,
    sumsquare,
    percentiles,
    uniq_state,
    min_host,
    max_host
FROM statshouse_value_incoming_prekey3
WHERE (toDate(time) >= (today() - 3)) AND (toDate(time) <= (today() + 1)) AND (prekey_set <> 2);


CREATE MATERIALIZED VIEW IF NOT EXISTS statshouse_value_1m_agg_prekey3 ON CLUSTER statlogs2 TO statshouse_value_1m_prekey
(
    `metric` Int32,
    `prekey` Int32,
    `prekey_set` UInt8,
    `time` DateTime,
    `key0` Int32,
    `key1` Int32,
    `key2` Int32,
    `key3` Int32,
    `key4` Int32,
    `key5` Int32,
    `key6` Int32,
    `key7` Int32,
    `key8` Int32,
    `key9` Int32,
    `key10` Int32,
    `key11` Int32,
    `key12` Int32,
    `key13` Int32,
    `key14` Int32,
    `key15` Int32,
    `skey` String,
    `count` SimpleAggregateFunction(sum, Float64),
    `min` SimpleAggregateFunction(min, Float64),
    `max` SimpleAggregateFunction(max, Float64),
    `sum` SimpleAggregateFunction(sum, Float64),
    `sumsquare` SimpleAggregateFunction(sum, Float64),
    `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
    `uniq_state` AggregateFunction(uniq, Int64),
    `min_host` AggregateFunction(argMin, Int32, Float32),
    `max_host` AggregateFunction(argMax, Int32, Float32)
) AS
SELECT
    metric,
    prekey,
    prekey_set,
    toStartOfInterval(time, toIntervalMinute(1)) AS time,
    key0,
    key1,
    key2,
    key3,
    key4,
    key5,
    key6,
    key7,
    key8,
    key9,
    key10,
    key11,
    key12,
    key13,
    key14,
    key15,
    skey,
    count,
    min,
    max,
    sum,
    sumsquare,
    percentiles,
    uniq_state,
    min_host,
    max_host
FROM statshouse_value_incoming_prekey3
WHERE (toDate(time) >= (today() - 3)) AND (toDate(time) <= (today() + 1)) AND (prekey_set > 0);


CREATE MATERIALIZED VIEW IF NOT EXISTS statshouse_value_1s_agg3 ON CLUSTER statlogs2 TO statshouse_value_1s
(
    `metric` Int32,
    `time` DateTime,
    `key0` Int32,
    `key1` Int32,
    `key2` Int32,
    `key3` Int32,
    `key4` Int32,
    `key5` Int32,
    `key6` Int32,
    `key7` Int32,
    `key8` Int32,
    `key9` Int32,
    `key10` Int32,
    `key11` Int32,
    `key12` Int32,
    `key13` Int32,
    `key14` Int32,
    `key15` Int32,
    `skey` String,
    `count` SimpleAggregateFunction(sum, Float64),
    `min` SimpleAggregateFunction(min, Float64),
    `max` SimpleAggregateFunction(max, Float64),
    `sum` SimpleAggregateFunction(sum, Float64),
    `sumsquare` SimpleAggregateFunction(sum, Float64),
    `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
    `uniq_state` AggregateFunction(uniq, Int64),
    `min_host` AggregateFunction(argMin, Int32, Float32),
    `max_host` AggregateFunction(argMax, Int32, Float32)
) AS
SELECT
    metric,
    time,
    key0,
    key1,
    key2,
    key3,
    key4,
    key5,
    key6,
    key7,
    key8,
    key9,
    key10,
    key11,
    key12,
    key13,
    key14,
    key15,
    skey,
    count,
    min,
    max,
    sum,
    sumsquare,
    percentiles,
    uniq_state,
    min_host,
    max_host
FROM statshouse_value_incoming_prekey3
WHERE (toDate(time) >= (today() - 3)) AND (toDate(time) <= (today() + 1)) AND (prekey_set <> 2);


CREATE MATERIALIZED VIEW IF NOT EXISTS statshouse_value_1s_agg_prekey3 ON CLUSTER statlogs2 TO statshouse_value_1s_prekey
(
    `metric` Int32,
    `prekey` Int32,
    `prekey_set` UInt8,
    `time` DateTime,
    `key0` Int32,
    `key1` Int32,
    `key2` Int32,
    `key3` Int32,
    `key4` Int32,
    `key5` Int32,
    `key6` Int32,
    `key7` Int32,
    `key8` Int32,
    `key9` Int32,
    `key10` Int32,
    `key11` Int32,
    `key12` Int32,
    `key13` Int32,
    `key14` Int32,
    `key15` Int32,
    `skey` String,
    `count` SimpleAggregateFunction(sum, Float64),
    `min` SimpleAggregateFunction(min, Float64),
    `max` SimpleAggregateFunction(max, Float64),
    `sum` SimpleAggregateFunction(sum, Float64),
    `sumsquare` SimpleAggregateFunction(sum, Float64),
    `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
    `uniq_state` AggregateFunction(uniq, Int64),
    `min_host` AggregateFunction(argMin, Int32, Float32),
    `max_host` AggregateFunction(argMax, Int32, Float32)
) AS
SELECT
    metric,
    prekey,
    prekey_set,
    time,
    key0,
    key1,
    key2,
    key3,
    key4,
    key5,
    key6,
    key7,
    key8,
    key9,
    key10,
    key11,
    key12,
    key13,
    key14,
    key15,
    skey,
    count,
    min,
    max,
    sum,
    sumsquare,
    percentiles,
    uniq_state,
    min_host,
    max_host
FROM statshouse_value_incoming_prekey3
WHERE (toDate(time) >= (today() - 3)) AND (toDate(time) <= (today() + 1)) AND (prekey_set > 0);
