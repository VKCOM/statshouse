CREATE TABLE IF NOT EXISTS statshouse_value_incoming_v2_test
(
    `metric` Int32,
    `prekey` Int32,
    `time` DateTime,
    `key0` Int32,
    `key1` Int32,
    `key2` Int32,
    `key3` Int32,
    `key4` Int32,
    `key5` Int32,
    `key6` Int32,
    `key7` Int32,
    `key8` Int32,
    `key9` Int32,
    `key10` Int32,
    `key11` Int32,
    `key12` Int32,
    `key13` Int32,
    `key14` Int32,
    `key15` Int32,
    `key16` Int32,
    `key17` Int32,
    `key18` Int32,
    `key19` Int32,
    `key20` Int32,
    `key21` Int32,
    `key22` Int32,
    `key23` Int32,
    `key24` Int32,
    `key25` Int32,
    `key26` Int32,
    `key27` Int32,
    `key28` Int32,
    `key29` Int32,
    `key30` Int32,
    `key31` Int32,
    `raw_key0` Int64,
    `raw_key1` Int64,
    `raw_key2` Int64,
    `raw_key3` Int64,
    `skey` String,
    `count` SimpleAggregateFunction(sum, Float64),
    `min` SimpleAggregateFunction(min, Float64),
    `max` SimpleAggregateFunction(max, Float64),
    `sum` SimpleAggregateFunction(sum, Float64),
    `sumsquare` SimpleAggregateFunction(sum, Float64),
    `min_host` AggregateFunction(argMin, Int32, Float32),
    `max_host` AggregateFunction(argMax, Int32, Float32),
    `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
    `uniq_state` AggregateFunction(uniq, Int64)
)
ENGINE = Null;

CREATE TABLE IF NOT EXISTS statshouse_value_1h_v2_test
(`metric` Int32,
 `prekey` Int32, -- or Int64, SpareKey
 `time` DateTime,
 `key0` Int32,
 `key1` Int32,
 `key2` Int32,
 `key3` Int32,
 `key4` Int32,
 `key5` Int32,
 `key6` Int32,
 `key7` Int32,
 `key8` Int32,
 `key9` Int32,
 `key10` Int32,
 `key11` Int32,
 `key12` Int32,
 `key13` Int32,
 `key14` Int32,
 `key15` Int32,
 `key16` Int32,
 `key17` Int32,
 `key18` Int32,
 `key19` Int32,
 `key20` Int32,
 `key21` Int32,
 `key22` Int32,
 `key23` Int32,
 `key24` Int32,
 `key25` Int32,
 `key26` Int32,
 `key27` Int32,
 `key28` Int32,
 `key29` Int32,
 `key30` Int32,
 `key31` Int32,
 `raw_key0` Int64,
 `raw_key1` Int64,
 `raw_key2` Int64, -- можно использовать ключи не только как raw но и для отедльных ключей. Такиъх ключей может быть больше. Их можно переиспользовать
 `raw_key3` Int64, -- TODO add more key
 `skey` String,
 `count` SimpleAggregateFunction(sum, Float64),
 `min` SimpleAggregateFunction(min, Float64), -- можно убрать и оставить min_host
 `max` SimpleAggregateFunction(max, Float64), -- можно убрать и оставить max_host
 `sum` SimpleAggregateFunction(sum, Float64),
 `sumsquare` SimpleAggregateFunction(sum, Float64),
 `percentiles` AggregateFunction(quantilesTDigest(0.5), Float32),
 `uniq_state` AggregateFunction(uniq, Int64),
 `min_host` AggregateFunction(argMin, Int32, Float32),
 `max_host` AggregateFunction(argMax, Int32, Float32)) -- сделать max_tags -
    ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/tables/{shard}/{table}', '{replica}')
    PARTITION BY toYYYYMM(time)
    ORDER BY (metric, prekey, time, key0, key1, key2, key3, key4, key5, key6, key7, key8, key9, key10, key11, key12, key13, key14, key15, key16, key17, key18, key19, key20, key21, key22, key23, key24, key25, key26, key27, key28, key29, key30, key31, raw_key0, raw_key1, raw_key2, raw_key3, skey)
    TTL time + toIntervalDay(4) TO DISK 'default'
    SETTINGS storage_policy = 'ssd_then_hdd', index_granularity = 8192, ttl_only_drop_parts = 1;
