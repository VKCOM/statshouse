// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	"math"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	format "github.com/vkcom/statshouse/internal/format"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi(in *jlexer.Lexer, out *queryTableRow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]float64, 0, 8)
					} else {
						out.Data = []float64{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 float64
					v1 = float64(in.Float64())
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]SeriesMetaTag)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 SeriesMetaTag
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi1(in, &v2)
					(out.Tags)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi(out *jwriter.Writer, in queryTableRow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Data {
				if v3 > 0 {
					out.RawByte(',')
				}
				if math.IsNaN(float64(v4)) {
					out.RawString("null")
				} else {
					out.Float64(float64(v4))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Tags {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi1(out, v5Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v queryTableRow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *queryTableRow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi1(in *jlexer.Lexer, out *SeriesMetaTag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "raw":
			out.Raw = bool(in.Bool())
		case "raw_kind":
			out.RawKind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi1(out *jwriter.Writer, in SeriesMetaTag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	if in.Comment != "" {
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	if in.Raw {
		const prefix string = ",\"raw\":"
		out.RawString(prefix)
		out.Bool(bool(in.Raw))
	}
	if in.RawKind != "" {
		const prefix string = ",\"raw_kind\":"
		out.RawString(prefix)
		out.String(string(in.RawKind))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi2(in *jlexer.Lexer, out *SeriesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "series":
			easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi3(in, &out.Series)
		case "receive_errors_legacy":
			out.ReceiveErrorsLegacy = float64(in.Float64())
		case "sampling_factor_src":
			out.SamplingFactorSrc = float64(in.Float64())
		case "sampling_factor_agg":
			out.SamplingFactorAgg = float64(in.Float64())
		case "mapping_flood_events_legacy":
			out.MappingFloodEventsLegacy = float64(in.Float64())
		case "receive_errors":
			out.ReceiveErrors = float64(in.Float64())
		case "receive_warnings":
			out.ReceiveWarnings = float64(in.Float64())
		case "mapping_errors":
			out.MappingErrors = float64(in.Float64())
		case "promql":
			out.PromQL = string(in.String())
		case "__debug_queries":
			if in.IsNull() {
				in.Skip()
				out.DebugQueries = nil
			} else {
				in.Delim('[')
				if out.DebugQueries == nil {
					if !in.IsDelim(']') {
						out.DebugQueries = make([]string, 0, 4)
					} else {
						out.DebugQueries = []string{}
					}
				} else {
					out.DebugQueries = (out.DebugQueries)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.DebugQueries = append(out.DebugQueries, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "promqltestfailed":
			out.DebugPromQLTestFailed = bool(in.Bool())
		case "excess_point_left":
			out.ExcessPointLeft = bool(in.Bool())
		case "excess_point_right":
			out.ExcessPointRight = bool(in.Bool())
		case "metric":
			if in.IsNull() {
				in.Skip()
				out.MetricMeta = nil
			} else {
				if out.MetricMeta == nil {
					out.MetricMeta = new(format.MetricMetaValue)
				}
				easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat(in, out.MetricMeta)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi2(out *jwriter.Writer, in SeriesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"series\":"
		out.RawString(prefix[1:])
		easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi3(out, in.Series)
	}
	{
		const prefix string = ",\"receive_errors_legacy\":"
		out.RawString(prefix)
		out.Float64(float64(in.ReceiveErrorsLegacy))
	}
	{
		const prefix string = ",\"sampling_factor_src\":"
		out.RawString(prefix)
		out.Float64(float64(in.SamplingFactorSrc))
	}
	{
		const prefix string = ",\"sampling_factor_agg\":"
		out.RawString(prefix)
		out.Float64(float64(in.SamplingFactorAgg))
	}
	{
		const prefix string = ",\"mapping_flood_events_legacy\":"
		out.RawString(prefix)
		out.Float64(float64(in.MappingFloodEventsLegacy))
	}
	{
		const prefix string = ",\"receive_errors\":"
		out.RawString(prefix)
		out.Float64(float64(in.ReceiveErrors))
	}
	{
		const prefix string = ",\"receive_warnings\":"
		out.RawString(prefix)
		out.Float64(float64(in.ReceiveWarnings))
	}
	{
		const prefix string = ",\"mapping_errors\":"
		out.RawString(prefix)
		out.Float64(float64(in.MappingErrors))
	}
	{
		const prefix string = ",\"promql\":"
		out.RawString(prefix)
		out.String(string(in.PromQL))
	}
	{
		const prefix string = ",\"__debug_queries\":"
		out.RawString(prefix)
		if in.DebugQueries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.DebugQueries {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"promqltestfailed\":"
		out.RawString(prefix)
		out.Bool(bool(in.DebugPromQLTestFailed))
	}
	{
		const prefix string = ",\"excess_point_left\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExcessPointLeft))
	}
	{
		const prefix string = ",\"excess_point_right\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExcessPointRight))
	}
	{
		const prefix string = ",\"metric\":"
		out.RawString(prefix)
		if in.MetricMeta == nil {
			out.RawString("null")
		} else {
			easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat(out, *in.MetricMeta)
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SeriesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SeriesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi2(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat(in *jlexer.Lexer, out *format.MetricMetaValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metric_id":
			out.MetricID = int32(in.Int32())
		case "namespace_id":
			out.NamespaceID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "update_time":
			out.UpdateTime = uint32(in.Uint32())
		case "description":
			out.Description = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]format.MetricMetaTag, 0, 0)
					} else {
						out.Tags = []format.MetricMetaTag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v9 format.MetricMetaTag
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat1(in, &v9)
					out.Tags = append(out.Tags, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "long_tags":
			if in.IsNull() {
				in.Skip()
				out.LongTags = nil
			} else {
				in.Delim('[')
				if out.LongTags == nil {
					if !in.IsDelim(']') {
						out.LongTags = make([]format.MetricMetaTag, 0, 0)
					} else {
						out.LongTags = []format.MetricMetaTag{}
					}
				} else {
					out.LongTags = (out.LongTags)[:0]
				}
				for !in.IsDelim(']') {
					var v10 format.MetricMetaTag
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat1(in, &v10)
					out.LongTags = append(out.LongTags, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "visible":
			out.Visible = bool(in.Bool())
		case "kind":
			out.Kind = string(in.String())
		case "weight":
			out.Weight = float64(in.Float64())
		case "resolution":
			out.Resolution = int(in.Int())
		case "string_top_name":
			out.StringTopName = string(in.String())
		case "string_top_description":
			out.StringTopDescription = string(in.String())
		case "pre_key_tag_id":
			out.PreKeyTagID = string(in.String())
		case "pre_key_from":
			out.PreKeyFrom = uint32(in.Uint32())
		case "skip_max_host":
			out.SkipMaxHost = bool(in.Bool())
		case "skip_min_host":
			out.SkipMinHost = bool(in.Bool())
		case "skip_sum_square":
			out.SkipSumSquare = bool(in.Bool())
		case "pre_key_only":
			out.PreKeyOnly = bool(in.Bool())
		case "metric_type":
			out.MetricType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat(out *jwriter.Writer, in format.MetricMetaValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metric_id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.MetricID))
	}
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.NamespaceID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UpdateTime))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.Tags {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat1(out, v12)
			}
			out.RawByte(']')
		}
	}
	if len(in.LongTags) != 0 {
		const prefix string = ",\"long_tags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v13, v14 := range in.LongTags {
				if v13 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat1(out, v14)
			}
			out.RawByte(']')
		}
	}
	if in.Visible {
		const prefix string = ",\"visible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Visible))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.Weight))
	}
	if in.Resolution != 0 {
		const prefix string = ",\"resolution\":"
		out.RawString(prefix)
		out.Int(int(in.Resolution))
	}
	if in.StringTopName != "" {
		const prefix string = ",\"string_top_name\":"
		out.RawString(prefix)
		out.String(string(in.StringTopName))
	}
	if in.StringTopDescription != "" {
		const prefix string = ",\"string_top_description\":"
		out.RawString(prefix)
		out.String(string(in.StringTopDescription))
	}
	if in.PreKeyTagID != "" {
		const prefix string = ",\"pre_key_tag_id\":"
		out.RawString(prefix)
		out.String(string(in.PreKeyTagID))
	}
	if in.PreKeyFrom != 0 {
		const prefix string = ",\"pre_key_from\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.PreKeyFrom))
	}
	if in.SkipMaxHost {
		const prefix string = ",\"skip_max_host\":"
		out.RawString(prefix)
		out.Bool(bool(in.SkipMaxHost))
	}
	if in.SkipMinHost {
		const prefix string = ",\"skip_min_host\":"
		out.RawString(prefix)
		out.Bool(bool(in.SkipMinHost))
	}
	if in.SkipSumSquare {
		const prefix string = ",\"skip_sum_square\":"
		out.RawString(prefix)
		out.Bool(bool(in.SkipSumSquare))
	}
	if in.PreKeyOnly {
		const prefix string = ",\"pre_key_only\":"
		out.RawString(prefix)
		out.Bool(bool(in.PreKeyOnly))
	}
	{
		const prefix string = ",\"metric_type\":"
		out.RawString(prefix)
		out.String(string(in.MetricType))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat1(in *jlexer.Lexer, out *format.MetricMetaTag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "raw":
			out.Raw = bool(in.Bool())
		case "raw_kind":
			out.RawKind = string(in.String())
		case "id2value":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ID2Value = make(map[int32]string)
				} else {
					out.ID2Value = nil
				}
				for !in.IsDelim('}') {
					key := int32(in.Int32Str())
					in.WantColon()
					var v15 string
					v15 = string(in.String())
					(out.ID2Value)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		case "value_comments":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ValueComments = make(map[string]string)
				} else {
					out.ValueComments = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 string
					v16 = string(in.String())
					(out.ValueComments)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat1(out *jwriter.Writer, in format.MetricMetaTag) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Raw {
		const prefix string = ",\"raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Raw))
	}
	if in.RawKind != "" {
		const prefix string = ",\"raw_kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawKind))
	}
	if len(in.ID2Value) != 0 {
		const prefix string = ",\"id2value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.ID2Value {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.Int32Str(int32(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.ValueComments) != 0 {
		const prefix string = ",\"value_comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.ValueComments {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				out.String(string(v18Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi3(in *jlexer.Lexer, out *querySeries) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if in.IsNull() {
				in.Skip()
				out.Time = nil
			} else {
				in.Delim('[')
				if out.Time == nil {
					if !in.IsDelim(']') {
						out.Time = make([]int64, 0, 8)
					} else {
						out.Time = []int64{}
					}
				} else {
					out.Time = (out.Time)[:0]
				}
				for !in.IsDelim(']') {
					var v19 int64
					v19 = int64(in.Int64())
					out.Time = append(out.Time, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "series_meta":
			if in.IsNull() {
				in.Skip()
				out.SeriesMeta = nil
			} else {
				in.Delim('[')
				if out.SeriesMeta == nil {
					if !in.IsDelim(']') {
						out.SeriesMeta = make([]QuerySeriesMetaV2, 0, 0)
					} else {
						out.SeriesMeta = []QuerySeriesMetaV2{}
					}
				} else {
					out.SeriesMeta = (out.SeriesMeta)[:0]
				}
				for !in.IsDelim(']') {
					var v20 QuerySeriesMetaV2
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi4(in, &v20)
					out.SeriesMeta = append(out.SeriesMeta, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "series_data":
			if in.IsNull() {
				in.Skip()
				out.SeriesData = nil
			} else {
				in.Delim('[')
				if out.SeriesData == nil {
					if !in.IsDelim(']') {
						out.SeriesData = make([]*[]float64, 0, 8)
					} else {
						out.SeriesData = []*[]float64{}
					}
				} else {
					out.SeriesData = (out.SeriesData)[:0]
				}
				for !in.IsDelim(']') {
					var v21 *[]float64
					if in.IsNull() {
						in.Skip()
						v21 = nil
					} else {
						if v21 == nil {
							v21 = new([]float64)
						}
						if in.IsNull() {
							in.Skip()
							*v21 = nil
						} else {
							in.Delim('[')
							if *v21 == nil {
								if !in.IsDelim(']') {
									*v21 = make([]float64, 0, 8)
								} else {
									*v21 = []float64{}
								}
							} else {
								*v21 = (*v21)[:0]
							}
							for !in.IsDelim(']') {
								var v22 float64
								v22 = float64(in.Float64())
								*v21 = append(*v21, v22)
								in.WantComma()
							}
							in.Delim(']')
						}
					}
					out.SeriesData = append(out.SeriesData, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi3(out *jwriter.Writer, in querySeries) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		if in.Time == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Time {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"series_meta\":"
		out.RawString(prefix)
		if in.SeriesMeta == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.SeriesMeta {
				if v25 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi4(out, v26)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"series_data\":"
		out.RawString(prefix)
		if in.SeriesData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.SeriesData {
				if v27 > 0 {
					out.RawByte(',')
				}
				if v28 == nil {
					out.RawString("null")
				} else {
					if *v28 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
						out.RawString("null")
					} else {
						out.RawByte('[')
						for v29, v30 := range *v28 {
							if v29 > 0 {
								out.RawByte(',')
							}
							if math.IsNaN(float64(v30)) {
								out.RawString("null")
							} else {
								out.Float64(float64(v30))
							}
						}
						out.RawByte(']')
					}
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi4(in *jlexer.Lexer, out *QuerySeriesMetaV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_shift":
			out.TimeShift = int64(in.Int64())
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]SeriesMetaTag)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v31 SeriesMetaTag
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi1(in, &v31)
					(out.Tags)[key] = v31
					in.WantComma()
				}
				in.Delim('}')
			}
		case "max_hosts":
			if in.IsNull() {
				in.Skip()
				out.MaxHosts = nil
			} else {
				in.Delim('[')
				if out.MaxHosts == nil {
					if !in.IsDelim(']') {
						out.MaxHosts = make([]string, 0, 4)
					} else {
						out.MaxHosts = []string{}
					}
				} else {
					out.MaxHosts = (out.MaxHosts)[:0]
				}
				for !in.IsDelim(']') {
					var v32 string
					v32 = string(in.String())
					out.MaxHosts = append(out.MaxHosts, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "what":
			(out.What).UnmarshalEasyJSON(in)
		case "total":
			out.Total = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi4(out *jwriter.Writer, in QuerySeriesMetaV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_shift\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TimeShift))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v33First := true
			for v33Name, v33Value := range in.Tags {
				if v33First {
					v33First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v33Name))
				out.RawByte(':')
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi1(out, v33Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"max_hosts\":"
		out.RawString(prefix)
		if in.MaxHosts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.MaxHosts {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"what\":"
		out.RawString(prefix)
		(in.What).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int(int(in.Total))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi5(in *jlexer.Lexer, out *NamespaceInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "namespace":
			easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat2(in, &out.Namespace)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi5(out *jwriter.Writer, in NamespaceInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"namespace\":"
		out.RawString(prefix[1:])
		easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat2(out, in.Namespace)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamespaceInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamespaceInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi5(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat2(in *jlexer.Lexer, out *format.NamespaceMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "namespace_id":
			out.ID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "update_time":
			out.UpdateTime = uint32(in.Uint32())
		case "delete_time":
			out.DeleteTime = uint32(in.Uint32())
		case "weight":
			out.Weight = float64(in.Float64())
		case "visible":
			out.Visible = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat2(out *jwriter.Writer, in format.NamespaceMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UpdateTime))
	}
	{
		const prefix string = ",\"delete_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.DeleteTime))
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.Weight))
	}
	{
		const prefix string = ",\"visible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Visible))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi6(in *jlexer.Lexer, out *MetricsGroupInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat3(in, &out.Group)
		case "metrics":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				in.Delim('[')
				if out.Metrics == nil {
					if !in.IsDelim(']') {
						out.Metrics = make([]string, 0, 4)
					} else {
						out.Metrics = []string{}
					}
				} else {
					out.Metrics = (out.Metrics)[:0]
				}
				for !in.IsDelim(']') {
					var v36 string
					v36 = string(in.String())
					out.Metrics = append(out.Metrics, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi6(out *jwriter.Writer, in MetricsGroupInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix[1:])
		easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat3(out, in.Group)
	}
	{
		const prefix string = ",\"metrics\":"
		out.RawString(prefix)
		if in.Metrics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Metrics {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.String(string(v38))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricsGroupInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricsGroupInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi6(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat3(in *jlexer.Lexer, out *format.MetricsGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group_id":
			out.ID = int32(in.Int32())
		case "namespace_id":
			out.NamespaceID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "update_time":
			out.UpdateTime = uint32(in.Uint32())
		case "weight":
			out.Weight = float64(in.Float64())
		case "visible":
			out.Visible = bool(in.Bool())
		case "is_weight_effective":
			out.IsWeightEffective = bool(in.Bool())
		case "protected":
			out.Protected = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat3(out *jwriter.Writer, in format.MetricsGroup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group_id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.NamespaceID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UpdateTime))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.Weight))
	}
	if in.Visible {
		const prefix string = ",\"visible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Visible))
	}
	if in.IsWeightEffective {
		const prefix string = ",\"is_weight_effective\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsWeightEffective))
	}
	if in.Protected {
		const prefix string = ",\"protected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protected))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi7(in *jlexer.Lexer, out *MetricInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metric":
			easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat(in, &out.Metric)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi7(out *jwriter.Writer, in MetricInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metric\":"
		out.RawString(prefix[1:])
		easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat(out, in.Metric)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi7(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi8(in *jlexer.Lexer, out *GetTableResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rows":
			if in.IsNull() {
				in.Skip()
				out.Rows = nil
			} else {
				in.Delim('[')
				if out.Rows == nil {
					if !in.IsDelim(']') {
						out.Rows = make([]queryTableRow, 0, 0)
					} else {
						out.Rows = []queryTableRow{}
					}
				} else {
					out.Rows = (out.Rows)[:0]
				}
				for !in.IsDelim(']') {
					var v39 queryTableRow
					(v39).UnmarshalEasyJSON(in)
					out.Rows = append(out.Rows, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "what":
			if in.IsNull() {
				in.Skip()
				out.What = nil
			} else {
				in.Delim('[')
				if out.What == nil {
					if !in.IsDelim(']') {
						out.What = make([]queryFn, 0, 8)
					} else {
						out.What = []queryFn{}
					}
				} else {
					out.What = (out.What)[:0]
				}
				for !in.IsDelim(']') {
					var v40 queryFn
					(v40).UnmarshalEasyJSON(in)
					out.What = append(out.What, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "from_row":
			out.FromRow = string(in.String())
		case "to_row":
			out.ToRow = string(in.String())
		case "more":
			out.More = bool(in.Bool())
		case "__debug_queries":
			if in.IsNull() {
				in.Skip()
				out.DebugQueries = nil
			} else {
				in.Delim('[')
				if out.DebugQueries == nil {
					if !in.IsDelim(']') {
						out.DebugQueries = make([]string, 0, 4)
					} else {
						out.DebugQueries = []string{}
					}
				} else {
					out.DebugQueries = (out.DebugQueries)[:0]
				}
				for !in.IsDelim(']') {
					var v41 string
					v41 = string(in.String())
					out.DebugQueries = append(out.DebugQueries, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi8(out *jwriter.Writer, in GetTableResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rows\":"
		out.RawString(prefix[1:])
		if in.Rows == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Rows {
				if v42 > 0 {
					out.RawByte(',')
				}
				(v43).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"what\":"
		out.RawString(prefix)
		if in.What == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.What {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"from_row\":"
		out.RawString(prefix)
		out.String(string(in.FromRow))
	}
	{
		const prefix string = ",\"to_row\":"
		out.RawString(prefix)
		out.String(string(in.ToRow))
	}
	{
		const prefix string = ",\"more\":"
		out.RawString(prefix)
		out.Bool(bool(in.More))
	}
	{
		const prefix string = ",\"__debug_queries\":"
		out.RawString(prefix)
		if in.DebugQueries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v46, v47 := range in.DebugQueries {
				if v46 > 0 {
					out.RawByte(',')
				}
				out.String(string(v47))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetTableResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetTableResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi8(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi9(in *jlexer.Lexer, out *GetPointResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "point_meta":
			if in.IsNull() {
				in.Skip()
				out.PointMeta = nil
			} else {
				in.Delim('[')
				if out.PointMeta == nil {
					if !in.IsDelim(']') {
						out.PointMeta = make([]QueryPointsMeta, 0, 0)
					} else {
						out.PointMeta = []QueryPointsMeta{}
					}
				} else {
					out.PointMeta = (out.PointMeta)[:0]
				}
				for !in.IsDelim(']') {
					var v48 QueryPointsMeta
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi10(in, &v48)
					out.PointMeta = append(out.PointMeta, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "point_data":
			if in.IsNull() {
				in.Skip()
				out.PointData = nil
			} else {
				in.Delim('[')
				if out.PointData == nil {
					if !in.IsDelim(']') {
						out.PointData = make([]float64, 0, 8)
					} else {
						out.PointData = []float64{}
					}
				} else {
					out.PointData = (out.PointData)[:0]
				}
				for !in.IsDelim(']') {
					var v49 float64
					v49 = float64(in.Float64())
					out.PointData = append(out.PointData, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "__debug_queries":
			if in.IsNull() {
				in.Skip()
				out.DebugQueries = nil
			} else {
				in.Delim('[')
				if out.DebugQueries == nil {
					if !in.IsDelim(']') {
						out.DebugQueries = make([]string, 0, 4)
					} else {
						out.DebugQueries = []string{}
					}
				} else {
					out.DebugQueries = (out.DebugQueries)[:0]
				}
				for !in.IsDelim(']') {
					var v50 string
					v50 = string(in.String())
					out.DebugQueries = append(out.DebugQueries, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi9(out *jwriter.Writer, in GetPointResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"point_meta\":"
		out.RawString(prefix[1:])
		if in.PointMeta == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.PointMeta {
				if v51 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi10(out, v52)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"point_data\":"
		out.RawString(prefix)
		if in.PointData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.PointData {
				if v53 > 0 {
					out.RawByte(',')
				}
				if math.IsNaN(float64(v54)) {
					out.RawString("null")
				} else {
					out.Float64(float64(v54))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"__debug_queries\":"
		out.RawString(prefix)
		if in.DebugQueries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.DebugQueries {
				if v55 > 0 {
					out.RawByte(',')
				}
				out.String(string(v56))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPointResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi9(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPointResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi9(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi10(in *jlexer.Lexer, out *QueryPointsMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_shift":
			out.TimeShift = int64(in.Int64())
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]SeriesMetaTag)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v57 SeriesMetaTag
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi1(in, &v57)
					(out.Tags)[key] = v57
					in.WantComma()
				}
				in.Delim('}')
			}
		case "max_host":
			out.MaxHost = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "what":
			(out.What).UnmarshalEasyJSON(in)
		case "from_sec":
			out.FromSec = int64(in.Int64())
		case "to_sec":
			out.ToSec = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi10(out *jwriter.Writer, in QueryPointsMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_shift\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TimeShift))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v58First := true
			for v58Name, v58Value := range in.Tags {
				if v58First {
					v58First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v58Name))
				out.RawByte(':')
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi1(out, v58Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"max_host\":"
		out.RawString(prefix)
		out.String(string(in.MaxHost))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"what\":"
		out.RawString(prefix)
		(in.What).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"from_sec\":"
		out.RawString(prefix)
		out.Int64(int64(in.FromSec))
	}
	{
		const prefix string = ",\"to_sec\":"
		out.RawString(prefix)
		out.Int64(int64(in.ToSec))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi11(in *jlexer.Lexer, out *GetNamespaceListResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "namespaces":
			if in.IsNull() {
				in.Skip()
				out.Namespaces = nil
			} else {
				in.Delim('[')
				if out.Namespaces == nil {
					if !in.IsDelim(']') {
						out.Namespaces = make([]namespaceShortInfo, 0, 2)
					} else {
						out.Namespaces = []namespaceShortInfo{}
					}
				} else {
					out.Namespaces = (out.Namespaces)[:0]
				}
				for !in.IsDelim(']') {
					var v59 namespaceShortInfo
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi12(in, &v59)
					out.Namespaces = append(out.Namespaces, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi11(out *jwriter.Writer, in GetNamespaceListResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"namespaces\":"
		out.RawString(prefix[1:])
		if in.Namespaces == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v60, v61 := range in.Namespaces {
				if v60 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi12(out, v61)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetNamespaceListResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi11(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetNamespaceListResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi11(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi12(in *jlexer.Lexer, out *namespaceShortInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "weight":
			out.Weight = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi12(out *jwriter.Writer, in namespaceShortInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.Weight))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi13(in *jlexer.Lexer, out *GetMetricsListResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metrics":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				in.Delim('[')
				if out.Metrics == nil {
					if !in.IsDelim(']') {
						out.Metrics = make([]metricShortInfo, 0, 4)
					} else {
						out.Metrics = []metricShortInfo{}
					}
				} else {
					out.Metrics = (out.Metrics)[:0]
				}
				for !in.IsDelim(']') {
					var v62 metricShortInfo
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi14(in, &v62)
					out.Metrics = append(out.Metrics, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi13(out *jwriter.Writer, in GetMetricsListResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metrics\":"
		out.RawString(prefix[1:])
		if in.Metrics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v63, v64 := range in.Metrics {
				if v63 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi14(out, v64)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMetricsListResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi13(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMetricsListResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi13(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi14(in *jlexer.Lexer, out *metricShortInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi14(out *jwriter.Writer, in metricShortInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi15(in *jlexer.Lexer, out *GetMetricTagValuesResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tag_values":
			if in.IsNull() {
				in.Skip()
				out.TagValues = nil
			} else {
				in.Delim('[')
				if out.TagValues == nil {
					if !in.IsDelim(']') {
						out.TagValues = make([]MetricTagValueInfo, 0, 2)
					} else {
						out.TagValues = []MetricTagValueInfo{}
					}
				} else {
					out.TagValues = (out.TagValues)[:0]
				}
				for !in.IsDelim(']') {
					var v65 MetricTagValueInfo
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi16(in, &v65)
					out.TagValues = append(out.TagValues, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tag_values_more":
			out.TagValuesMore = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi15(out *jwriter.Writer, in GetMetricTagValuesResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tag_values\":"
		out.RawString(prefix[1:])
		if in.TagValues == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v66, v67 := range in.TagValues {
				if v66 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi16(out, v67)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tag_values_more\":"
		out.RawString(prefix)
		out.Bool(bool(in.TagValuesMore))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMetricTagValuesResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi15(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMetricTagValuesResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi15(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi16(in *jlexer.Lexer, out *MetricTagValueInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "count":
			out.Count = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi16(out *jwriter.Writer, in MetricTagValueInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Float64(float64(in.Count))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi17(in *jlexer.Lexer, out *GetGroupListResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]groupShortInfo, 0, 2)
					} else {
						out.Groups = []groupShortInfo{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v68 groupShortInfo
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi18(in, &v68)
					out.Groups = append(out.Groups, v68)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi17(out *jwriter.Writer, in GetGroupListResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"groups\":"
		out.RawString(prefix[1:])
		if in.Groups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v69, v70 := range in.Groups {
				if v69 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi18(out, v70)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetGroupListResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi17(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetGroupListResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi17(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi18(in *jlexer.Lexer, out *groupShortInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "weight":
			out.Weight = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi18(out *jwriter.Writer, in groupShortInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.Weight))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi19(in *jlexer.Lexer, out *GetDashboardListResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dashboards":
			if in.IsNull() {
				in.Skip()
				out.Dashboards = nil
			} else {
				in.Delim('[')
				if out.Dashboards == nil {
					if !in.IsDelim(']') {
						out.Dashboards = make([]dashboardShortInfo, 0, 1)
					} else {
						out.Dashboards = []dashboardShortInfo{}
					}
				} else {
					out.Dashboards = (out.Dashboards)[:0]
				}
				for !in.IsDelim(']') {
					var v71 dashboardShortInfo
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi20(in, &v71)
					out.Dashboards = append(out.Dashboards, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi19(out *jwriter.Writer, in GetDashboardListResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dashboards\":"
		out.RawString(prefix[1:])
		if in.Dashboards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v72, v73 := range in.Dashboards {
				if v72 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi20(out, v73)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetDashboardListResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi19(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetDashboardListResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi19(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi20(in *jlexer.Lexer, out *dashboardShortInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi20(out *jwriter.Writer, in dashboardShortInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi21(in *jlexer.Lexer, out *DashboardInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dashboard":
			easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi22(in, &out.Dashboard)
		case "delete_mark":
			out.Delete = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi21(out *jwriter.Writer, in DashboardInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dashboard\":"
		out.RawString(prefix[1:])
		easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi22(out, in.Dashboard)
	}
	{
		const prefix string = ",\"delete_mark\":"
		out.RawString(prefix)
		out.Bool(bool(in.Delete))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DashboardInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi21(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DashboardInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi21(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi22(in *jlexer.Lexer, out *DashboardMetaInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dashboard_id":
			out.DashboardID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "update_time":
			out.UpdateTime = uint32(in.Uint32())
		case "deleted_time":
			out.DeletedTime = uint32(in.Uint32())
		case "description":
			out.Description = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.JSONData = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v74 interface{}
					if m, ok := v74.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v74.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v74 = in.Interface()
					}
					(out.JSONData)[key] = v74
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi22(out *jwriter.Writer, in DashboardMetaInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dashboard_id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.DashboardID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UpdateTime))
	}
	{
		const prefix string = ",\"deleted_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.DeletedTime))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.JSONData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v75First := true
			for v75Name, v75Value := range in.JSONData {
				if v75First {
					v75First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v75Name))
				out.RawByte(':')
				if m, ok := v75Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v75Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v75Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi23(in *jlexer.Lexer, out *DashboardData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "plots":
			if in.IsNull() {
				in.Skip()
				out.Plots = nil
			} else {
				in.Delim('[')
				if out.Plots == nil {
					if !in.IsDelim(']') {
						out.Plots = make([]DashboardPlot, 0, 0)
					} else {
						out.Plots = []DashboardPlot{}
					}
				} else {
					out.Plots = (out.Plots)[:0]
				}
				for !in.IsDelim(']') {
					var v76 DashboardPlot
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi24(in, &v76)
					out.Plots = append(out.Plots, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "variables":
			if in.IsNull() {
				in.Skip()
				out.Vars = nil
			} else {
				in.Delim('[')
				if out.Vars == nil {
					if !in.IsDelim(']') {
						out.Vars = make([]DashboardVar, 0, 1)
					} else {
						out.Vars = []DashboardVar{}
					}
				} else {
					out.Vars = (out.Vars)[:0]
				}
				for !in.IsDelim(']') {
					var v77 DashboardVar
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi25(in, &v77)
					out.Vars = append(out.Vars, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tabNum":
			out.TabNum = int(in.Int())
		case "timeRange":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeRange).UnmarshalJSON(data))
			}
		case "timeShifts":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeShifts).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi23(out *jwriter.Writer, in DashboardData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"plots\":"
		out.RawString(prefix[1:])
		if in.Plots == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v78, v79 := range in.Plots {
				if v78 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi24(out, v79)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"variables\":"
		out.RawString(prefix)
		if in.Vars == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.Vars {
				if v80 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi25(out, v81)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tabNum\":"
		out.RawString(prefix)
		out.Int(int(in.TabNum))
	}
	{
		const prefix string = ",\"timeRange\":"
		out.RawString(prefix)
		easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi26(out, in.TimeRange)
	}
	{
		const prefix string = ",\"timeShifts\":"
		out.RawString(prefix)
		if in.TimeShifts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v82, v83 := range in.TimeShifts {
				if v82 > 0 {
					out.RawByte(',')
				}
				out.String(string(v83))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DashboardData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi23(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DashboardData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi23(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi26(in *jlexer.Lexer, out *DashboardTimeRange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "From":
			out.From = int64(in.Int64())
		case "To":
			out.To = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi26(out *jwriter.Writer, in DashboardTimeRange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"From\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.From))
	}
	{
		const prefix string = ",\"To\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi25(in *jlexer.Lexer, out *DashboardVar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "args":
			easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi27(in, &out.Args)
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Vals = nil
			} else {
				in.Delim('[')
				if out.Vals == nil {
					if !in.IsDelim(']') {
						out.Vals = make([]string, 0, 4)
					} else {
						out.Vals = []string{}
					}
				} else {
					out.Vals = (out.Vals)[:0]
				}
				for !in.IsDelim(']') {
					var v84 string
					v84 = string(in.String())
					out.Vals = append(out.Vals, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "link":
			if in.IsNull() {
				in.Skip()
				out.Link = nil
			} else {
				in.Delim('[')
				if out.Link == nil {
					if !in.IsDelim(']') {
						out.Link = make([][]int, 0, 2)
					} else {
						out.Link = [][]int{}
					}
				} else {
					out.Link = (out.Link)[:0]
				}
				for !in.IsDelim(']') {
					var v85 []int
					if in.IsNull() {
						in.Skip()
						v85 = nil
					} else {
						in.Delim('[')
						if v85 == nil {
							if !in.IsDelim(']') {
								v85 = make([]int, 0, 8)
							} else {
								v85 = []int{}
							}
						} else {
							v85 = (v85)[:0]
						}
						for !in.IsDelim(']') {
							var v86 int
							v86 = int(in.Int())
							v85 = append(v85, v86)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Link = append(out.Link, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi25(out *jwriter.Writer, in DashboardVar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix[1:])
		easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi27(out, in.Args)
	}
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		if in.Vals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v87, v88 := range in.Vals {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.String(string(v88))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		if in.Link == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.Link {
				if v89 > 0 {
					out.RawByte(',')
				}
				if v90 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v91, v92 := range v90 {
						if v91 > 0 {
							out.RawByte(',')
						}
						out.Int(int(v92))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi27(in *jlexer.Lexer, out *DashboardVarArgs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groupBy":
			out.Group = bool(in.Bool())
		case "negative":
			out.Negate = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi27(out *jwriter.Writer, in DashboardVarArgs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"groupBy\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Group))
	}
	{
		const prefix string = ",\"negative\":"
		out.RawString(prefix)
		out.Bool(bool(in.Negate))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi24(in *jlexer.Lexer, out *DashboardPlot) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "useV2":
			out.UseV2 = bool(in.Bool())
		case "numSeries":
			out.NumSeries = int(in.Int())
		case "metricName":
			out.MetricName = string(in.String())
		case "customAgg":
			out.Width = int(in.Int())
		case "promQL":
			out.PromQL = string(in.String())
		case "what":
			if in.IsNull() {
				in.Skip()
				out.What = nil
			} else {
				in.Delim('[')
				if out.What == nil {
					if !in.IsDelim(']') {
						out.What = make([]string, 0, 4)
					} else {
						out.What = []string{}
					}
				} else {
					out.What = (out.What)[:0]
				}
				for !in.IsDelim(']') {
					var v93 string
					v93 = string(in.String())
					out.What = append(out.What, v93)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "groupBy":
			if in.IsNull() {
				in.Skip()
				out.GroupBy = nil
			} else {
				in.Delim('[')
				if out.GroupBy == nil {
					if !in.IsDelim(']') {
						out.GroupBy = make([]string, 0, 4)
					} else {
						out.GroupBy = []string{}
					}
				} else {
					out.GroupBy = (out.GroupBy)[:0]
				}
				for !in.IsDelim(']') {
					var v94 string
					v94 = string(in.String())
					out.GroupBy = append(out.GroupBy, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "filterIn":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.FilterIn = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v95 []string
					if in.IsNull() {
						in.Skip()
						v95 = nil
					} else {
						in.Delim('[')
						if v95 == nil {
							if !in.IsDelim(']') {
								v95 = make([]string, 0, 4)
							} else {
								v95 = []string{}
							}
						} else {
							v95 = (v95)[:0]
						}
						for !in.IsDelim(']') {
							var v96 string
							v96 = string(in.String())
							v95 = append(v95, v96)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.FilterIn)[key] = v95
					in.WantComma()
				}
				in.Delim('}')
			}
		case "filterNotIn":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.FilterNotIn = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v97 []string
					if in.IsNull() {
						in.Skip()
						v97 = nil
					} else {
						in.Delim('[')
						if v97 == nil {
							if !in.IsDelim(']') {
								v97 = make([]string, 0, 4)
							} else {
								v97 = []string{}
							}
						} else {
							v97 = (v97)[:0]
						}
						for !in.IsDelim(']') {
							var v98 string
							v98 = string(in.String())
							v97 = append(v97, v98)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.FilterNotIn)[key] = v97
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maxHost":
			out.MaxHost = bool(in.Bool())
		case "type":
			out.Type = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi24(out *jwriter.Writer, in DashboardPlot) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"useV2\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.UseV2))
	}
	{
		const prefix string = ",\"numSeries\":"
		out.RawString(prefix)
		out.Int(int(in.NumSeries))
	}
	{
		const prefix string = ",\"metricName\":"
		out.RawString(prefix)
		out.String(string(in.MetricName))
	}
	{
		const prefix string = ",\"customAgg\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"promQL\":"
		out.RawString(prefix)
		out.String(string(in.PromQL))
	}
	{
		const prefix string = ",\"what\":"
		out.RawString(prefix)
		if in.What == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v99, v100 := range in.What {
				if v99 > 0 {
					out.RawByte(',')
				}
				out.String(string(v100))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"groupBy\":"
		out.RawString(prefix)
		if in.GroupBy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v101, v102 := range in.GroupBy {
				if v101 > 0 {
					out.RawByte(',')
				}
				out.String(string(v102))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"filterIn\":"
		out.RawString(prefix)
		if in.FilterIn == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v103First := true
			for v103Name, v103Value := range in.FilterIn {
				if v103First {
					v103First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v103Name))
				out.RawByte(':')
				if v103Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v104, v105 := range v103Value {
						if v104 > 0 {
							out.RawByte(',')
						}
						out.String(string(v105))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"filterNotIn\":"
		out.RawString(prefix)
		if in.FilterNotIn == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v106First := true
			for v106Name, v106Value := range in.FilterNotIn {
				if v106First {
					v106First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v106Name))
				out.RawByte(':')
				if v106Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v107, v108 := range v106Value {
						if v107 > 0 {
							out.RawByte(',')
						}
						out.String(string(v108))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"maxHost\":"
		out.RawString(prefix)
		out.Bool(bool(in.MaxHost))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}
