// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	"math"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	format "github.com/vkcom/statshouse/internal/format"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi(in *jlexer.Lexer, out *SeriesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "series":
			easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi1(in, &out.Series)
		case "receive_errors_legacy":
			out.ReceiveErrorsLegacy = float64(in.Float64())
		case "sampling_factor_src":
			out.SamplingFactorSrc = float64(in.Float64())
		case "sampling_factor_agg":
			out.SamplingFactorAgg = float64(in.Float64())
		case "mapping_flood_events_legacy":
			out.MappingFloodEventsLegacy = float64(in.Float64())
		case "receive_errors":
			out.ReceiveErrors = float64(in.Float64())
		case "mapping_errors":
			out.MappingErrors = float64(in.Float64())
		case "promql":
			out.PromQL = string(in.String())
		case "__debug_queries":
			if in.IsNull() {
				in.Skip()
				out.DebugQueries = nil
			} else {
				in.Delim('[')
				if out.DebugQueries == nil {
					if !in.IsDelim(']') {
						out.DebugQueries = make([]string, 0, 4)
					} else {
						out.DebugQueries = []string{}
					}
				} else {
					out.DebugQueries = (out.DebugQueries)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.DebugQueries = append(out.DebugQueries, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "promqltestfailed":
			out.DebugPromQLTestFailed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi(out *jwriter.Writer, in SeriesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"series\":"
		out.RawString(prefix[1:])
		easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi1(out, in.Series)
	}
	{
		const prefix string = ",\"receive_errors_legacy\":"
		out.RawString(prefix)
		out.Float64(float64(in.ReceiveErrorsLegacy))
	}
	{
		const prefix string = ",\"sampling_factor_src\":"
		out.RawString(prefix)
		out.Float64(float64(in.SamplingFactorSrc))
	}
	{
		const prefix string = ",\"sampling_factor_agg\":"
		out.RawString(prefix)
		out.Float64(float64(in.SamplingFactorAgg))
	}
	{
		const prefix string = ",\"mapping_flood_events_legacy\":"
		out.RawString(prefix)
		out.Float64(float64(in.MappingFloodEventsLegacy))
	}
	{
		const prefix string = ",\"receive_errors\":"
		out.RawString(prefix)
		out.Float64(float64(in.ReceiveErrors))
	}
	{
		const prefix string = ",\"mapping_errors\":"
		out.RawString(prefix)
		out.Float64(float64(in.MappingErrors))
	}
	{
		const prefix string = ",\"promql\":"
		out.RawString(prefix)
		out.String(string(in.PromQL))
	}
	{
		const prefix string = ",\"__debug_queries\":"
		out.RawString(prefix)
		if in.DebugQueries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.DebugQueries {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"promqltestfailed\":"
		out.RawString(prefix)
		out.Bool(bool(in.DebugPromQLTestFailed))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SeriesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SeriesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi1(in *jlexer.Lexer, out *querySeries) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if in.IsNull() {
				in.Skip()
				out.Time = nil
			} else {
				in.Delim('[')
				if out.Time == nil {
					if !in.IsDelim(']') {
						out.Time = make([]int64, 0, 8)
					} else {
						out.Time = []int64{}
					}
				} else {
					out.Time = (out.Time)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int64
					v4 = int64(in.Int64())
					out.Time = append(out.Time, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "series_meta":
			if in.IsNull() {
				in.Skip()
				out.SeriesMeta = nil
			} else {
				in.Delim('[')
				if out.SeriesMeta == nil {
					if !in.IsDelim(']') {
						out.SeriesMeta = make([]QuerySeriesMetaV2, 0, 0)
					} else {
						out.SeriesMeta = []QuerySeriesMetaV2{}
					}
				} else {
					out.SeriesMeta = (out.SeriesMeta)[:0]
				}
				for !in.IsDelim(']') {
					var v5 QuerySeriesMetaV2
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi2(in, &v5)
					out.SeriesMeta = append(out.SeriesMeta, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "series_data":
			if in.IsNull() {
				in.Skip()
				out.SeriesData = nil
			} else {
				in.Delim('[')
				if out.SeriesData == nil {
					if !in.IsDelim(']') {
						out.SeriesData = make([]*[]float64, 0, 8)
					} else {
						out.SeriesData = []*[]float64{}
					}
				} else {
					out.SeriesData = (out.SeriesData)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *[]float64
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new([]float64)
						}
						if in.IsNull() {
							in.Skip()
							*v6 = nil
						} else {
							in.Delim('[')
							if *v6 == nil {
								if !in.IsDelim(']') {
									*v6 = make([]float64, 0, 8)
								} else {
									*v6 = []float64{}
								}
							} else {
								*v6 = (*v6)[:0]
							}
							for !in.IsDelim(']') {
								var v7 float64
								v7 = float64(in.Float64())
								*v6 = append(*v6, v7)
								in.WantComma()
							}
							in.Delim(']')
						}
					}
					out.SeriesData = append(out.SeriesData, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi1(out *jwriter.Writer, in querySeries) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		if in.Time == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Time {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"series_meta\":"
		out.RawString(prefix)
		if in.SeriesMeta == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.SeriesMeta {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi2(out, v11)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"series_data\":"
		out.RawString(prefix)
		if in.SeriesData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.SeriesData {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					if *v13 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
						out.RawString("null")
					} else {
						out.RawByte('[')
						for v14, v15 := range *v13 {
							if v14 > 0 {
								out.RawByte(',')
							}
							if math.IsNaN(float64(v15)) {
								out.RawString("null")
							} else {
								out.Float64(float64(v15))
							}
						}
						out.RawByte(']')
					}
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi2(in *jlexer.Lexer, out *QuerySeriesMetaV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_shift":
			out.TimeShift = int64(in.Int64())
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]SeriesMetaTag)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 SeriesMetaTag
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi3(in, &v16)
					(out.Tags)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "max_hosts":
			if in.IsNull() {
				in.Skip()
				out.MaxHosts = nil
			} else {
				in.Delim('[')
				if out.MaxHosts == nil {
					if !in.IsDelim(']') {
						out.MaxHosts = make([]string, 0, 4)
					} else {
						out.MaxHosts = []string{}
					}
				} else {
					out.MaxHosts = (out.MaxHosts)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.MaxHosts = append(out.MaxHosts, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "what":
			(out.What).UnmarshalEasyJSON(in)
		case "total":
			out.Total = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi2(out *jwriter.Writer, in QuerySeriesMetaV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_shift\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TimeShift))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Tags {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi3(out, v18Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"max_hosts\":"
		out.RawString(prefix)
		if in.MaxHosts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.MaxHosts {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"what\":"
		out.RawString(prefix)
		(in.What).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int(int(in.Total))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi3(in *jlexer.Lexer, out *SeriesMetaTag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "raw":
			out.Raw = bool(in.Bool())
		case "raw_kind":
			out.RawKind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi3(out *jwriter.Writer, in SeriesMetaTag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	if in.Comment != "" {
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	if in.Raw {
		const prefix string = ",\"raw\":"
		out.RawString(prefix)
		out.Bool(bool(in.Raw))
	}
	if in.RawKind != "" {
		const prefix string = ",\"raw_kind\":"
		out.RawString(prefix)
		out.String(string(in.RawKind))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi4(in *jlexer.Lexer, out *MetricsGroupInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group":
			easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat(in, &out.Group)
		case "metrics":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				in.Delim('[')
				if out.Metrics == nil {
					if !in.IsDelim(']') {
						out.Metrics = make([]string, 0, 4)
					} else {
						out.Metrics = []string{}
					}
				} else {
					out.Metrics = (out.Metrics)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.Metrics = append(out.Metrics, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi4(out *jwriter.Writer, in MetricsGroupInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group\":"
		out.RawString(prefix[1:])
		easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat(out, in.Group)
	}
	{
		const prefix string = ",\"metrics\":"
		out.RawString(prefix)
		if in.Metrics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Metrics {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.String(string(v23))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricsGroupInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricsGroupInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi4(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat(in *jlexer.Lexer, out *format.MetricsGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group_id":
			out.ID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "update_time":
			out.UpdateTime = uint32(in.Uint32())
		case "weight":
			out.Weight = float64(in.Float64())
		case "visible":
			out.Visible = bool(in.Bool())
		case "is_weight_effective":
			out.IsWeightEffective = bool(in.Bool())
		case "protected":
			out.Protected = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat(out *jwriter.Writer, in format.MetricsGroup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group_id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UpdateTime))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.Weight))
	}
	if in.Visible {
		const prefix string = ",\"visible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Visible))
	}
	if in.IsWeightEffective {
		const prefix string = ",\"is_weight_effective\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsWeightEffective))
	}
	if in.Protected {
		const prefix string = ",\"protected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protected))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi5(in *jlexer.Lexer, out *MetricInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metric":
			easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat1(in, &out.Metric)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi5(out *jwriter.Writer, in MetricInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metric\":"
		out.RawString(prefix[1:])
		easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat1(out, in.Metric)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi5(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat1(in *jlexer.Lexer, out *format.MetricMetaValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metric_id":
			out.MetricID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "update_time":
			out.UpdateTime = uint32(in.Uint32())
		case "description":
			out.Description = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]format.MetricMetaTag, 0, 0)
					} else {
						out.Tags = []format.MetricMetaTag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v24 format.MetricMetaTag
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat2(in, &v24)
					out.Tags = append(out.Tags, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "visible":
			out.Visible = bool(in.Bool())
		case "kind":
			out.Kind = string(in.String())
		case "weight":
			out.Weight = float64(in.Float64())
		case "resolution":
			out.Resolution = int(in.Int())
		case "string_top_name":
			out.StringTopName = string(in.String())
		case "string_top_description":
			out.StringTopDescription = string(in.String())
		case "pre_key_tag_id":
			out.PreKeyTagID = string(in.String())
		case "pre_key_from":
			out.PreKeyFrom = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat1(out *jwriter.Writer, in format.MetricMetaValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metric_id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.MetricID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UpdateTime))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v25, v26 := range in.Tags {
				if v25 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat2(out, v26)
			}
			out.RawByte(']')
		}
	}
	if in.Visible {
		const prefix string = ",\"visible\":"
		out.RawString(prefix)
		out.Bool(bool(in.Visible))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.Weight))
	}
	if in.Resolution != 0 {
		const prefix string = ",\"resolution\":"
		out.RawString(prefix)
		out.Int(int(in.Resolution))
	}
	if in.StringTopName != "" {
		const prefix string = ",\"string_top_name\":"
		out.RawString(prefix)
		out.String(string(in.StringTopName))
	}
	if in.StringTopDescription != "" {
		const prefix string = ",\"string_top_description\":"
		out.RawString(prefix)
		out.String(string(in.StringTopDescription))
	}
	if in.PreKeyTagID != "" {
		const prefix string = ",\"pre_key_tag_id\":"
		out.RawString(prefix)
		out.String(string(in.PreKeyTagID))
	}
	if in.PreKeyFrom != 0 {
		const prefix string = ",\"pre_key_from\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.PreKeyFrom))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalFormat2(in *jlexer.Lexer, out *format.MetricMetaTag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "raw":
			out.Raw = bool(in.Bool())
		case "raw_kind":
			out.RawKind = string(in.String())
		case "id2value":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ID2Value = make(map[int32]string)
				} else {
					out.ID2Value = nil
				}
				for !in.IsDelim('}') {
					key := int32(in.Int32Str())
					in.WantColon()
					var v27 string
					v27 = string(in.String())
					(out.ID2Value)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		case "value_comments":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ValueComments = make(map[string]string)
				} else {
					out.ValueComments = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v28 string
					v28 = string(in.String())
					(out.ValueComments)[key] = v28
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalFormat2(out *jwriter.Writer, in format.MetricMetaTag) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Raw {
		const prefix string = ",\"raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Raw))
	}
	if in.RawKind != "" {
		const prefix string = ",\"raw_kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawKind))
	}
	if len(in.ID2Value) != 0 {
		const prefix string = ",\"id2value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v29First := true
			for v29Name, v29Value := range in.ID2Value {
				if v29First {
					v29First = false
				} else {
					out.RawByte(',')
				}
				out.Int32Str(int32(v29Name))
				out.RawByte(':')
				out.String(string(v29Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.ValueComments) != 0 {
		const prefix string = ",\"value_comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v30First := true
			for v30Name, v30Value := range in.ValueComments {
				if v30First {
					v30First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v30Name))
				out.RawByte(':')
				out.String(string(v30Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi6(in *jlexer.Lexer, out *GetPointResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "point_meta":
			if in.IsNull() {
				in.Skip()
				out.PointMeta = nil
			} else {
				in.Delim('[')
				if out.PointMeta == nil {
					if !in.IsDelim(']') {
						out.PointMeta = make([]QueryPointsMeta, 0, 0)
					} else {
						out.PointMeta = []QueryPointsMeta{}
					}
				} else {
					out.PointMeta = (out.PointMeta)[:0]
				}
				for !in.IsDelim(']') {
					var v31 QueryPointsMeta
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi7(in, &v31)
					out.PointMeta = append(out.PointMeta, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "point_data":
			if in.IsNull() {
				in.Skip()
				out.PointData = nil
			} else {
				in.Delim('[')
				if out.PointData == nil {
					if !in.IsDelim(']') {
						out.PointData = make([]float64, 0, 8)
					} else {
						out.PointData = []float64{}
					}
				} else {
					out.PointData = (out.PointData)[:0]
				}
				for !in.IsDelim(']') {
					var v32 float64
					v32 = float64(in.Float64())
					out.PointData = append(out.PointData, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "__debug_queries":
			if in.IsNull() {
				in.Skip()
				out.DebugQueries = nil
			} else {
				in.Delim('[')
				if out.DebugQueries == nil {
					if !in.IsDelim(']') {
						out.DebugQueries = make([]string, 0, 4)
					} else {
						out.DebugQueries = []string{}
					}
				} else {
					out.DebugQueries = (out.DebugQueries)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.DebugQueries = append(out.DebugQueries, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi6(out *jwriter.Writer, in GetPointResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"point_meta\":"
		out.RawString(prefix[1:])
		if in.PointMeta == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.PointMeta {
				if v34 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi7(out, v35)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"point_data\":"
		out.RawString(prefix)
		if in.PointData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.PointData {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.Float64(float64(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"__debug_queries\":"
		out.RawString(prefix)
		if in.DebugQueries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.DebugQueries {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPointResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPointResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi6(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi7(in *jlexer.Lexer, out *QueryPointsMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_shift":
			out.TimeShift = int64(in.Int64())
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]SeriesMetaTag)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v40 SeriesMetaTag
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi3(in, &v40)
					(out.Tags)[key] = v40
					in.WantComma()
				}
				in.Delim('}')
			}
		case "max_host":
			out.MaxHost = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "what":
			(out.What).UnmarshalEasyJSON(in)
		case "from_sec":
			out.FromSec = int64(in.Int64())
		case "to_sec":
			out.ToSec = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi7(out *jwriter.Writer, in QueryPointsMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_shift\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TimeShift))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v41First := true
			for v41Name, v41Value := range in.Tags {
				if v41First {
					v41First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v41Name))
				out.RawByte(':')
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi3(out, v41Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"max_host\":"
		out.RawString(prefix)
		out.String(string(in.MaxHost))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"what\":"
		out.RawString(prefix)
		(in.What).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"from_sec\":"
		out.RawString(prefix)
		out.Int64(int64(in.FromSec))
	}
	{
		const prefix string = ",\"to_sec\":"
		out.RawString(prefix)
		out.Int64(int64(in.ToSec))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi8(in *jlexer.Lexer, out *GetMetricsListResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metrics":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				in.Delim('[')
				if out.Metrics == nil {
					if !in.IsDelim(']') {
						out.Metrics = make([]metricShortInfo, 0, 4)
					} else {
						out.Metrics = []metricShortInfo{}
					}
				} else {
					out.Metrics = (out.Metrics)[:0]
				}
				for !in.IsDelim(']') {
					var v42 metricShortInfo
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi9(in, &v42)
					out.Metrics = append(out.Metrics, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi8(out *jwriter.Writer, in GetMetricsListResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metrics\":"
		out.RawString(prefix[1:])
		if in.Metrics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.Metrics {
				if v43 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi9(out, v44)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMetricsListResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi8(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMetricsListResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi8(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi9(in *jlexer.Lexer, out *metricShortInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi9(out *jwriter.Writer, in metricShortInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi10(in *jlexer.Lexer, out *GetMetricTagValuesResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tag_values":
			if in.IsNull() {
				in.Skip()
				out.TagValues = nil
			} else {
				in.Delim('[')
				if out.TagValues == nil {
					if !in.IsDelim(']') {
						out.TagValues = make([]MetricTagValueInfo, 0, 2)
					} else {
						out.TagValues = []MetricTagValueInfo{}
					}
				} else {
					out.TagValues = (out.TagValues)[:0]
				}
				for !in.IsDelim(']') {
					var v45 MetricTagValueInfo
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi11(in, &v45)
					out.TagValues = append(out.TagValues, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tag_values_more":
			out.TagValuesMore = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi10(out *jwriter.Writer, in GetMetricTagValuesResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tag_values\":"
		out.RawString(prefix[1:])
		if in.TagValues == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v46, v47 := range in.TagValues {
				if v46 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi11(out, v47)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tag_values_more\":"
		out.RawString(prefix)
		out.Bool(bool(in.TagValuesMore))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMetricTagValuesResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi10(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMetricTagValuesResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi10(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi11(in *jlexer.Lexer, out *MetricTagValueInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "count":
			out.Count = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi11(out *jwriter.Writer, in MetricTagValueInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Float64(float64(in.Count))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi12(in *jlexer.Lexer, out *GetGroupListResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]groupShortInfo, 0, 2)
					} else {
						out.Groups = []groupShortInfo{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v48 groupShortInfo
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi13(in, &v48)
					out.Groups = append(out.Groups, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi12(out *jwriter.Writer, in GetGroupListResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"groups\":"
		out.RawString(prefix[1:])
		if in.Groups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.Groups {
				if v49 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi13(out, v50)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetGroupListResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi12(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetGroupListResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi12(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi13(in *jlexer.Lexer, out *groupShortInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "weight":
			out.Weight = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi13(out *jwriter.Writer, in groupShortInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.Weight))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi14(in *jlexer.Lexer, out *GetDashboardListResp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dashboards":
			if in.IsNull() {
				in.Skip()
				out.Dashboards = nil
			} else {
				in.Delim('[')
				if out.Dashboards == nil {
					if !in.IsDelim(']') {
						out.Dashboards = make([]dashboardShortInfo, 0, 1)
					} else {
						out.Dashboards = []dashboardShortInfo{}
					}
				} else {
					out.Dashboards = (out.Dashboards)[:0]
				}
				for !in.IsDelim(']') {
					var v51 dashboardShortInfo
					easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi15(in, &v51)
					out.Dashboards = append(out.Dashboards, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi14(out *jwriter.Writer, in GetDashboardListResp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dashboards\":"
		out.RawString(prefix[1:])
		if in.Dashboards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v52, v53 := range in.Dashboards {
				if v52 > 0 {
					out.RawByte(',')
				}
				easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi15(out, v53)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetDashboardListResp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi14(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetDashboardListResp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi14(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi15(in *jlexer.Lexer, out *dashboardShortInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi15(out *jwriter.Writer, in dashboardShortInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi16(in *jlexer.Lexer, out *DashboardInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dashboard":
			easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi17(in, &out.Dashboard)
		case "delete_mark":
			out.Delete = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi16(out *jwriter.Writer, in DashboardInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dashboard\":"
		out.RawString(prefix[1:])
		easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi17(out, in.Dashboard)
	}
	{
		const prefix string = ",\"delete_mark\":"
		out.RawString(prefix)
		out.Bool(bool(in.Delete))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DashboardInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi16(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DashboardInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi16(l, v)
}
func easyjson888c126aDecodeGithubComVkcomStatshouseInternalApi17(in *jlexer.Lexer, out *DashboardMetaInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dashboard_id":
			out.DashboardID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "update_time":
			out.UpdateTime = uint32(in.Uint32())
		case "deleted_time":
			out.DeletedTime = uint32(in.Uint32())
		case "description":
			out.Description = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.JSONData = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v54 interface{}
					if m, ok := v54.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v54.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v54 = in.Interface()
					}
					(out.JSONData)[key] = v54
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson888c126aEncodeGithubComVkcomStatshouseInternalApi17(out *jwriter.Writer, in DashboardMetaInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dashboard_id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.DashboardID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UpdateTime))
	}
	{
		const prefix string = ",\"deleted_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.DeletedTime))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.JSONData == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v55First := true
			for v55Name, v55Value := range in.JSONData {
				if v55First {
					v55First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v55Name))
				out.RawByte(':')
				if m, ok := v55Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v55Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v55Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
