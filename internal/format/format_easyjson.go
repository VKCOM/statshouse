// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package format

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson72863a49DecodeGithubComVkcomStatshouseInternalFormat(in *jlexer.Lexer, out *NamespaceMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "namespace_id":
			out.ID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "update_time":
			out.UpdateTime = uint32(in.Uint32())
		case "delete_time":
			out.DeleteTime = uint32(in.Uint32())
		case "weight":
			out.Weight = float64(in.Float64())
		case "disable":
			out.Disable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComVkcomStatshouseInternalFormat(out *jwriter.Writer, in NamespaceMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UpdateTime))
	}
	{
		const prefix string = ",\"delete_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.DeleteTime))
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.Weight))
	}
	{
		const prefix string = ",\"disable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Disable))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamespaceMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComVkcomStatshouseInternalFormat(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamespaceMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComVkcomStatshouseInternalFormat(l, v)
}
func easyjson72863a49DecodeGithubComVkcomStatshouseInternalFormat1(in *jlexer.Lexer, out *MetricsGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group_id":
			out.ID = int32(in.Int32())
		case "namespace_id":
			out.NamespaceID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "update_time":
			out.UpdateTime = uint32(in.Uint32())
		case "weight":
			out.Weight = float64(in.Float64())
		case "disable":
			out.Disable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComVkcomStatshouseInternalFormat1(out *jwriter.Writer, in MetricsGroup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group_id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"namespace_id\":"
		out.RawString(prefix)
		out.Int32(int32(in.NamespaceID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"update_time\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UpdateTime))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Float64(float64(in.Weight))
	}
	if in.Disable {
		const prefix string = ",\"disable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Disable))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricsGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComVkcomStatshouseInternalFormat1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricsGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComVkcomStatshouseInternalFormat1(l, v)
}
func easyjson72863a49DecodeGithubComVkcomStatshouseInternalFormat2(in *jlexer.Lexer, out *MetricMetaValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metric_id":
			out.MetricID = int32(in.Int32())
		case "namespace_id":
			out.NamespaceID = int32(in.Int32())
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "description":
			out.Description = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]MetricMetaTag, 0, 0)
					} else {
						out.Tags = []MetricMetaTag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v1 MetricMetaTag
					easyjson72863a49DecodeGithubComVkcomStatshouseInternalFormat3(in, &v1)
					out.Tags = append(out.Tags, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags_draft":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TagsDraft = make(map[string]MetricMetaTag)
				} else {
					out.TagsDraft = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 MetricMetaTag
					easyjson72863a49DecodeGithubComVkcomStatshouseInternalFormat3(in, &v2)
					(out.TagsDraft)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "visible":
			out.Visible = bool(in.Bool())
		case "disable":
			out.Disable = bool(in.Bool())
		case "kind":
			out.Kind = string(in.String())
		case "weight":
			out.Weight = float64(in.Float64())
		case "resolution":
			out.Resolution = int(in.Int())
		case "string_top_name":
			out.StringTopName = string(in.String())
		case "string_top_description":
			out.StringTopDescription = string(in.String())
		case "pre_key_tag_id":
			out.PreKeyTagID = string(in.String())
		case "pre_key_from":
			out.PreKeyFrom = uint32(in.Uint32())
		case "skip_max_host":
			out.SkipMaxHost = bool(in.Bool())
		case "skip_min_host":
			out.SkipMinHost = bool(in.Bool())
		case "skip_sum_square":
			out.SkipSumSquare = bool(in.Bool())
		case "pre_key_only":
			out.PreKeyOnly = bool(in.Bool())
		case "metric_type":
			out.MetricType = string(in.String())
		case "fair_key_tag_ids":
			if in.IsNull() {
				in.Skip()
				out.FairKeyTagIDs = nil
			} else {
				in.Delim('[')
				if out.FairKeyTagIDs == nil {
					if !in.IsDelim(']') {
						out.FairKeyTagIDs = make([]string, 0, 4)
					} else {
						out.FairKeyTagIDs = []string{}
					}
				} else {
					out.FairKeyTagIDs = (out.FairKeyTagIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.FairKeyTagIDs = append(out.FairKeyTagIDs, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "shard_strategy":
			out.ShardStrategy = string(in.String())
		case "shard_num":
			out.ShardNum = uint32(in.Uint32())
		case "pipeline_version":
			out.PipelineVersion = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComVkcomStatshouseInternalFormat2(out *jwriter.Writer, in MetricMetaValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MetricID != 0 {
		const prefix string = ",\"metric_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.MetricID))
	}
	if in.NamespaceID != 0 {
		const prefix string = ",\"namespace_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.NamespaceID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Version != 0 {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Version))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.Tags {
				if v4 > 0 {
					out.RawByte(',')
				}
				easyjson72863a49EncodeGithubComVkcomStatshouseInternalFormat3(out, v5)
			}
			out.RawByte(']')
		}
	}
	if len(in.TagsDraft) != 0 {
		const prefix string = ",\"tags_draft\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.TagsDraft {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				easyjson72863a49EncodeGithubComVkcomStatshouseInternalFormat3(out, v6Value)
			}
			out.RawByte('}')
		}
	}
	if in.Visible {
		const prefix string = ",\"visible\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Visible))
	}
	if in.Disable {
		const prefix string = ",\"disable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disable))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Weight))
	}
	if in.Resolution != 0 {
		const prefix string = ",\"resolution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Resolution))
	}
	if in.StringTopName != "" {
		const prefix string = ",\"string_top_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StringTopName))
	}
	if in.StringTopDescription != "" {
		const prefix string = ",\"string_top_description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StringTopDescription))
	}
	if in.PreKeyTagID != "" {
		const prefix string = ",\"pre_key_tag_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PreKeyTagID))
	}
	if in.PreKeyFrom != 0 {
		const prefix string = ",\"pre_key_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.PreKeyFrom))
	}
	if in.SkipMaxHost {
		const prefix string = ",\"skip_max_host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SkipMaxHost))
	}
	if in.SkipMinHost {
		const prefix string = ",\"skip_min_host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SkipMinHost))
	}
	if in.SkipSumSquare {
		const prefix string = ",\"skip_sum_square\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SkipSumSquare))
	}
	if in.PreKeyOnly {
		const prefix string = ",\"pre_key_only\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.PreKeyOnly))
	}
	if in.MetricType != "" {
		const prefix string = ",\"metric_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MetricType))
	}
	if len(in.FairKeyTagIDs) != 0 {
		const prefix string = ",\"fair_key_tag_ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.FairKeyTagIDs {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	if in.ShardStrategy != "" {
		const prefix string = ",\"shard_strategy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShardStrategy))
	}
	if in.ShardNum != 0 {
		const prefix string = ",\"shard_num\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.ShardNum))
	}
	if in.PipelineVersion != 0 {
		const prefix string = ",\"pipeline_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.PipelineVersion))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricMetaValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson72863a49EncodeGithubComVkcomStatshouseInternalFormat2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricMetaValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson72863a49DecodeGithubComVkcomStatshouseInternalFormat2(l, v)
}
func easyjson72863a49DecodeGithubComVkcomStatshouseInternalFormat3(in *jlexer.Lexer, out *MetricMetaTag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "raw_kind":
			out.RawKind = string(in.String())
		case "value_comments":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ValueComments = make(map[string]string)
				} else {
					out.ValueComments = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 string
					v9 = string(in.String())
					(out.ValueComments)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "raw":
			out.Raw = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson72863a49EncodeGithubComVkcomStatshouseInternalFormat3(out *jwriter.Writer, in MetricMetaTag) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.RawKind != "" {
		const prefix string = ",\"raw_kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RawKind))
	}
	if len(in.ValueComments) != 0 {
		const prefix string = ",\"value_comments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.ValueComments {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	if in.Raw {
		const prefix string = ",\"raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Raw))
	}
	out.RawByte('}')
}
