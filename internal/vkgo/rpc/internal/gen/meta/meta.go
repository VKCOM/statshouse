// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package meta

import (
	"fmt"

	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
	"github.com/VKCOM/statshouse/internal/vkgo/rpc/internal/gen/internal"
)

func SchemaGenerator() string { return "v1.2.3" }
func SchemaURL() string       { return "" }
func SchemaCommit() string    { return "" }
func SchemaTimestamp() uint32 { return 0 }

// We can create only types which have zero type arguments and zero nat arguments
type Object interface {
	TLName() string // returns type's TL name. For union, returns constructor name depending on actual union value
	TLTag() uint32  // returns type's TL tag. For union, returns constructor tag depending on actual union value
	String() string // returns type's representation for debugging (JSON for now)

	FillRandom(rg *basictl.RandGenerator)
	Read(w []byte) ([]byte, error)              // reads type's bare TL representation by consuming bytes from the start of w and returns remaining bytes, plus error
	ReadBoxed(w []byte) ([]byte, error)         // same as Read, but reads/checks TLTag first (this method is general version of Write, use it only when you are working with interface)
	WriteGeneral(w []byte) ([]byte, error)      // same as Write, but has common signature (with error) for all objects, so can be called through interface
	WriteBoxedGeneral(w []byte) ([]byte, error) // same as WriteBoxed, but has common signature (with error) for all objects, so can be called through interface

	MarshalJSON() ([]byte, error) // returns type's JSON representation, plus error
	UnmarshalJSON([]byte) error   // reads type's JSON representation

	ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error
	WriteJSONGeneral(w []byte) ([]byte, error) // like MarshalJSON, but appends to w and returns it
}

type Function interface {
	Object

	ReadResultWriteResultJSON(r []byte, w []byte) ([]byte, []byte, error) // combination of ReadResult(r) + WriteResultJSON(w). Returns new r, new w, plus error
	ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) // combination of ReadResultJSON(r) + WriteResult(w). Returns new r, new w, plus error

	// For transcoding short-long version during Long ID and newTypeNames transition
	ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) ([]byte, []byte, error)
}

func GetAllTLItems() []TLItem {
	var allItems []TLItem
	for _, item := range itemsByName {
		if item != nil {
			allItems = append(allItems, *item)
		}
	}
	return allItems
}

// for quick one-liners
func GetTLName(tag uint32, notFoundName string) string {
	if item := FactoryItemByTLTag(tag); item != nil {
		return item.TLName()
	}
	return notFoundName
}

func CreateFunction(tag uint32) Function {
	if item := FactoryItemByTLTag(tag); item != nil && item.createFunction != nil {
		return item.createFunction()
	}
	return nil
}

func CreateObject(tag uint32) Object {
	if item := FactoryItemByTLTag(tag); item != nil && item.createObject != nil {
		return item.createObject()
	}
	return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateFunctionFromName(name string) Function {
	if item := FactoryItemByTLName(name); item != nil && item.createFunction != nil {
		return item.createFunction()
	}
	return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateObjectFromName(name string) Object {
	if item := FactoryItemByTLName(name); item != nil && item.createObject != nil {
		return item.createObject()
	}
	return nil
}

func CreateFunctionBytes(tag uint32) Function {
	if item := FactoryItemByTLTag(tag); item != nil && item.createFunctionBytes != nil {
		return item.createFunctionBytes()
	}
	return nil
}

func CreateObjectBytes(tag uint32) Object {
	if item := FactoryItemByTLTag(tag); item != nil && item.createObjectBytes != nil {
		return item.createObjectBytes()
	}
	return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateFunctionFromNameBytes(name string) Function {
	if item := FactoryItemByTLName(name); item != nil && item.createFunctionBytes != nil {
		return item.createFunctionBytes()
	}
	return nil
}

// name can be in any of 3 forms "ch_proxy.insert#7cf362ba", "ch_proxy.insert" or "#7cf362ba"
func CreateObjectFromNameBytes(name string) Object {
	if item := FactoryItemByTLName(name); item != nil && item.createObjectBytes != nil {
		return item.createObjectBytes()
	}
	return nil
}

type TLItem struct {
	tag         uint32
	annotations uint32
	tlName      string

	resultTypeContainsUnionTypes    bool
	argumentsTypesContainUnionTypes bool

	createFunction          func() Function
	createFunctionLong      func() Function
	createObject            func() Object
	createFunctionBytes     func() Function
	createFunctionLongBytes func() Function
	createObjectBytes       func() Object
}

func (item TLItem) TLTag() uint32            { return item.tag }
func (item TLItem) TLName() string           { return item.tlName }
func (item TLItem) CreateObject() Object     { return item.createObject() }
func (item TLItem) IsFunction() bool         { return item.createFunction != nil }
func (item TLItem) CreateFunction() Function { return item.createFunction() }

func (item TLItem) HasUnionTypesInResult() bool    { return item.resultTypeContainsUnionTypes }
func (item TLItem) HasUnionTypesInArguments() bool { return item.argumentsTypesContainUnionTypes }

// For transcoding short-long version during Long ID transition
func (item TLItem) HasFunctionLong() bool        { return item.createFunctionLong != nil }
func (item TLItem) CreateFunctionLong() Function { return item.createFunctionLong() }

// Annotations
func (item TLItem) AnnotationAny() bool       { return item.annotations&0x1 != 0 }
func (item TLItem) AnnotationInternal() bool  { return item.annotations&0x2 != 0 }
func (item TLItem) AnnotationReadwrite() bool { return item.annotations&0x4 != 0 }

// TLItem serves as a single type for all enum values
func (item *TLItem) Reset()                                {}
func (item *TLItem) FillRandom(rg *basictl.RandGenerator)  {}
func (item *TLItem) Read(w []byte) ([]byte, error)         { return w, nil }
func (item *TLItem) WriteGeneral(w []byte) ([]byte, error) { return w, nil }
func (item *TLItem) Write(w []byte) []byte                 { return w }
func (item *TLItem) ReadBoxed(w []byte) ([]byte, error)    { return basictl.NatReadExactTag(w, item.tag) }
func (item *TLItem) WriteBoxedGeneral(w []byte) ([]byte, error) {
	return basictl.NatWrite(w, item.tag), nil
}
func (item *TLItem) WriteBoxed(w []byte) []byte { return basictl.NatWrite(w, item.tag) }
func (item TLItem) String() string {
	return string(item.WriteJSON(nil))
}
func (item *TLItem) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	in.Delim('{')
	if !in.Ok() {
		return in.Error()
	}
	for !in.IsDelim('}') {
		return internal.ErrorInvalidJSONExcessElement(item.tlName, in.UnsafeFieldName(true))
	}
	in.Delim('}')
	if !in.Ok() {
		return in.Error()
	}
	return nil
}
func (item *TLItem) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}
func (item *TLItem) WriteJSON(w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}
func (item *TLItem) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}
func (item *TLItem) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON(item.tlName, err.Error())
	}
	return nil
}
func FactoryItemByTLTag(tag uint32) *TLItem {
	return itemsByTag[tag]
}

func FactoryItemByTLName(name string) *TLItem {
	return itemsByName[name]
}

var itemsByTag = map[uint32]*TLItem{}

var itemsByName = map[string]*TLItem{}

func SetGlobalFactoryCreateForFunction(itemTag uint32, createObject func() Object, createFunction func() Function, createFunctionLong func() Function) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find function tag #%08x to set", itemTag))
	}
	item.createObject = createObject
	item.createFunction = createFunction
	item.createFunctionLong = createFunctionLong
}

func SetGlobalFactoryCreateForObject(itemTag uint32, createObject func() Object) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find item tag #%08x to set", itemTag))
	}
	item.createObject = createObject
}

func SetGlobalFactoryCreateForEnumElement(itemTag uint32) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find enum tag #%08x to set", itemTag))
	}
	item.createObject = func() Object { return item }
}

func SetGlobalFactoryCreateForFunctionBytes(itemTag uint32, createObject func() Object, createFunction func() Function, createFunctionLong func() Function) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find function tag #%08x to set", itemTag))
	}
	item.createObjectBytes = createObject
	item.createFunctionBytes = createFunction
	item.createFunctionLongBytes = createFunctionLong
}

func SetGlobalFactoryCreateForObjectBytes(itemTag uint32, createObject func() Object) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find item tag #%08x to set", itemTag))
	}
	item.createObjectBytes = createObject
}

func SetGlobalFactoryCreateForEnumElementBytes(itemTag uint32) {
	item := itemsByTag[itemTag]
	if item == nil {
		panic(fmt.Sprintf("factory cannot find enum tag #%08x to set", itemTag))
	}
	item.createObjectBytes = func() Object { return item }
}

func pleaseImportFactoryBytesObject() Object {
	panic("factory functions are not linked to reduce code bloat, please import 'gen/factory_bytes' instead of 'gen/meta'.")
}

func pleaseImportFactoryBytesFunction() Function {
	panic("factory functions are not linked to reduce code bloat, please import 'gen/factory_bytes' instead of 'gen/meta'.")
}

func pleaseImportFactoryObject() Object {
	panic("factory functions are not linked to reduce code bloat, please import 'gen/factory' instead of 'gen/meta'.")
}

func pleaseImportFactoryFunction() Function {
	panic("factory functions are not linked to reduce code bloat, please import 'gen/factory' instead of 'gen/meta'.")
}

func fillObject(n1 string, n2 string, item *TLItem) {
	itemsByTag[item.tag] = item
	itemsByName[item.tlName] = item
	itemsByName[n1] = item
	itemsByName[n2] = item
	item.createObject = pleaseImportFactoryObject
	item.createObjectBytes = pleaseImportFactoryBytesObject
	// code below is as fast, but allocates some extra strings which are already in binary const segment due to JSON code
	// itemsByName[fmt.Sprintf("%s#%08x", item.tlName, item.tag)] = item
	// itemsByName[fmt.Sprintf("#%08x", item.tag)] = item
}

func fillFunction(n1 string, n2 string, item *TLItem) {
	fillObject(n1, n2, item)
	item.createFunction = pleaseImportFactoryFunction
	item.createFunctionBytes = pleaseImportFactoryBytesFunction
}

func init() {
	fillObject("allocSlotEvent#2abb2c70", "#2abb2c70", &TLItem{tag: 0x2abb2c70, annotations: 0x0, tlName: "allocSlotEvent", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("engine.asyncSleep#60e50d3d", "#60e50d3d", &TLItem{tag: 0x60e50d3d, annotations: 0x3, tlName: "engine.asyncSleep", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("engine.filteredStat#594870d6", "#594870d6", &TLItem{tag: 0x594870d6, annotations: 0x1, tlName: "engine.filteredStat", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("engine.pid#559d6e36", "#559d6e36", &TLItem{tag: 0x559d6e36, annotations: 0x1, tlName: "engine.pid", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("engine.setVerbosity#9d980926", "#9d980926", &TLItem{tag: 0x9d980926, annotations: 0x3, tlName: "engine.setVerbosity", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("engine.sleep#3d3bcd48", "#3d3bcd48", &TLItem{tag: 0x3d3bcd48, annotations: 0x3, tlName: "engine.sleep", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("engine.stat#efb3c36b", "#efb3c36b", &TLItem{tag: 0xefb3c36b, annotations: 0x1, tlName: "engine.stat", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("engine.version#1a2e06fa", "#1a2e06fa", &TLItem{tag: 0x1a2e06fa, annotations: 0x1, tlName: "engine.version", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("exactlyOnce.ackResponse#17641550", "#17641550", &TLItem{tag: 0x17641550, annotations: 0x0, tlName: "exactlyOnce.ackResponse", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("exactlyOnce.commitRequest#6836b983", "#6836b983", &TLItem{tag: 0x6836b983, annotations: 0x0, tlName: "exactlyOnce.commitRequest", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("exactlyOnce.prepareRequest#c8d71b66", "#c8d71b66", &TLItem{tag: 0xc8d71b66, annotations: 0x0, tlName: "exactlyOnce.prepareRequest", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("exactlyOnce.slotResponse#95f25c81", "#95f25c81", &TLItem{tag: 0x95f25c81, annotations: 0x0, tlName: "exactlyOnce.slotResponse", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("exactlyOnce.uuid#c97c16b2", "#c97c16b2", &TLItem{tag: 0xc97c16b2, annotations: 0x0, tlName: "exactlyOnce.uuid", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillFunction("go.pprof#ea2876a6", "#ea2876a6", &TLItem{tag: 0xea2876a6, annotations: 0x4, tlName: "go.pprof", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("net.pid#46409ccf", "#46409ccf", &TLItem{tag: 0x46409ccf, annotations: 0x0, tlName: "net.pid", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("netUdpPacket.encHeader#251a7bfd", "#251a7bfd", &TLItem{tag: 0x251a7bfd, annotations: 0x0, tlName: "netUdpPacket.encHeader", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("netUdpPacket.obsoleteGeneration#b340010b", "#b340010b", &TLItem{tag: 0xb340010b, annotations: 0x0, tlName: "netUdpPacket.obsoleteGeneration", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("netUdpPacket.obsoleteHash#1adb0f4e", "#1adb0f4e", &TLItem{tag: 0x1adb0f4e, annotations: 0x0, tlName: "netUdpPacket.obsoleteHash", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("netUdpPacket.obsoletePid#6f4ac134", "#6f4ac134", &TLItem{tag: 0x6f4ac134, annotations: 0x0, tlName: "netUdpPacket.obsoletePid", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("netUdpPacket.resendRange#5efaad4a", "#5efaad4a", &TLItem{tag: 0x5efaad4a, annotations: 0x0, tlName: "netUdpPacket.resendRange", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("netUdpPacket.resendRequest#643736d9", "#643736d9", &TLItem{tag: 0x643736d9, annotations: 0x0, tlName: "netUdpPacket.resendRequest", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("netUdpPacket.unencHeader#00a8e945", "#00a8e945", &TLItem{tag: 0x00a8e945, annotations: 0x0, tlName: "netUdpPacket.unencHeader", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("netUdpPacket.wait#6e321c96", "#6e321c96", &TLItem{tag: 0x6e321c96, annotations: 0x0, tlName: "netUdpPacket.wait", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("releaseSlotEvent#7f045ccc", "#7f045ccc", &TLItem{tag: 0x7f045ccc, annotations: 0x0, tlName: "releaseSlotEvent", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("reqError#b527877d", "#b527877d", &TLItem{tag: 0xb527877d, annotations: 0x0, tlName: "reqError", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("reqResultHeader#8cc84ce1", "#8cc84ce1", &TLItem{tag: 0x8cc84ce1, annotations: 0x0, tlName: "reqResultHeader", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcCancelReq#193f1b22", "#193f1b22", &TLItem{tag: 0x193f1b22, annotations: 0x0, tlName: "rpcCancelReq", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcClientWantsFin#0b73429e", "#0b73429e", &TLItem{tag: 0x0b73429e, annotations: 0x0, tlName: "rpcClientWantsFin", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcDestActor#7568aabd", "#7568aabd", &TLItem{tag: 0x7568aabd, annotations: 0x0, tlName: "rpcDestActor", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcDestActorFlags#f0a5acf7", "#f0a5acf7", &TLItem{tag: 0xf0a5acf7, annotations: 0x0, tlName: "rpcDestActorFlags", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcDestFlags#e352035e", "#e352035e", &TLItem{tag: 0xe352035e, annotations: 0x0, tlName: "rpcDestFlags", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcInvokeReqExtra#f3ef81a9", "#f3ef81a9", &TLItem{tag: 0xf3ef81a9, annotations: 0x0, tlName: "rpcInvokeReqExtra", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcInvokeReqHeader#2374df3d", "#2374df3d", &TLItem{tag: 0x2374df3d, annotations: 0x0, tlName: "rpcInvokeReqHeader", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcPing#5730a2df", "#5730a2df", &TLItem{tag: 0x5730a2df, annotations: 0x0, tlName: "rpcPing", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcPong#8430eaa7", "#8430eaa7", &TLItem{tag: 0x8430eaa7, annotations: 0x0, tlName: "rpcPong", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcReqResultError#7ae432f5", "#7ae432f5", &TLItem{tag: 0x7ae432f5, annotations: 0x0, tlName: "rpcReqResultError", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcReqResultErrorWrapped#7ae432f6", "#7ae432f6", &TLItem{tag: 0x7ae432f6, annotations: 0x0, tlName: "rpcReqResultErrorWrapped", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcReqResultExtra#c5011709", "#c5011709", &TLItem{tag: 0xc5011709, annotations: 0x0, tlName: "rpcReqResultExtra", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcReqResultHeader#63aeda4e", "#63aeda4e", &TLItem{tag: 0x63aeda4e, annotations: 0x0, tlName: "rpcReqResultHeader", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcServerWantsFin#a8ddbc46", "#a8ddbc46", &TLItem{tag: 0xa8ddbc46, annotations: 0x0, tlName: "rpcServerWantsFin", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("rpcTL2Marker#29324c54", "#29324c54", &TLItem{tag: 0x29324c54, annotations: 0x0, tlName: "rpcTL2Marker", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("stat#9d56e6b2", "#9d56e6b2", &TLItem{tag: 0x9d56e6b2, annotations: 0x0, tlName: "stat", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("string#b5286e24", "#b5286e24", &TLItem{tag: 0xb5286e24, annotations: 0x0, tlName: "string", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("tracing.traceContext#c463a95c", "#c463a95c", &TLItem{tag: 0xc463a95c, annotations: 0x0, tlName: "tracing.traceContext", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("tracing.traceID#2f4ac855", "#2f4ac855", &TLItem{tag: 0x2f4ac855, annotations: 0x0, tlName: "tracing.traceID", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
	fillObject("true#3fedd339", "#3fedd339", &TLItem{tag: 0x3fedd339, annotations: 0x0, tlName: "true", resultTypeContainsUnionTypes: false, argumentsTypesContainUnionTypes: false})
}
