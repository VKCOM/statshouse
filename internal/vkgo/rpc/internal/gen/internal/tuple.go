// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type Tuple8 [8]uint32

func (Tuple8) TLName() string { return "tuple" }
func (Tuple8) TLTag() uint32  { return 0x9770768a }

func (item *Tuple8) Reset() {
	ptr := (*[8]uint32)(item)
	BuiltinTuple8Reset(ptr)
}

func (item *Tuple8) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[8]uint32)(item)
	BuiltinTuple8FillRandom(rg, ptr)
}

func (item *Tuple8) Read(w []byte) (_ []byte, err error) {
	ptr := (*[8]uint32)(item)
	return BuiltinTuple8Read(w, ptr)
}

func (item *Tuple8) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Tuple8) Write(w []byte) []byte {
	ptr := (*[8]uint32)(item)
	return BuiltinTuple8Write(w, ptr)
}

func (item *Tuple8) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Tuple8) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Tuple8) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x9770768a)
	return item.Write(w)
}

func (item Tuple8) String() string {
	return string(item.WriteJSON(nil))
}
func (item *Tuple8) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[8]uint32)(item)
	if err := BuiltinTuple8ReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Tuple8) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *Tuple8) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *Tuple8) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[8]uint32)(item)
	w = BuiltinTuple8WriteJSONOpt(newTypeNames, short, w, ptr)
	return w
}
func (item *Tuple8) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Tuple8) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tuple", err.Error())
	}
	return nil
}
