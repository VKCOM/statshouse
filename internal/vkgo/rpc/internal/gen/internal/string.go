// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func VectorString0Read(w []byte, vec *[]string) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]string, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = basictl.StringRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorString0Write(w []byte, vec []string) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = basictl.StringWrite(w, elem); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorString0ReadJSON(j interface{}, vec *[]string) error {
	l, _arr, err := JsonReadArray("[]string", j)
	if err != nil {
		return err
	}
	if cap(*vec) < l {
		*vec = make([]string, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if err := JsonReadString(_arr[i], &(*vec)[i]); err != nil {
			return err
		}
	}
	return nil
}

func VectorString0WriteJSON(w []byte, vec []string) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteString(w, elem)
	}
	return append(w, ']'), nil
}
