// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type RpcDestActor struct {
	ActorId int64
}

func (RpcDestActor) TLName() string { return "rpcDestActor" }
func (RpcDestActor) TLTag() uint32  { return 0x7568aabd }

func (item *RpcDestActor) Reset() {
	item.ActorId = 0
}

func (item *RpcDestActor) Read(w []byte) (_ []byte, err error) {
	return basictl.LongRead(w, &item.ActorId)
}

func (item *RpcDestActor) Write(w []byte) (_ []byte, err error) {
	return basictl.LongWrite(w, item.ActorId), nil
}

func (item *RpcDestActor) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x7568aabd); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *RpcDestActor) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x7568aabd)
	return item.Write(w)
}

func (item RpcDestActor) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func RpcDestActor__ReadJSON(item *RpcDestActor, j interface{}) error { return item.readJSON(j) }
func (item *RpcDestActor) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("rpcDestActor", "expected json object")
	}
	_jActorId := _jm["actor_id"]
	delete(_jm, "actor_id")
	if err := JsonReadInt64(_jActorId, &item.ActorId); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("rpcDestActor", k)
	}
	return nil
}

func (item *RpcDestActor) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *RpcDestActor) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.ActorId != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"actor_id":`...)
		w = basictl.JSONWriteInt64(w, item.ActorId)
	}
	return append(w, '}'), nil
}

func (item *RpcDestActor) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *RpcDestActor) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("rpcDestActor", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("rpcDestActor", err.Error())
	}
	return nil
}
