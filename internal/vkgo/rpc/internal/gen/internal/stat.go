// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type Stat map[string]string

func (Stat) TLName() string { return "stat" }
func (Stat) TLTag() uint32  { return 0x9d56e6b2 }

func (item *Stat) Reset() {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringReset(*ptr)
}

func (item *Stat) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringFillRandom(rg, ptr)
}

func (item *Stat) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *Stat) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Stat) Write(w []byte) []byte {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringWrite(w, *ptr)
}

func (item *Stat) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9d56e6b2); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Stat) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Stat) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x9d56e6b2)
	return item.Write(w)
}

func (item Stat) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Stat) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*map[string]string)(item)
	if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Stat) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *Stat) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *Stat) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*map[string]string)(item)
	w = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *Stat) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Stat) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("stat", err.Error())
	}
	return nil
}
