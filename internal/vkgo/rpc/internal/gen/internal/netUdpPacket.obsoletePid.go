// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type NetUdpPacketObsoletePid struct {
	ObsoletePid NetPid
	ActualPid   NetPid
	Generation  uint32
}

func (NetUdpPacketObsoletePid) TLName() string { return "netUdpPacket.obsoletePid" }
func (NetUdpPacketObsoletePid) TLTag() uint32  { return 0x6f4ac134 }

func (item *NetUdpPacketObsoletePid) Reset() {
	item.ObsoletePid.Reset()
	item.ActualPid.Reset()
	item.Generation = 0
}

func (item *NetUdpPacketObsoletePid) FillRandom(rg *basictl.RandGenerator) {
	item.ObsoletePid.FillRandom(rg)
	item.ActualPid.FillRandom(rg)
	item.Generation = basictl.RandomUint(rg)
}

func (item *NetUdpPacketObsoletePid) Read(w []byte) (_ []byte, err error) {
	if w, err = item.ObsoletePid.ReadBoxed(w); err != nil {
		return w, err
	}
	if w, err = item.ActualPid.ReadBoxed(w); err != nil {
		return w, err
	}
	return basictl.NatRead(w, &item.Generation)
}

func (item *NetUdpPacketObsoletePid) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *NetUdpPacketObsoletePid) Write(w []byte) []byte {
	w = item.ObsoletePid.WriteBoxed(w)
	w = item.ActualPid.WriteBoxed(w)
	w = basictl.NatWrite(w, item.Generation)
	return w
}

func (item *NetUdpPacketObsoletePid) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x6f4ac134); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *NetUdpPacketObsoletePid) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *NetUdpPacketObsoletePid) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x6f4ac134)
	return item.Write(w)
}

func (item NetUdpPacketObsoletePid) String() string {
	return string(item.WriteJSON(nil))
}

func (item *NetUdpPacketObsoletePid) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propObsoletePidPresented bool
	var propActualPidPresented bool
	var propGenerationPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "obsolete_pid":
				if propObsoletePidPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("netUdpPacket.obsoletePid", "obsolete_pid")
				}
				if err := item.ObsoletePid.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propObsoletePidPresented = true
			case "actual_pid":
				if propActualPidPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("netUdpPacket.obsoletePid", "actual_pid")
				}
				if err := item.ActualPid.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propActualPidPresented = true
			case "generation":
				if propGenerationPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("netUdpPacket.obsoletePid", "generation")
				}
				if err := Json2ReadUint32(in, &item.Generation); err != nil {
					return err
				}
				propGenerationPresented = true
			default:
				return ErrorInvalidJSONExcessElement("netUdpPacket.obsoletePid", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propObsoletePidPresented {
		item.ObsoletePid.Reset()
	}
	if !propActualPidPresented {
		item.ActualPid.Reset()
	}
	if !propGenerationPresented {
		item.Generation = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *NetUdpPacketObsoletePid) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *NetUdpPacketObsoletePid) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *NetUdpPacketObsoletePid) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"obsolete_pid":`...)
	w = item.ObsoletePid.WriteJSONOpt(newTypeNames, short, w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"actual_pid":`...)
	w = item.ActualPid.WriteJSONOpt(newTypeNames, short, w)
	backupIndexGeneration := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"generation":`...)
	w = basictl.JSONWriteUint32(w, item.Generation)
	if (item.Generation != 0) == false {
		w = w[:backupIndexGeneration]
	}
	return append(w, '}')
}

func (item *NetUdpPacketObsoletePid) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *NetUdpPacketObsoletePid) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("netUdpPacket.obsoletePid", err.Error())
	}
	return nil
}
