// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type ExactlyOnceUuid struct {
	Lo int64
	Hi int64
}

func (ExactlyOnceUuid) TLName() string { return "exactlyOnce.uuid" }
func (ExactlyOnceUuid) TLTag() uint32  { return 0xc97c16b2 }

func (item *ExactlyOnceUuid) Reset() {
	item.Lo = 0
	item.Hi = 0
}

func (item *ExactlyOnceUuid) FillRandom(rg *basictl.RandGenerator) {
	item.Lo = basictl.RandomLong(rg)
	item.Hi = basictl.RandomLong(rg)
}

func (item *ExactlyOnceUuid) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.Lo); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.Hi)
}

// This method is general version of Write, use it instead!
func (item *ExactlyOnceUuid) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *ExactlyOnceUuid) Write(w []byte) []byte {
	w = basictl.LongWrite(w, item.Lo)
	w = basictl.LongWrite(w, item.Hi)
	return w
}

func (item *ExactlyOnceUuid) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc97c16b2); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *ExactlyOnceUuid) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *ExactlyOnceUuid) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xc97c16b2)
	return item.Write(w)
}

func (item ExactlyOnceUuid) String() string {
	return string(item.WriteJSON(nil))
}

func (item *ExactlyOnceUuid) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propLoPresented bool
	var propHiPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "lo":
				if propLoPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("exactlyOnce.uuid", "lo")
				}
				if err := Json2ReadInt64(in, &item.Lo); err != nil {
					return err
				}
				propLoPresented = true
			case "hi":
				if propHiPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("exactlyOnce.uuid", "hi")
				}
				if err := Json2ReadInt64(in, &item.Hi); err != nil {
					return err
				}
				propHiPresented = true
			default:
				return ErrorInvalidJSONExcessElement("exactlyOnce.uuid", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propLoPresented {
		item.Lo = 0
	}
	if !propHiPresented {
		item.Hi = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *ExactlyOnceUuid) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *ExactlyOnceUuid) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *ExactlyOnceUuid) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexLo := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"lo":`...)
	w = basictl.JSONWriteInt64(w, item.Lo)
	if (item.Lo != 0) == false {
		w = w[:backupIndexLo]
	}
	backupIndexHi := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"hi":`...)
	w = basictl.JSONWriteInt64(w, item.Hi)
	if (item.Hi != 0) == false {
		w = w[:backupIndexHi]
	}
	return append(w, '}')
}

func (item *ExactlyOnceUuid) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *ExactlyOnceUuid) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("exactlyOnce.uuid", err.Error())
	}
	return nil
}
