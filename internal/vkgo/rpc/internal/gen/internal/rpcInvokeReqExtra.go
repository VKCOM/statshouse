// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type RpcInvokeReqExtra struct {
	Flags uint32
	// ReturnBinlogPos (TrueType) // Conditional: item.Flags.0
	// ReturnBinlogTime (TrueType) // Conditional: item.Flags.1
	// ReturnPid (TrueType) // Conditional: item.Flags.2
	// ReturnRequestSizes (TrueType) // Conditional: item.Flags.3
	// ReturnFailedSubqueries (TrueType) // Conditional: item.Flags.4
	// ReturnQueryStats (TrueType) // Conditional: item.Flags.6
	// NoResult (TrueType) // Conditional: item.Flags.7
	// ReturnShardsBinlogPos (TrueType) // Conditional: item.Flags.8
	WaitShardsBinlogPos         map[string]int64 // Conditional: item.Flags.15
	WaitBinlogPos               int64            // Conditional: item.Flags.16
	StringForwardKeys           []string         // Conditional: item.Flags.18
	IntForwardKeys              []int64          // Conditional: item.Flags.19
	StringForward               string           // Conditional: item.Flags.20
	IntForward                  int64            // Conditional: item.Flags.21
	CustomTimeoutMs             int32            // Conditional: item.Flags.23
	SupportedCompressionVersion int32            // Conditional: item.Flags.25
	RandomDelay                 float64          // Conditional: item.Flags.26
	// ReturnViewNumber (TrueType) // Conditional: item.Flags.27
	PersistentQuery ExactlyOncePersistentRequest // Conditional: item.Flags.28
}

func (RpcInvokeReqExtra) TLName() string { return "rpcInvokeReqExtra" }
func (RpcInvokeReqExtra) TLTag() uint32  { return 0xf3ef81a9 }

func (item *RpcInvokeReqExtra) SetReturnBinlogPos(v bool) {
	if v {
		item.Flags |= 1 << 0
	} else {
		item.Flags &^= 1 << 0
	}
}
func (item RpcInvokeReqExtra) IsSetReturnBinlogPos() bool { return item.Flags&(1<<0) != 0 }

func (item *RpcInvokeReqExtra) SetReturnBinlogTime(v bool) {
	if v {
		item.Flags |= 1 << 1
	} else {
		item.Flags &^= 1 << 1
	}
}
func (item RpcInvokeReqExtra) IsSetReturnBinlogTime() bool { return item.Flags&(1<<1) != 0 }

func (item *RpcInvokeReqExtra) SetReturnPid(v bool) {
	if v {
		item.Flags |= 1 << 2
	} else {
		item.Flags &^= 1 << 2
	}
}
func (item RpcInvokeReqExtra) IsSetReturnPid() bool { return item.Flags&(1<<2) != 0 }

func (item *RpcInvokeReqExtra) SetReturnRequestSizes(v bool) {
	if v {
		item.Flags |= 1 << 3
	} else {
		item.Flags &^= 1 << 3
	}
}
func (item RpcInvokeReqExtra) IsSetReturnRequestSizes() bool { return item.Flags&(1<<3) != 0 }

func (item *RpcInvokeReqExtra) SetReturnFailedSubqueries(v bool) {
	if v {
		item.Flags |= 1 << 4
	} else {
		item.Flags &^= 1 << 4
	}
}
func (item RpcInvokeReqExtra) IsSetReturnFailedSubqueries() bool { return item.Flags&(1<<4) != 0 }

func (item *RpcInvokeReqExtra) SetReturnQueryStats(v bool) {
	if v {
		item.Flags |= 1 << 6
	} else {
		item.Flags &^= 1 << 6
	}
}
func (item RpcInvokeReqExtra) IsSetReturnQueryStats() bool { return item.Flags&(1<<6) != 0 }

func (item *RpcInvokeReqExtra) SetNoResult(v bool) {
	if v {
		item.Flags |= 1 << 7
	} else {
		item.Flags &^= 1 << 7
	}
}
func (item RpcInvokeReqExtra) IsSetNoResult() bool { return item.Flags&(1<<7) != 0 }

func (item *RpcInvokeReqExtra) SetReturnShardsBinlogPos(v bool) {
	if v {
		item.Flags |= 1 << 8
	} else {
		item.Flags &^= 1 << 8
	}
}
func (item RpcInvokeReqExtra) IsSetReturnShardsBinlogPos() bool { return item.Flags&(1<<8) != 0 }

func (item *RpcInvokeReqExtra) SetWaitShardsBinlogPos(v map[string]int64) {
	item.WaitShardsBinlogPos = v
	item.Flags |= 1 << 15
}
func (item *RpcInvokeReqExtra) ClearWaitShardsBinlogPos() {
	BuiltinVectorDictionaryFieldLongReset(item.WaitShardsBinlogPos)
	item.Flags &^= 1 << 15
}
func (item RpcInvokeReqExtra) IsSetWaitShardsBinlogPos() bool { return item.Flags&(1<<15) != 0 }

func (item *RpcInvokeReqExtra) SetWaitBinlogPos(v int64) {
	item.WaitBinlogPos = v
	item.Flags |= 1 << 16
}
func (item *RpcInvokeReqExtra) ClearWaitBinlogPos() {
	item.WaitBinlogPos = 0
	item.Flags &^= 1 << 16
}
func (item RpcInvokeReqExtra) IsSetWaitBinlogPos() bool { return item.Flags&(1<<16) != 0 }

func (item *RpcInvokeReqExtra) SetStringForwardKeys(v []string) {
	item.StringForwardKeys = v
	item.Flags |= 1 << 18
}
func (item *RpcInvokeReqExtra) ClearStringForwardKeys() {
	item.StringForwardKeys = item.StringForwardKeys[:0]
	item.Flags &^= 1 << 18
}
func (item RpcInvokeReqExtra) IsSetStringForwardKeys() bool { return item.Flags&(1<<18) != 0 }

func (item *RpcInvokeReqExtra) SetIntForwardKeys(v []int64) {
	item.IntForwardKeys = v
	item.Flags |= 1 << 19
}
func (item *RpcInvokeReqExtra) ClearIntForwardKeys() {
	item.IntForwardKeys = item.IntForwardKeys[:0]
	item.Flags &^= 1 << 19
}
func (item RpcInvokeReqExtra) IsSetIntForwardKeys() bool { return item.Flags&(1<<19) != 0 }

func (item *RpcInvokeReqExtra) SetStringForward(v string) {
	item.StringForward = v
	item.Flags |= 1 << 20
}
func (item *RpcInvokeReqExtra) ClearStringForward() {
	item.StringForward = ""
	item.Flags &^= 1 << 20
}
func (item RpcInvokeReqExtra) IsSetStringForward() bool { return item.Flags&(1<<20) != 0 }

func (item *RpcInvokeReqExtra) SetIntForward(v int64) {
	item.IntForward = v
	item.Flags |= 1 << 21
}
func (item *RpcInvokeReqExtra) ClearIntForward() {
	item.IntForward = 0
	item.Flags &^= 1 << 21
}
func (item RpcInvokeReqExtra) IsSetIntForward() bool { return item.Flags&(1<<21) != 0 }

func (item *RpcInvokeReqExtra) SetCustomTimeoutMs(v int32) {
	item.CustomTimeoutMs = v
	item.Flags |= 1 << 23
}
func (item *RpcInvokeReqExtra) ClearCustomTimeoutMs() {
	item.CustomTimeoutMs = 0
	item.Flags &^= 1 << 23
}
func (item RpcInvokeReqExtra) IsSetCustomTimeoutMs() bool { return item.Flags&(1<<23) != 0 }

func (item *RpcInvokeReqExtra) SetSupportedCompressionVersion(v int32) {
	item.SupportedCompressionVersion = v
	item.Flags |= 1 << 25
}
func (item *RpcInvokeReqExtra) ClearSupportedCompressionVersion() {
	item.SupportedCompressionVersion = 0
	item.Flags &^= 1 << 25
}
func (item RpcInvokeReqExtra) IsSetSupportedCompressionVersion() bool { return item.Flags&(1<<25) != 0 }

func (item *RpcInvokeReqExtra) SetRandomDelay(v float64) {
	item.RandomDelay = v
	item.Flags |= 1 << 26
}
func (item *RpcInvokeReqExtra) ClearRandomDelay() {
	item.RandomDelay = 0
	item.Flags &^= 1 << 26
}
func (item RpcInvokeReqExtra) IsSetRandomDelay() bool { return item.Flags&(1<<26) != 0 }

func (item *RpcInvokeReqExtra) SetReturnViewNumber(v bool) {
	if v {
		item.Flags |= 1 << 27
	} else {
		item.Flags &^= 1 << 27
	}
}
func (item RpcInvokeReqExtra) IsSetReturnViewNumber() bool { return item.Flags&(1<<27) != 0 }

func (item *RpcInvokeReqExtra) SetPersistentQuery(v ExactlyOncePersistentRequest) {
	item.PersistentQuery = v
	item.Flags |= 1 << 28
}
func (item *RpcInvokeReqExtra) ClearPersistentQuery() {
	item.PersistentQuery.Reset()
	item.Flags &^= 1 << 28
}
func (item RpcInvokeReqExtra) IsSetPersistentQuery() bool { return item.Flags&(1<<28) != 0 }

func (item *RpcInvokeReqExtra) Reset() {
	item.Flags = 0
	BuiltinVectorDictionaryFieldLongReset(item.WaitShardsBinlogPos)
	item.WaitBinlogPos = 0
	item.StringForwardKeys = item.StringForwardKeys[:0]
	item.IntForwardKeys = item.IntForwardKeys[:0]
	item.StringForward = ""
	item.IntForward = 0
	item.CustomTimeoutMs = 0
	item.SupportedCompressionVersion = 0
	item.RandomDelay = 0
	item.PersistentQuery.Reset()
}

func (item *RpcInvokeReqExtra) FillRandom(rg *basictl.RandGenerator) {
	var maskFlags uint32
	maskFlags = basictl.RandomUint(rg)
	item.Flags = 0
	if maskFlags&(1<<0) != 0 {
		item.Flags |= (1 << 0)
	}
	if maskFlags&(1<<1) != 0 {
		item.Flags |= (1 << 1)
	}
	if maskFlags&(1<<2) != 0 {
		item.Flags |= (1 << 2)
	}
	if maskFlags&(1<<3) != 0 {
		item.Flags |= (1 << 3)
	}
	if maskFlags&(1<<4) != 0 {
		item.Flags |= (1 << 4)
	}
	if maskFlags&(1<<5) != 0 {
		item.Flags |= (1 << 6)
	}
	if maskFlags&(1<<6) != 0 {
		item.Flags |= (1 << 7)
	}
	if maskFlags&(1<<7) != 0 {
		item.Flags |= (1 << 8)
	}
	if maskFlags&(1<<8) != 0 {
		item.Flags |= (1 << 15)
	}
	if maskFlags&(1<<9) != 0 {
		item.Flags |= (1 << 16)
	}
	if maskFlags&(1<<10) != 0 {
		item.Flags |= (1 << 18)
	}
	if maskFlags&(1<<11) != 0 {
		item.Flags |= (1 << 19)
	}
	if maskFlags&(1<<12) != 0 {
		item.Flags |= (1 << 20)
	}
	if maskFlags&(1<<13) != 0 {
		item.Flags |= (1 << 21)
	}
	if maskFlags&(1<<14) != 0 {
		item.Flags |= (1 << 23)
	}
	if maskFlags&(1<<15) != 0 {
		item.Flags |= (1 << 25)
	}
	if maskFlags&(1<<16) != 0 {
		item.Flags |= (1 << 26)
	}
	if maskFlags&(1<<17) != 0 {
		item.Flags |= (1 << 27)
	}
	if maskFlags&(1<<18) != 0 {
		item.Flags |= (1 << 28)
	}
	if item.Flags&(1<<15) != 0 {
		BuiltinVectorDictionaryFieldLongFillRandom(rg, &item.WaitShardsBinlogPos)
	} else {
		BuiltinVectorDictionaryFieldLongReset(item.WaitShardsBinlogPos)
	}
	if item.Flags&(1<<16) != 0 {
		item.WaitBinlogPos = basictl.RandomLong(rg)
	} else {
		item.WaitBinlogPos = 0
	}
	if item.Flags&(1<<18) != 0 {
		BuiltinVectorStringFillRandom(rg, &item.StringForwardKeys)
	} else {
		item.StringForwardKeys = item.StringForwardKeys[:0]
	}
	if item.Flags&(1<<19) != 0 {
		BuiltinVectorLongFillRandom(rg, &item.IntForwardKeys)
	} else {
		item.IntForwardKeys = item.IntForwardKeys[:0]
	}
	if item.Flags&(1<<20) != 0 {
		item.StringForward = basictl.RandomString(rg)
	} else {
		item.StringForward = ""
	}
	if item.Flags&(1<<21) != 0 {
		item.IntForward = basictl.RandomLong(rg)
	} else {
		item.IntForward = 0
	}
	if item.Flags&(1<<23) != 0 {
		item.CustomTimeoutMs = basictl.RandomInt(rg)
	} else {
		item.CustomTimeoutMs = 0
	}
	if item.Flags&(1<<25) != 0 {
		item.SupportedCompressionVersion = basictl.RandomInt(rg)
	} else {
		item.SupportedCompressionVersion = 0
	}
	if item.Flags&(1<<26) != 0 {
		item.RandomDelay = basictl.RandomDouble(rg)
	} else {
		item.RandomDelay = 0
	}
	if item.Flags&(1<<28) != 0 {
		item.PersistentQuery.FillRandom(rg)
	} else {
		item.PersistentQuery.Reset()
	}
}

func (item *RpcInvokeReqExtra) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.Flags); err != nil {
		return w, err
	}
	if item.Flags&(1<<15) != 0 {
		if w, err = BuiltinVectorDictionaryFieldLongRead(w, &item.WaitShardsBinlogPos); err != nil {
			return w, err
		}
	} else {
		BuiltinVectorDictionaryFieldLongReset(item.WaitShardsBinlogPos)
	}
	if item.Flags&(1<<16) != 0 {
		if w, err = basictl.LongRead(w, &item.WaitBinlogPos); err != nil {
			return w, err
		}
	} else {
		item.WaitBinlogPos = 0
	}
	if item.Flags&(1<<18) != 0 {
		if w, err = BuiltinVectorStringRead(w, &item.StringForwardKeys); err != nil {
			return w, err
		}
	} else {
		item.StringForwardKeys = item.StringForwardKeys[:0]
	}
	if item.Flags&(1<<19) != 0 {
		if w, err = BuiltinVectorLongRead(w, &item.IntForwardKeys); err != nil {
			return w, err
		}
	} else {
		item.IntForwardKeys = item.IntForwardKeys[:0]
	}
	if item.Flags&(1<<20) != 0 {
		if w, err = basictl.StringRead(w, &item.StringForward); err != nil {
			return w, err
		}
	} else {
		item.StringForward = ""
	}
	if item.Flags&(1<<21) != 0 {
		if w, err = basictl.LongRead(w, &item.IntForward); err != nil {
			return w, err
		}
	} else {
		item.IntForward = 0
	}
	if item.Flags&(1<<23) != 0 {
		if w, err = basictl.IntRead(w, &item.CustomTimeoutMs); err != nil {
			return w, err
		}
	} else {
		item.CustomTimeoutMs = 0
	}
	if item.Flags&(1<<25) != 0 {
		if w, err = basictl.IntRead(w, &item.SupportedCompressionVersion); err != nil {
			return w, err
		}
	} else {
		item.SupportedCompressionVersion = 0
	}
	if item.Flags&(1<<26) != 0 {
		if w, err = basictl.DoubleRead(w, &item.RandomDelay); err != nil {
			return w, err
		}
	} else {
		item.RandomDelay = 0
	}
	if item.Flags&(1<<28) != 0 {
		if w, err = item.PersistentQuery.ReadBoxed(w); err != nil {
			return w, err
		}
	} else {
		item.PersistentQuery.Reset()
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *RpcInvokeReqExtra) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *RpcInvokeReqExtra) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.Flags)
	if item.Flags&(1<<15) != 0 {
		w = BuiltinVectorDictionaryFieldLongWrite(w, item.WaitShardsBinlogPos)
	}
	if item.Flags&(1<<16) != 0 {
		w = basictl.LongWrite(w, item.WaitBinlogPos)
	}
	if item.Flags&(1<<18) != 0 {
		w = BuiltinVectorStringWrite(w, item.StringForwardKeys)
	}
	if item.Flags&(1<<19) != 0 {
		w = BuiltinVectorLongWrite(w, item.IntForwardKeys)
	}
	if item.Flags&(1<<20) != 0 {
		w = basictl.StringWrite(w, item.StringForward)
	}
	if item.Flags&(1<<21) != 0 {
		w = basictl.LongWrite(w, item.IntForward)
	}
	if item.Flags&(1<<23) != 0 {
		w = basictl.IntWrite(w, item.CustomTimeoutMs)
	}
	if item.Flags&(1<<25) != 0 {
		w = basictl.IntWrite(w, item.SupportedCompressionVersion)
	}
	if item.Flags&(1<<26) != 0 {
		w = basictl.DoubleWrite(w, item.RandomDelay)
	}
	if item.Flags&(1<<28) != 0 {
		w = item.PersistentQuery.WriteBoxed(w)
	}
	return w
}

func (item *RpcInvokeReqExtra) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xf3ef81a9); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *RpcInvokeReqExtra) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *RpcInvokeReqExtra) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xf3ef81a9)
	return item.Write(w)
}

func (item RpcInvokeReqExtra) String() string {
	return string(item.WriteJSON(nil))
}

func (item *RpcInvokeReqExtra) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFlagsPresented bool
	var trueTypeReturnBinlogPosPresented bool
	var trueTypeReturnBinlogPosValue bool
	var trueTypeReturnBinlogTimePresented bool
	var trueTypeReturnBinlogTimeValue bool
	var trueTypeReturnPidPresented bool
	var trueTypeReturnPidValue bool
	var trueTypeReturnRequestSizesPresented bool
	var trueTypeReturnRequestSizesValue bool
	var trueTypeReturnFailedSubqueriesPresented bool
	var trueTypeReturnFailedSubqueriesValue bool
	var trueTypeReturnQueryStatsPresented bool
	var trueTypeReturnQueryStatsValue bool
	var trueTypeNoResultPresented bool
	var trueTypeNoResultValue bool
	var trueTypeReturnShardsBinlogPosPresented bool
	var trueTypeReturnShardsBinlogPosValue bool
	var propWaitShardsBinlogPosPresented bool
	var propWaitBinlogPosPresented bool
	var propStringForwardKeysPresented bool
	var propIntForwardKeysPresented bool
	var propStringForwardPresented bool
	var propIntForwardPresented bool
	var propCustomTimeoutMsPresented bool
	var propSupportedCompressionVersionPresented bool
	var propRandomDelayPresented bool
	var trueTypeReturnViewNumberPresented bool
	var trueTypeReturnViewNumberValue bool
	var propPersistentQueryPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "flags":
				if propFlagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "flags")
				}
				if err := Json2ReadUint32(in, &item.Flags); err != nil {
					return err
				}
				propFlagsPresented = true
			case "return_binlog_pos":
				if trueTypeReturnBinlogPosPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "return_binlog_pos")
				}
				if err := Json2ReadBool(in, &trueTypeReturnBinlogPosValue); err != nil {
					return err
				}
				trueTypeReturnBinlogPosPresented = true
			case "return_binlog_time":
				if trueTypeReturnBinlogTimePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "return_binlog_time")
				}
				if err := Json2ReadBool(in, &trueTypeReturnBinlogTimeValue); err != nil {
					return err
				}
				trueTypeReturnBinlogTimePresented = true
			case "return_pid":
				if trueTypeReturnPidPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "return_pid")
				}
				if err := Json2ReadBool(in, &trueTypeReturnPidValue); err != nil {
					return err
				}
				trueTypeReturnPidPresented = true
			case "return_request_sizes":
				if trueTypeReturnRequestSizesPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "return_request_sizes")
				}
				if err := Json2ReadBool(in, &trueTypeReturnRequestSizesValue); err != nil {
					return err
				}
				trueTypeReturnRequestSizesPresented = true
			case "return_failed_subqueries":
				if trueTypeReturnFailedSubqueriesPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "return_failed_subqueries")
				}
				if err := Json2ReadBool(in, &trueTypeReturnFailedSubqueriesValue); err != nil {
					return err
				}
				trueTypeReturnFailedSubqueriesPresented = true
			case "return_query_stats":
				if trueTypeReturnQueryStatsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "return_query_stats")
				}
				if err := Json2ReadBool(in, &trueTypeReturnQueryStatsValue); err != nil {
					return err
				}
				trueTypeReturnQueryStatsPresented = true
			case "no_result":
				if trueTypeNoResultPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "no_result")
				}
				if err := Json2ReadBool(in, &trueTypeNoResultValue); err != nil {
					return err
				}
				trueTypeNoResultPresented = true
			case "return_shards_binlog_pos":
				if trueTypeReturnShardsBinlogPosPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "return_shards_binlog_pos")
				}
				if err := Json2ReadBool(in, &trueTypeReturnShardsBinlogPosValue); err != nil {
					return err
				}
				trueTypeReturnShardsBinlogPosPresented = true
			case "wait_shards_binlog_pos":
				if propWaitShardsBinlogPosPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "wait_shards_binlog_pos")
				}
				if err := BuiltinVectorDictionaryFieldLongReadJSON(legacyTypeNames, in, &item.WaitShardsBinlogPos); err != nil {
					return err
				}
				propWaitShardsBinlogPosPresented = true
			case "wait_binlog_pos":
				if propWaitBinlogPosPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "wait_binlog_pos")
				}
				if err := Json2ReadInt64(in, &item.WaitBinlogPos); err != nil {
					return err
				}
				propWaitBinlogPosPresented = true
			case "string_forward_keys":
				if propStringForwardKeysPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "string_forward_keys")
				}
				if err := BuiltinVectorStringReadJSON(legacyTypeNames, in, &item.StringForwardKeys); err != nil {
					return err
				}
				propStringForwardKeysPresented = true
			case "int_forward_keys":
				if propIntForwardKeysPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "int_forward_keys")
				}
				if err := BuiltinVectorLongReadJSON(legacyTypeNames, in, &item.IntForwardKeys); err != nil {
					return err
				}
				propIntForwardKeysPresented = true
			case "string_forward":
				if propStringForwardPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "string_forward")
				}
				if err := Json2ReadString(in, &item.StringForward); err != nil {
					return err
				}
				propStringForwardPresented = true
			case "int_forward":
				if propIntForwardPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "int_forward")
				}
				if err := Json2ReadInt64(in, &item.IntForward); err != nil {
					return err
				}
				propIntForwardPresented = true
			case "custom_timeout_ms":
				if propCustomTimeoutMsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "custom_timeout_ms")
				}
				if err := Json2ReadInt32(in, &item.CustomTimeoutMs); err != nil {
					return err
				}
				propCustomTimeoutMsPresented = true
			case "supported_compression_version":
				if propSupportedCompressionVersionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "supported_compression_version")
				}
				if err := Json2ReadInt32(in, &item.SupportedCompressionVersion); err != nil {
					return err
				}
				propSupportedCompressionVersionPresented = true
			case "random_delay":
				if propRandomDelayPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "random_delay")
				}
				if err := Json2ReadFloat64(in, &item.RandomDelay); err != nil {
					return err
				}
				propRandomDelayPresented = true
			case "return_view_number":
				if trueTypeReturnViewNumberPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "return_view_number")
				}
				if err := Json2ReadBool(in, &trueTypeReturnViewNumberValue); err != nil {
					return err
				}
				trueTypeReturnViewNumberPresented = true
			case "persistent_query":
				if propPersistentQueryPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcInvokeReqExtra", "persistent_query")
				}
				if err := item.PersistentQuery.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propPersistentQueryPresented = true
			default:
				return ErrorInvalidJSONExcessElement("rpcInvokeReqExtra", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFlagsPresented {
		item.Flags = 0
	}
	if !propWaitShardsBinlogPosPresented {
		BuiltinVectorDictionaryFieldLongReset(item.WaitShardsBinlogPos)
	}
	if !propWaitBinlogPosPresented {
		item.WaitBinlogPos = 0
	}
	if !propStringForwardKeysPresented {
		item.StringForwardKeys = item.StringForwardKeys[:0]
	}
	if !propIntForwardKeysPresented {
		item.IntForwardKeys = item.IntForwardKeys[:0]
	}
	if !propStringForwardPresented {
		item.StringForward = ""
	}
	if !propIntForwardPresented {
		item.IntForward = 0
	}
	if !propCustomTimeoutMsPresented {
		item.CustomTimeoutMs = 0
	}
	if !propSupportedCompressionVersionPresented {
		item.SupportedCompressionVersion = 0
	}
	if !propRandomDelayPresented {
		item.RandomDelay = 0
	}
	if !propPersistentQueryPresented {
		item.PersistentQuery.Reset()
	}
	if trueTypeReturnBinlogPosPresented {
		if trueTypeReturnBinlogPosValue {
			item.Flags |= 1 << 0
		}
	}
	if trueTypeReturnBinlogTimePresented {
		if trueTypeReturnBinlogTimeValue {
			item.Flags |= 1 << 1
		}
	}
	if trueTypeReturnPidPresented {
		if trueTypeReturnPidValue {
			item.Flags |= 1 << 2
		}
	}
	if trueTypeReturnRequestSizesPresented {
		if trueTypeReturnRequestSizesValue {
			item.Flags |= 1 << 3
		}
	}
	if trueTypeReturnFailedSubqueriesPresented {
		if trueTypeReturnFailedSubqueriesValue {
			item.Flags |= 1 << 4
		}
	}
	if trueTypeReturnQueryStatsPresented {
		if trueTypeReturnQueryStatsValue {
			item.Flags |= 1 << 6
		}
	}
	if trueTypeNoResultPresented {
		if trueTypeNoResultValue {
			item.Flags |= 1 << 7
		}
	}
	if trueTypeReturnShardsBinlogPosPresented {
		if trueTypeReturnShardsBinlogPosValue {
			item.Flags |= 1 << 8
		}
	}
	if propWaitShardsBinlogPosPresented {
		item.Flags |= 1 << 15
	}
	if propWaitBinlogPosPresented {
		item.Flags |= 1 << 16
	}
	if propStringForwardKeysPresented {
		item.Flags |= 1 << 18
	}
	if propIntForwardKeysPresented {
		item.Flags |= 1 << 19
	}
	if propStringForwardPresented {
		item.Flags |= 1 << 20
	}
	if propIntForwardPresented {
		item.Flags |= 1 << 21
	}
	if propCustomTimeoutMsPresented {
		item.Flags |= 1 << 23
	}
	if propSupportedCompressionVersionPresented {
		item.Flags |= 1 << 25
	}
	if propRandomDelayPresented {
		item.Flags |= 1 << 26
	}
	if trueTypeReturnViewNumberPresented {
		if trueTypeReturnViewNumberValue {
			item.Flags |= 1 << 27
		}
	}
	if propPersistentQueryPresented {
		item.Flags |= 1 << 28
	}
	// tries to set bit to zero if it is 1
	if trueTypeReturnBinlogPosPresented && !trueTypeReturnBinlogPosValue && (item.Flags&(1<<0) != 0) {
		return ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit flags.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeReturnBinlogTimePresented && !trueTypeReturnBinlogTimeValue && (item.Flags&(1<<1) != 0) {
		return ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit flags.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeReturnPidPresented && !trueTypeReturnPidValue && (item.Flags&(1<<2) != 0) {
		return ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit flags.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeReturnRequestSizesPresented && !trueTypeReturnRequestSizesValue && (item.Flags&(1<<3) != 0) {
		return ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit flags.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeReturnFailedSubqueriesPresented && !trueTypeReturnFailedSubqueriesValue && (item.Flags&(1<<4) != 0) {
		return ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit flags.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeReturnQueryStatsPresented && !trueTypeReturnQueryStatsValue && (item.Flags&(1<<6) != 0) {
		return ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit flags.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeNoResultPresented && !trueTypeNoResultValue && (item.Flags&(1<<7) != 0) {
		return ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit flags.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeReturnShardsBinlogPosPresented && !trueTypeReturnShardsBinlogPosValue && (item.Flags&(1<<8) != 0) {
		return ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit flags.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeReturnViewNumberPresented && !trueTypeReturnViewNumberValue && (item.Flags&(1<<27) != 0) {
		return ErrorInvalidJSON("rpcInvokeReqExtra", "fieldmask bit flags.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *RpcInvokeReqExtra) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *RpcInvokeReqExtra) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *RpcInvokeReqExtra) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFlags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"flags":`...)
	w = basictl.JSONWriteUint32(w, item.Flags)
	if (item.Flags != 0) == false {
		w = w[:backupIndexFlags]
	}
	if item.Flags&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"return_binlog_pos":true`...)
	}
	if item.Flags&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"return_binlog_time":true`...)
	}
	if item.Flags&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"return_pid":true`...)
	}
	if item.Flags&(1<<3) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"return_request_sizes":true`...)
	}
	if item.Flags&(1<<4) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"return_failed_subqueries":true`...)
	}
	if item.Flags&(1<<6) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"return_query_stats":true`...)
	}
	if item.Flags&(1<<7) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"no_result":true`...)
	}
	if item.Flags&(1<<8) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"return_shards_binlog_pos":true`...)
	}
	if item.Flags&(1<<15) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"wait_shards_binlog_pos":`...)
		w = BuiltinVectorDictionaryFieldLongWriteJSONOpt(newTypeNames, short, w, item.WaitShardsBinlogPos)
	}
	if item.Flags&(1<<16) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"wait_binlog_pos":`...)
		w = basictl.JSONWriteInt64(w, item.WaitBinlogPos)
	}
	if item.Flags&(1<<18) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"string_forward_keys":`...)
		w = BuiltinVectorStringWriteJSONOpt(newTypeNames, short, w, item.StringForwardKeys)
	}
	if item.Flags&(1<<19) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"int_forward_keys":`...)
		w = BuiltinVectorLongWriteJSONOpt(newTypeNames, short, w, item.IntForwardKeys)
	}
	if item.Flags&(1<<20) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"string_forward":`...)
		w = basictl.JSONWriteString(w, item.StringForward)
	}
	if item.Flags&(1<<21) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"int_forward":`...)
		w = basictl.JSONWriteInt64(w, item.IntForward)
	}
	if item.Flags&(1<<23) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"custom_timeout_ms":`...)
		w = basictl.JSONWriteInt32(w, item.CustomTimeoutMs)
	}
	if item.Flags&(1<<25) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"supported_compression_version":`...)
		w = basictl.JSONWriteInt32(w, item.SupportedCompressionVersion)
	}
	if item.Flags&(1<<26) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"random_delay":`...)
		w = basictl.JSONWriteFloat64(w, item.RandomDelay)
	}
	if item.Flags&(1<<27) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"return_view_number":true`...)
	}
	if item.Flags&(1<<28) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"persistent_query":`...)
		w = item.PersistentQuery.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, '}')
}

func (item *RpcInvokeReqExtra) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *RpcInvokeReqExtra) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("rpcInvokeReqExtra", err.Error())
	}
	return nil
}
