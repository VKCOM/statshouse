// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple8Reset(vec *[8]uint32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple8Read(w []byte, vec *[8]uint32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.NatRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple8Write(w []byte, vec *[8]uint32) (_ []byte, err error) {
	for _, elem := range *vec {
		w = basictl.NatWrite(w, elem)
	}
	return w, nil
}

func BuiltinTuple8ReadJSON(j interface{}, vec *[8]uint32) error {
	_, _arr, err := JsonReadArrayFixedSize("[8]uint32", j, 8)
	if err != nil {
		return err
	}
	for i := range *vec {
		if err := JsonReadUint32(_arr[i], &(*vec)[i]); err != nil {
			return err
		}
	}
	return nil
}

func BuiltinTuple8WriteJSON(w []byte, vec *[8]uint32) (_ []byte, err error) {
	return BuiltinTuple8WriteJSONOpt(false, w, vec)
}
func BuiltinTuple8WriteJSONOpt(short bool, w []byte, vec *[8]uint32) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteUint32(w, elem)
	}
	return append(w, ']'), nil
}
