// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple8Reset(vec *[8]uint32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple8FillRandom(rg *basictl.RandGenerator, vec *[8]uint32) {
	rg.IncreaseDepth()
	for i := range *vec {
		(*vec)[i] = basictl.RandomUint(rg)
	}
	rg.DecreaseDepth()
}

func BuiltinTuple8Read(w []byte, vec *[8]uint32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.NatRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple8Write(w []byte, vec *[8]uint32) []byte {
	for _, elem := range *vec {
		w = basictl.NatWrite(w, elem)
	}
	return w
}

func BuiltinTuple8ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[8]uint32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[8]uint32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 8 {
				return ErrorWrongSequenceLength("[8]uint32", index+1, 8)
			}
			if err := Json2ReadUint32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[8]uint32", "expected json array's end")
		}
	}
	if index != 8 {
		return ErrorWrongSequenceLength("[8]uint32", index+1, 8)
	}
	return nil
}

func BuiltinTuple8WriteJSON(w []byte, vec *[8]uint32) []byte {
	return BuiltinTuple8WriteJSONOpt(true, false, w, vec)
}
func BuiltinTuple8WriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[8]uint32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteUint32(w, elem)
	}
	return append(w, ']')
}
