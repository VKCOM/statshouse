// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type NetPID struct {
	Ip      uint32
	PortPid uint32
	Utime   uint32
}

func (NetPID) TLName() string { return "netPID" }
func (NetPID) TLTag() uint32  { return 0x723c414d }

func (item *NetPID) Reset() {
	item.Ip = 0
	item.PortPid = 0
	item.Utime = 0
}

func (item *NetPID) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.Ip); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.PortPid); err != nil {
		return w, err
	}
	return basictl.NatRead(w, &item.Utime)
}

func (item *NetPID) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.Ip)
	w = basictl.NatWrite(w, item.PortPid)
	return basictl.NatWrite(w, item.Utime), nil
}

func (item *NetPID) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x723c414d); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *NetPID) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x723c414d)
	return item.Write(w)
}

func (item NetPID) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func NetPID__ReadJSON(item *NetPID, j interface{}) error { return item.readJSON(j) }
func (item *NetPID) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("netPID", "expected json object")
	}
	_jIp := _jm["ip"]
	delete(_jm, "ip")
	if err := JsonReadUint32(_jIp, &item.Ip); err != nil {
		return err
	}
	_jPortPid := _jm["port_pid"]
	delete(_jm, "port_pid")
	if err := JsonReadUint32(_jPortPid, &item.PortPid); err != nil {
		return err
	}
	_jUtime := _jm["utime"]
	delete(_jm, "utime")
	if err := JsonReadUint32(_jUtime, &item.Utime); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("netPID", k)
	}
	return nil
}

func (item *NetPID) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.Ip != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ip":`...)
		w = basictl.JSONWriteUint32(w, item.Ip)
	}
	if item.PortPid != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"port_pid":`...)
		w = basictl.JSONWriteUint32(w, item.PortPid)
	}
	if item.Utime != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"utime":`...)
		w = basictl.JSONWriteUint32(w, item.Utime)
	}
	return append(w, '}'), nil
}

func (item *NetPID) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *NetPID) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("netPID", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("netPID", err.Error())
	}
	return nil
}
