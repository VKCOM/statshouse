// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorNetUdpPacketResendRangeFillRandom(rg *basictl.RandGenerator, vec *[]NetUdpPacketResendRange) {
	rg.IncreaseDepth()
	l := rg.LimitValue(basictl.RandomUint(rg))
	*vec = make([]NetUdpPacketResendRange, l)
	for i := range *vec {
		(*vec)[i].FillRandom(rg)
	}
	rg.DecreaseDepth()
}
func BuiltinVectorNetUdpPacketResendRangeRead(w []byte, vec *[]NetUdpPacketResendRange) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]NetUdpPacketResendRange, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorNetUdpPacketResendRangeWrite(w []byte, vec []NetUdpPacketResendRange) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorNetUdpPacketResendRangeReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]NetUdpPacketResendRange) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]NetUdpPacketResendRange", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue NetUdpPacketResendRange
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]NetUdpPacketResendRange", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorNetUdpPacketResendRangeWriteJSON(w []byte, vec []NetUdpPacketResendRange) []byte {
	return BuiltinVectorNetUdpPacketResendRangeWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorNetUdpPacketResendRangeWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []NetUdpPacketResendRange) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']')
}

type NetUdpPacketResendRange struct {
	PacketNumFrom uint32
	PacketNumTo   uint32
}

func (NetUdpPacketResendRange) TLName() string { return "netUdpPacket.resendRange" }
func (NetUdpPacketResendRange) TLTag() uint32  { return 0x5efaad4a }

func (item *NetUdpPacketResendRange) Reset() {
	item.PacketNumFrom = 0
	item.PacketNumTo = 0
}

func (item *NetUdpPacketResendRange) FillRandom(rg *basictl.RandGenerator) {}

func (item *NetUdpPacketResendRange) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.PacketNumFrom); err != nil {
		return w, err
	}
	return basictl.NatRead(w, &item.PacketNumTo)
}

// This method is general version of Write, use it instead!
func (item *NetUdpPacketResendRange) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *NetUdpPacketResendRange) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.PacketNumFrom)
	w = basictl.NatWrite(w, item.PacketNumTo)
	return w
}

func (item *NetUdpPacketResendRange) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5efaad4a); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *NetUdpPacketResendRange) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *NetUdpPacketResendRange) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x5efaad4a)
	return item.Write(w)
}

func (item NetUdpPacketResendRange) String() string {
	return string(item.WriteJSON(nil))
}

func (item *NetUdpPacketResendRange) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propPacketNumFromPresented bool
	var propPacketNumToPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "packet_num_from":
				if propPacketNumFromPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("netUdpPacket.resendRange", "packet_num_from")
				}
				if err := Json2ReadUint32(in, &item.PacketNumFrom); err != nil {
					return err
				}
				propPacketNumFromPresented = true
			case "packet_num_to":
				if propPacketNumToPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("netUdpPacket.resendRange", "packet_num_to")
				}
				if err := Json2ReadUint32(in, &item.PacketNumTo); err != nil {
					return err
				}
				propPacketNumToPresented = true
			default:
				return ErrorInvalidJSONExcessElement("netUdpPacket.resendRange", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propPacketNumFromPresented {
		item.PacketNumFrom = 0
	}
	if !propPacketNumToPresented {
		item.PacketNumTo = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *NetUdpPacketResendRange) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *NetUdpPacketResendRange) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *NetUdpPacketResendRange) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexPacketNumFrom := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"packet_num_from":`...)
	w = basictl.JSONWriteUint32(w, item.PacketNumFrom)
	if (item.PacketNumFrom != 0) == false {
		w = w[:backupIndexPacketNumFrom]
	}
	backupIndexPacketNumTo := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"packet_num_to":`...)
	w = basictl.JSONWriteUint32(w, item.PacketNumTo)
	if (item.PacketNumTo != 0) == false {
		w = w[:backupIndexPacketNumTo]
	}
	return append(w, '}')
}

func (item *NetUdpPacketResendRange) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *NetUdpPacketResendRange) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("netUdpPacket.resendRange", err.Error())
	}
	return nil
}
