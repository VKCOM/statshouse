// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type RpcReqResultErrorWrapped struct {
	ErrorCode int32
	Error     string
}

func (RpcReqResultErrorWrapped) TLName() string { return "rpcReqResultErrorWrapped" }
func (RpcReqResultErrorWrapped) TLTag() uint32  { return 0x7ae432f6 }

func (item *RpcReqResultErrorWrapped) Reset() {
	item.ErrorCode = 0
	item.Error = ""
}

func (item *RpcReqResultErrorWrapped) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.ErrorCode); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.Error)
}

func (item *RpcReqResultErrorWrapped) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.ErrorCode)
	return basictl.StringWrite(w, item.Error)
}

func (item *RpcReqResultErrorWrapped) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x7ae432f6); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *RpcReqResultErrorWrapped) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x7ae432f6)
	return item.Write(w)
}

func (item RpcReqResultErrorWrapped) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func RpcReqResultErrorWrapped__ReadJSON(item *RpcReqResultErrorWrapped, j interface{}) error {
	return item.readJSON(j)
}
func (item *RpcReqResultErrorWrapped) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("rpcReqResultErrorWrapped", "expected json object")
	}
	_jErrorCode := _jm["error_code"]
	delete(_jm, "error_code")
	if err := JsonReadInt32(_jErrorCode, &item.ErrorCode); err != nil {
		return err
	}
	_jError := _jm["error"]
	delete(_jm, "error")
	if err := JsonReadString(_jError, &item.Error); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("rpcReqResultErrorWrapped", k)
	}
	return nil
}

func (item *RpcReqResultErrorWrapped) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *RpcReqResultErrorWrapped) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.ErrorCode != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"error_code":`...)
		w = basictl.JSONWriteInt32(w, item.ErrorCode)
	}
	if len(item.Error) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"error":`...)
		w = basictl.JSONWriteString(w, item.Error)
	}
	return append(w, '}'), nil
}

func (item *RpcReqResultErrorWrapped) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *RpcReqResultErrorWrapped) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("rpcReqResultErrorWrapped", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("rpcReqResultErrorWrapped", err.Error())
	}
	return nil
}
