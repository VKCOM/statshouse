// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type RpcReqResultHeader struct {
	QueryId int64
}

func (RpcReqResultHeader) TLName() string { return "rpcReqResultHeader" }
func (RpcReqResultHeader) TLTag() uint32  { return 0x63aeda4e }

func (item *RpcReqResultHeader) Reset() {
	item.QueryId = 0
}

func (item *RpcReqResultHeader) Read(w []byte) (_ []byte, err error) {
	return basictl.LongRead(w, &item.QueryId)
}

func (item *RpcReqResultHeader) Write(w []byte) (_ []byte, err error) {
	return basictl.LongWrite(w, item.QueryId), nil
}

func (item *RpcReqResultHeader) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x63aeda4e); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *RpcReqResultHeader) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x63aeda4e)
	return item.Write(w)
}

func (item RpcReqResultHeader) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *RpcReqResultHeader) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propQueryIdPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "query_id":
				if propQueryIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultHeader", "query_id")
				}
				if err := Json2ReadInt64(in, &item.QueryId); err != nil {
					return err
				}
				propQueryIdPresented = true
			default:
				return ErrorInvalidJSONExcessElement("rpcReqResultHeader", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propQueryIdPresented {
		item.QueryId = 0
	}
	return nil
}

func (item *RpcReqResultHeader) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *RpcReqResultHeader) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexQueryId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"query_id":`...)
	w = basictl.JSONWriteInt64(w, item.QueryId)
	if (item.QueryId != 0) == false {
		w = w[:backupIndexQueryId]
	}
	return append(w, '}'), nil
}

func (item *RpcReqResultHeader) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *RpcReqResultHeader) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("rpcReqResultHeader", err.Error())
	}
	return nil
}
