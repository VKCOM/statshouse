// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type RpcReqResultExtra struct {
	Flags              uint32
	BinlogPos          int64             // Conditional: item.Flags.0
	BinlogTime         int64             // Conditional: item.Flags.1
	EnginePid          NetPid            // Conditional: item.Flags.2
	RequestSize        int32             // Conditional: item.Flags.3
	ResponseSize       int32             // Conditional: item.Flags.3
	FailedSubqueries   int32             // Conditional: item.Flags.4
	CompressionVersion int32             // Conditional: item.Flags.5
	Stats              map[string]string // Conditional: item.Flags.6
	ShardsBinlogPos    map[string]int64  // Conditional: item.Flags.14
	EpochNumber        int64             // Conditional: item.Flags.27
	ViewNumber         int64             // Conditional: item.Flags.27
}

func (RpcReqResultExtra) TLName() string { return "rpcReqResultExtra" }
func (RpcReqResultExtra) TLTag() uint32  { return 0xc5011709 }

func (item *RpcReqResultExtra) SetBinlogPos(v int64) {
	item.BinlogPos = v
	item.Flags |= 1 << 0
}
func (item *RpcReqResultExtra) ClearBinlogPos() {
	item.BinlogPos = 0
	item.Flags &^= 1 << 0
}
func (item *RpcReqResultExtra) IsSetBinlogPos() bool { return item.Flags&(1<<0) != 0 }

func (item *RpcReqResultExtra) SetBinlogTime(v int64) {
	item.BinlogTime = v
	item.Flags |= 1 << 1
}
func (item *RpcReqResultExtra) ClearBinlogTime() {
	item.BinlogTime = 0
	item.Flags &^= 1 << 1
}
func (item *RpcReqResultExtra) IsSetBinlogTime() bool { return item.Flags&(1<<1) != 0 }

func (item *RpcReqResultExtra) SetEnginePid(v NetPid) {
	item.EnginePid = v
	item.Flags |= 1 << 2
}
func (item *RpcReqResultExtra) ClearEnginePid() {
	item.EnginePid.Reset()
	item.Flags &^= 1 << 2
}
func (item *RpcReqResultExtra) IsSetEnginePid() bool { return item.Flags&(1<<2) != 0 }

func (item *RpcReqResultExtra) SetRequestSize(v int32) {
	item.RequestSize = v
	item.Flags |= 1 << 3
}
func (item *RpcReqResultExtra) ClearRequestSize() {
	item.RequestSize = 0
	item.Flags &^= 1 << 3
}
func (item *RpcReqResultExtra) IsSetRequestSize() bool { return item.Flags&(1<<3) != 0 }

func (item *RpcReqResultExtra) SetResponseSize(v int32) {
	item.ResponseSize = v
	item.Flags |= 1 << 3
}
func (item *RpcReqResultExtra) ClearResponseSize() {
	item.ResponseSize = 0
	item.Flags &^= 1 << 3
}
func (item *RpcReqResultExtra) IsSetResponseSize() bool { return item.Flags&(1<<3) != 0 }

func (item *RpcReqResultExtra) SetFailedSubqueries(v int32) {
	item.FailedSubqueries = v
	item.Flags |= 1 << 4
}
func (item *RpcReqResultExtra) ClearFailedSubqueries() {
	item.FailedSubqueries = 0
	item.Flags &^= 1 << 4
}
func (item *RpcReqResultExtra) IsSetFailedSubqueries() bool { return item.Flags&(1<<4) != 0 }

func (item *RpcReqResultExtra) SetCompressionVersion(v int32) {
	item.CompressionVersion = v
	item.Flags |= 1 << 5
}
func (item *RpcReqResultExtra) ClearCompressionVersion() {
	item.CompressionVersion = 0
	item.Flags &^= 1 << 5
}
func (item *RpcReqResultExtra) IsSetCompressionVersion() bool { return item.Flags&(1<<5) != 0 }

func (item *RpcReqResultExtra) SetStats(v map[string]string) {
	item.Stats = v
	item.Flags |= 1 << 6
}
func (item *RpcReqResultExtra) ClearStats() {
	BuiltinVectorDictionaryFieldStringReset(item.Stats)
	item.Flags &^= 1 << 6
}
func (item *RpcReqResultExtra) IsSetStats() bool { return item.Flags&(1<<6) != 0 }

func (item *RpcReqResultExtra) SetShardsBinlogPos(v map[string]int64) {
	item.ShardsBinlogPos = v
	item.Flags |= 1 << 14
}
func (item *RpcReqResultExtra) ClearShardsBinlogPos() {
	BuiltinVectorDictionaryFieldLongReset(item.ShardsBinlogPos)
	item.Flags &^= 1 << 14
}
func (item *RpcReqResultExtra) IsSetShardsBinlogPos() bool { return item.Flags&(1<<14) != 0 }

func (item *RpcReqResultExtra) SetEpochNumber(v int64) {
	item.EpochNumber = v
	item.Flags |= 1 << 27
}
func (item *RpcReqResultExtra) ClearEpochNumber() {
	item.EpochNumber = 0
	item.Flags &^= 1 << 27
}
func (item *RpcReqResultExtra) IsSetEpochNumber() bool { return item.Flags&(1<<27) != 0 }

func (item *RpcReqResultExtra) SetViewNumber(v int64) {
	item.ViewNumber = v
	item.Flags |= 1 << 27
}
func (item *RpcReqResultExtra) ClearViewNumber() {
	item.ViewNumber = 0
	item.Flags &^= 1 << 27
}
func (item *RpcReqResultExtra) IsSetViewNumber() bool { return item.Flags&(1<<27) != 0 }

func (item *RpcReqResultExtra) Reset() {
	item.Flags = 0
	item.BinlogPos = 0
	item.BinlogTime = 0
	item.EnginePid.Reset()
	item.RequestSize = 0
	item.ResponseSize = 0
	item.FailedSubqueries = 0
	item.CompressionVersion = 0
	BuiltinVectorDictionaryFieldStringReset(item.Stats)
	BuiltinVectorDictionaryFieldLongReset(item.ShardsBinlogPos)
	item.EpochNumber = 0
	item.ViewNumber = 0
}

func (item *RpcReqResultExtra) FillRandom(rg *basictl.RandGenerator) {
	var maskFlags uint32
	maskFlags = basictl.RandomUint(rg)
	item.Flags = 0
	if maskFlags&(1<<0) != 0 {
		item.Flags |= (1 << 0)
	}
	if maskFlags&(1<<1) != 0 {
		item.Flags |= (1 << 1)
	}
	if maskFlags&(1<<2) != 0 {
		item.Flags |= (1 << 2)
	}
	if maskFlags&(1<<3) != 0 {
		item.Flags |= (1 << 3)
	}
	if maskFlags&(1<<4) != 0 {
		item.Flags |= (1 << 4)
	}
	if maskFlags&(1<<5) != 0 {
		item.Flags |= (1 << 5)
	}
	if maskFlags&(1<<6) != 0 {
		item.Flags |= (1 << 6)
	}
	if maskFlags&(1<<7) != 0 {
		item.Flags |= (1 << 14)
	}
	if maskFlags&(1<<8) != 0 {
		item.Flags |= (1 << 27)
	}
	if item.Flags&(1<<0) != 0 {
		item.BinlogPos = basictl.RandomLong(rg)
	} else {
		item.BinlogPos = 0
	}
	if item.Flags&(1<<1) != 0 {
		item.BinlogTime = basictl.RandomLong(rg)
	} else {
		item.BinlogTime = 0
	}
	if item.Flags&(1<<2) != 0 {
		item.EnginePid.FillRandom(rg)
	} else {
		item.EnginePid.Reset()
	}
	if item.Flags&(1<<3) != 0 {
		item.RequestSize = basictl.RandomInt(rg)
	} else {
		item.RequestSize = 0
	}
	if item.Flags&(1<<3) != 0 {
		item.ResponseSize = basictl.RandomInt(rg)
	} else {
		item.ResponseSize = 0
	}
	if item.Flags&(1<<4) != 0 {
		item.FailedSubqueries = basictl.RandomInt(rg)
	} else {
		item.FailedSubqueries = 0
	}
	if item.Flags&(1<<5) != 0 {
		item.CompressionVersion = basictl.RandomInt(rg)
	} else {
		item.CompressionVersion = 0
	}
	if item.Flags&(1<<6) != 0 {
		BuiltinVectorDictionaryFieldStringFillRandom(rg, &item.Stats)
	} else {
		BuiltinVectorDictionaryFieldStringReset(item.Stats)
	}
	if item.Flags&(1<<14) != 0 {
		BuiltinVectorDictionaryFieldLongFillRandom(rg, &item.ShardsBinlogPos)
	} else {
		BuiltinVectorDictionaryFieldLongReset(item.ShardsBinlogPos)
	}
	if item.Flags&(1<<27) != 0 {
		item.EpochNumber = basictl.RandomLong(rg)
	} else {
		item.EpochNumber = 0
	}
	if item.Flags&(1<<27) != 0 {
		item.ViewNumber = basictl.RandomLong(rg)
	} else {
		item.ViewNumber = 0
	}
}

func (item *RpcReqResultExtra) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.Flags); err != nil {
		return w, err
	}
	if item.Flags&(1<<0) != 0 {
		if w, err = basictl.LongRead(w, &item.BinlogPos); err != nil {
			return w, err
		}
	} else {
		item.BinlogPos = 0
	}
	if item.Flags&(1<<1) != 0 {
		if w, err = basictl.LongRead(w, &item.BinlogTime); err != nil {
			return w, err
		}
	} else {
		item.BinlogTime = 0
	}
	if item.Flags&(1<<2) != 0 {
		if w, err = item.EnginePid.Read(w); err != nil {
			return w, err
		}
	} else {
		item.EnginePid.Reset()
	}
	if item.Flags&(1<<3) != 0 {
		if w, err = basictl.IntRead(w, &item.RequestSize); err != nil {
			return w, err
		}
	} else {
		item.RequestSize = 0
	}
	if item.Flags&(1<<3) != 0 {
		if w, err = basictl.IntRead(w, &item.ResponseSize); err != nil {
			return w, err
		}
	} else {
		item.ResponseSize = 0
	}
	if item.Flags&(1<<4) != 0 {
		if w, err = basictl.IntRead(w, &item.FailedSubqueries); err != nil {
			return w, err
		}
	} else {
		item.FailedSubqueries = 0
	}
	if item.Flags&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.CompressionVersion); err != nil {
			return w, err
		}
	} else {
		item.CompressionVersion = 0
	}
	if item.Flags&(1<<6) != 0 {
		if w, err = BuiltinVectorDictionaryFieldStringRead(w, &item.Stats); err != nil {
			return w, err
		}
	} else {
		BuiltinVectorDictionaryFieldStringReset(item.Stats)
	}
	if item.Flags&(1<<14) != 0 {
		if w, err = BuiltinVectorDictionaryFieldLongRead(w, &item.ShardsBinlogPos); err != nil {
			return w, err
		}
	} else {
		BuiltinVectorDictionaryFieldLongReset(item.ShardsBinlogPos)
	}
	if item.Flags&(1<<27) != 0 {
		if w, err = basictl.LongRead(w, &item.EpochNumber); err != nil {
			return w, err
		}
	} else {
		item.EpochNumber = 0
	}
	if item.Flags&(1<<27) != 0 {
		if w, err = basictl.LongRead(w, &item.ViewNumber); err != nil {
			return w, err
		}
	} else {
		item.ViewNumber = 0
	}
	return w, nil
}

func (item *RpcReqResultExtra) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *RpcReqResultExtra) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.Flags)
	if item.Flags&(1<<0) != 0 {
		w = basictl.LongWrite(w, item.BinlogPos)
	}
	if item.Flags&(1<<1) != 0 {
		w = basictl.LongWrite(w, item.BinlogTime)
	}
	if item.Flags&(1<<2) != 0 {
		w = item.EnginePid.Write(w)
	}
	if item.Flags&(1<<3) != 0 {
		w = basictl.IntWrite(w, item.RequestSize)
	}
	if item.Flags&(1<<3) != 0 {
		w = basictl.IntWrite(w, item.ResponseSize)
	}
	if item.Flags&(1<<4) != 0 {
		w = basictl.IntWrite(w, item.FailedSubqueries)
	}
	if item.Flags&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.CompressionVersion)
	}
	if item.Flags&(1<<6) != 0 {
		w = BuiltinVectorDictionaryFieldStringWrite(w, item.Stats)
	}
	if item.Flags&(1<<14) != 0 {
		w = BuiltinVectorDictionaryFieldLongWrite(w, item.ShardsBinlogPos)
	}
	if item.Flags&(1<<27) != 0 {
		w = basictl.LongWrite(w, item.EpochNumber)
	}
	if item.Flags&(1<<27) != 0 {
		w = basictl.LongWrite(w, item.ViewNumber)
	}
	return w
}

func (item *RpcReqResultExtra) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc5011709); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *RpcReqResultExtra) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *RpcReqResultExtra) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xc5011709)
	return item.Write(w)
}

func (item RpcReqResultExtra) String() string {
	return string(item.WriteJSON(nil))
}

func (item *RpcReqResultExtra) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFlagsPresented bool
	var propBinlogPosPresented bool
	var propBinlogTimePresented bool
	var propEnginePidPresented bool
	var propRequestSizePresented bool
	var propResponseSizePresented bool
	var propFailedSubqueriesPresented bool
	var propCompressionVersionPresented bool
	var propStatsPresented bool
	var propShardsBinlogPosPresented bool
	var propEpochNumberPresented bool
	var propViewNumberPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "flags":
				if propFlagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "flags")
				}
				if err := Json2ReadUint32(in, &item.Flags); err != nil {
					return err
				}
				propFlagsPresented = true
			case "binlog_pos":
				if propBinlogPosPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "binlog_pos")
				}
				if err := Json2ReadInt64(in, &item.BinlogPos); err != nil {
					return err
				}
				propBinlogPosPresented = true
			case "binlog_time":
				if propBinlogTimePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "binlog_time")
				}
				if err := Json2ReadInt64(in, &item.BinlogTime); err != nil {
					return err
				}
				propBinlogTimePresented = true
			case "engine_pid":
				if propEnginePidPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "engine_pid")
				}
				if err := item.EnginePid.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propEnginePidPresented = true
			case "request_size":
				if propRequestSizePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "request_size")
				}
				if err := Json2ReadInt32(in, &item.RequestSize); err != nil {
					return err
				}
				propRequestSizePresented = true
			case "response_size":
				if propResponseSizePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "response_size")
				}
				if err := Json2ReadInt32(in, &item.ResponseSize); err != nil {
					return err
				}
				propResponseSizePresented = true
			case "failed_subqueries":
				if propFailedSubqueriesPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "failed_subqueries")
				}
				if err := Json2ReadInt32(in, &item.FailedSubqueries); err != nil {
					return err
				}
				propFailedSubqueriesPresented = true
			case "compression_version":
				if propCompressionVersionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "compression_version")
				}
				if err := Json2ReadInt32(in, &item.CompressionVersion); err != nil {
					return err
				}
				propCompressionVersionPresented = true
			case "stats":
				if propStatsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "stats")
				}
				if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, &item.Stats); err != nil {
					return err
				}
				propStatsPresented = true
			case "shards_binlog_pos":
				if propShardsBinlogPosPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "shards_binlog_pos")
				}
				if err := BuiltinVectorDictionaryFieldLongReadJSON(legacyTypeNames, in, &item.ShardsBinlogPos); err != nil {
					return err
				}
				propShardsBinlogPosPresented = true
			case "epoch_number":
				if propEpochNumberPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "epoch_number")
				}
				if err := Json2ReadInt64(in, &item.EpochNumber); err != nil {
					return err
				}
				propEpochNumberPresented = true
			case "view_number":
				if propViewNumberPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcReqResultExtra", "view_number")
				}
				if err := Json2ReadInt64(in, &item.ViewNumber); err != nil {
					return err
				}
				propViewNumberPresented = true
			default:
				return ErrorInvalidJSONExcessElement("rpcReqResultExtra", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFlagsPresented {
		item.Flags = 0
	}
	if !propBinlogPosPresented {
		item.BinlogPos = 0
	}
	if !propBinlogTimePresented {
		item.BinlogTime = 0
	}
	if !propEnginePidPresented {
		item.EnginePid.Reset()
	}
	if !propRequestSizePresented {
		item.RequestSize = 0
	}
	if !propResponseSizePresented {
		item.ResponseSize = 0
	}
	if !propFailedSubqueriesPresented {
		item.FailedSubqueries = 0
	}
	if !propCompressionVersionPresented {
		item.CompressionVersion = 0
	}
	if !propStatsPresented {
		BuiltinVectorDictionaryFieldStringReset(item.Stats)
	}
	if !propShardsBinlogPosPresented {
		BuiltinVectorDictionaryFieldLongReset(item.ShardsBinlogPos)
	}
	if !propEpochNumberPresented {
		item.EpochNumber = 0
	}
	if !propViewNumberPresented {
		item.ViewNumber = 0
	}
	if propBinlogPosPresented {
		item.Flags |= 1 << 0
	}
	if propBinlogTimePresented {
		item.Flags |= 1 << 1
	}
	if propEnginePidPresented {
		item.Flags |= 1 << 2
	}
	if propRequestSizePresented {
		item.Flags |= 1 << 3
	}
	if propResponseSizePresented {
		item.Flags |= 1 << 3
	}
	if propFailedSubqueriesPresented {
		item.Flags |= 1 << 4
	}
	if propCompressionVersionPresented {
		item.Flags |= 1 << 5
	}
	if propStatsPresented {
		item.Flags |= 1 << 6
	}
	if propShardsBinlogPosPresented {
		item.Flags |= 1 << 14
	}
	if propEpochNumberPresented {
		item.Flags |= 1 << 27
	}
	if propViewNumberPresented {
		item.Flags |= 1 << 27
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *RpcReqResultExtra) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *RpcReqResultExtra) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *RpcReqResultExtra) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFlags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"flags":`...)
	w = basictl.JSONWriteUint32(w, item.Flags)
	if (item.Flags != 0) == false {
		w = w[:backupIndexFlags]
	}
	if item.Flags&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"binlog_pos":`...)
		w = basictl.JSONWriteInt64(w, item.BinlogPos)
	}
	if item.Flags&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"binlog_time":`...)
		w = basictl.JSONWriteInt64(w, item.BinlogTime)
	}
	if item.Flags&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"engine_pid":`...)
		w = item.EnginePid.WriteJSONOpt(newTypeNames, short, w)
	}
	if item.Flags&(1<<3) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"request_size":`...)
		w = basictl.JSONWriteInt32(w, item.RequestSize)
	}
	if item.Flags&(1<<3) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"response_size":`...)
		w = basictl.JSONWriteInt32(w, item.ResponseSize)
	}
	if item.Flags&(1<<4) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"failed_subqueries":`...)
		w = basictl.JSONWriteInt32(w, item.FailedSubqueries)
	}
	if item.Flags&(1<<5) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"compression_version":`...)
		w = basictl.JSONWriteInt32(w, item.CompressionVersion)
	}
	if item.Flags&(1<<6) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"stats":`...)
		w = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, item.Stats)
	}
	if item.Flags&(1<<14) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"shards_binlog_pos":`...)
		w = BuiltinVectorDictionaryFieldLongWriteJSONOpt(newTypeNames, short, w, item.ShardsBinlogPos)
	}
	if item.Flags&(1<<27) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"epoch_number":`...)
		w = basictl.JSONWriteInt64(w, item.EpochNumber)
	}
	if item.Flags&(1<<27) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"view_number":`...)
		w = basictl.JSONWriteInt64(w, item.ViewNumber)
	}
	return append(w, '}')
}

func (item *RpcReqResultExtra) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *RpcReqResultExtra) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("rpcReqResultExtra", err.Error())
	}
	return nil
}
