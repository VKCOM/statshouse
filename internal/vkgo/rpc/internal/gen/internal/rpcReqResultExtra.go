// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type RpcReqResultExtra struct {
	Flags              uint32
	BinlogPos          int64             // Conditional: item.Flags.0
	BinlogTime         int64             // Conditional: item.Flags.1
	EnginePid          NetPid            // Conditional: item.Flags.2
	RequestSize        int32             // Conditional: item.Flags.3
	ResponseSize       int32             // Conditional: item.Flags.3
	FailedSubqueries   int32             // Conditional: item.Flags.4
	CompressionVersion int32             // Conditional: item.Flags.5
	Stats              map[string]string // Conditional: item.Flags.6
	ShardsBinlogPos    map[string]int64  // Conditional: item.Flags.8
	EpochNumber        int64             // Conditional: item.Flags.27
	ViewNumber         int64             // Conditional: item.Flags.27
}

func (RpcReqResultExtra) TLName() string { return "rpcReqResultExtra" }
func (RpcReqResultExtra) TLTag() uint32  { return 0xc5011709 }

func (item *RpcReqResultExtra) SetBinlogPos(v int64) {
	item.BinlogPos = v
	item.Flags |= 1 << 0
}
func (item *RpcReqResultExtra) ClearBinlogPos() {
	item.BinlogPos = 0
	item.Flags &^= 1 << 0
}
func (item RpcReqResultExtra) IsSetBinlogPos() bool { return item.Flags&(1<<0) != 0 }

func (item *RpcReqResultExtra) SetBinlogTime(v int64) {
	item.BinlogTime = v
	item.Flags |= 1 << 1
}
func (item *RpcReqResultExtra) ClearBinlogTime() {
	item.BinlogTime = 0
	item.Flags &^= 1 << 1
}
func (item RpcReqResultExtra) IsSetBinlogTime() bool { return item.Flags&(1<<1) != 0 }

func (item *RpcReqResultExtra) SetEnginePid(v NetPid) {
	item.EnginePid = v
	item.Flags |= 1 << 2
}
func (item *RpcReqResultExtra) ClearEnginePid() {
	item.EnginePid.Reset()
	item.Flags &^= 1 << 2
}
func (item RpcReqResultExtra) IsSetEnginePid() bool { return item.Flags&(1<<2) != 0 }

func (item *RpcReqResultExtra) SetRequestSize(v int32) {
	item.RequestSize = v
	item.Flags |= 1 << 3
}
func (item *RpcReqResultExtra) ClearRequestSize() {
	item.RequestSize = 0
	item.Flags &^= 1 << 3
}
func (item RpcReqResultExtra) IsSetRequestSize() bool { return item.Flags&(1<<3) != 0 }

func (item *RpcReqResultExtra) SetResponseSize(v int32) {
	item.ResponseSize = v
	item.Flags |= 1 << 3
}
func (item *RpcReqResultExtra) ClearResponseSize() {
	item.ResponseSize = 0
	item.Flags &^= 1 << 3
}
func (item RpcReqResultExtra) IsSetResponseSize() bool { return item.Flags&(1<<3) != 0 }

func (item *RpcReqResultExtra) SetFailedSubqueries(v int32) {
	item.FailedSubqueries = v
	item.Flags |= 1 << 4
}
func (item *RpcReqResultExtra) ClearFailedSubqueries() {
	item.FailedSubqueries = 0
	item.Flags &^= 1 << 4
}
func (item RpcReqResultExtra) IsSetFailedSubqueries() bool { return item.Flags&(1<<4) != 0 }

func (item *RpcReqResultExtra) SetCompressionVersion(v int32) {
	item.CompressionVersion = v
	item.Flags |= 1 << 5
}
func (item *RpcReqResultExtra) ClearCompressionVersion() {
	item.CompressionVersion = 0
	item.Flags &^= 1 << 5
}
func (item RpcReqResultExtra) IsSetCompressionVersion() bool { return item.Flags&(1<<5) != 0 }

func (item *RpcReqResultExtra) SetStats(v map[string]string) {
	item.Stats = v
	item.Flags |= 1 << 6
}
func (item *RpcReqResultExtra) ClearStats() {
	BuiltinVectorDictionaryFieldStringReset(item.Stats)
	item.Flags &^= 1 << 6
}
func (item RpcReqResultExtra) IsSetStats() bool { return item.Flags&(1<<6) != 0 }

func (item *RpcReqResultExtra) SetShardsBinlogPos(v map[string]int64) {
	item.ShardsBinlogPos = v
	item.Flags |= 1 << 8
}
func (item *RpcReqResultExtra) ClearShardsBinlogPos() {
	BuiltinVectorDictionaryFieldLongReset(item.ShardsBinlogPos)
	item.Flags &^= 1 << 8
}
func (item RpcReqResultExtra) IsSetShardsBinlogPos() bool { return item.Flags&(1<<8) != 0 }

func (item *RpcReqResultExtra) SetEpochNumber(v int64) {
	item.EpochNumber = v
	item.Flags |= 1 << 27
}
func (item *RpcReqResultExtra) ClearEpochNumber() {
	item.EpochNumber = 0
	item.Flags &^= 1 << 27
}
func (item RpcReqResultExtra) IsSetEpochNumber() bool { return item.Flags&(1<<27) != 0 }

func (item *RpcReqResultExtra) SetViewNumber(v int64) {
	item.ViewNumber = v
	item.Flags |= 1 << 27
}
func (item *RpcReqResultExtra) ClearViewNumber() {
	item.ViewNumber = 0
	item.Flags &^= 1 << 27
}
func (item RpcReqResultExtra) IsSetViewNumber() bool { return item.Flags&(1<<27) != 0 }

func (item *RpcReqResultExtra) Reset() {
	item.Flags = 0
	item.BinlogPos = 0
	item.BinlogTime = 0
	item.EnginePid.Reset()
	item.RequestSize = 0
	item.ResponseSize = 0
	item.FailedSubqueries = 0
	item.CompressionVersion = 0
	BuiltinVectorDictionaryFieldStringReset(item.Stats)
	BuiltinVectorDictionaryFieldLongReset(item.ShardsBinlogPos)
	item.EpochNumber = 0
	item.ViewNumber = 0
}

func (item *RpcReqResultExtra) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.Flags); err != nil {
		return w, err
	}
	if item.Flags&(1<<0) != 0 {
		if w, err = basictl.LongRead(w, &item.BinlogPos); err != nil {
			return w, err
		}
	} else {
		item.BinlogPos = 0
	}
	if item.Flags&(1<<1) != 0 {
		if w, err = basictl.LongRead(w, &item.BinlogTime); err != nil {
			return w, err
		}
	} else {
		item.BinlogTime = 0
	}
	if item.Flags&(1<<2) != 0 {
		if w, err = item.EnginePid.Read(w); err != nil {
			return w, err
		}
	} else {
		item.EnginePid.Reset()
	}
	if item.Flags&(1<<3) != 0 {
		if w, err = basictl.IntRead(w, &item.RequestSize); err != nil {
			return w, err
		}
	} else {
		item.RequestSize = 0
	}
	if item.Flags&(1<<3) != 0 {
		if w, err = basictl.IntRead(w, &item.ResponseSize); err != nil {
			return w, err
		}
	} else {
		item.ResponseSize = 0
	}
	if item.Flags&(1<<4) != 0 {
		if w, err = basictl.IntRead(w, &item.FailedSubqueries); err != nil {
			return w, err
		}
	} else {
		item.FailedSubqueries = 0
	}
	if item.Flags&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.CompressionVersion); err != nil {
			return w, err
		}
	} else {
		item.CompressionVersion = 0
	}
	if item.Flags&(1<<6) != 0 {
		if w, err = BuiltinVectorDictionaryFieldStringRead(w, &item.Stats); err != nil {
			return w, err
		}
	} else {
		BuiltinVectorDictionaryFieldStringReset(item.Stats)
	}
	if item.Flags&(1<<8) != 0 {
		if w, err = BuiltinVectorDictionaryFieldLongRead(w, &item.ShardsBinlogPos); err != nil {
			return w, err
		}
	} else {
		BuiltinVectorDictionaryFieldLongReset(item.ShardsBinlogPos)
	}
	if item.Flags&(1<<27) != 0 {
		if w, err = basictl.LongRead(w, &item.EpochNumber); err != nil {
			return w, err
		}
	} else {
		item.EpochNumber = 0
	}
	if item.Flags&(1<<27) != 0 {
		if w, err = basictl.LongRead(w, &item.ViewNumber); err != nil {
			return w, err
		}
	} else {
		item.ViewNumber = 0
	}
	return w, nil
}

func (item *RpcReqResultExtra) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.Flags)
	if item.Flags&(1<<0) != 0 {
		w = basictl.LongWrite(w, item.BinlogPos)
	}
	if item.Flags&(1<<1) != 0 {
		w = basictl.LongWrite(w, item.BinlogTime)
	}
	if item.Flags&(1<<2) != 0 {
		if w, err = item.EnginePid.Write(w); err != nil {
			return w, err
		}
	}
	if item.Flags&(1<<3) != 0 {
		w = basictl.IntWrite(w, item.RequestSize)
	}
	if item.Flags&(1<<3) != 0 {
		w = basictl.IntWrite(w, item.ResponseSize)
	}
	if item.Flags&(1<<4) != 0 {
		w = basictl.IntWrite(w, item.FailedSubqueries)
	}
	if item.Flags&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.CompressionVersion)
	}
	if item.Flags&(1<<6) != 0 {
		if w, err = BuiltinVectorDictionaryFieldStringWrite(w, item.Stats); err != nil {
			return w, err
		}
	}
	if item.Flags&(1<<8) != 0 {
		if w, err = BuiltinVectorDictionaryFieldLongWrite(w, item.ShardsBinlogPos); err != nil {
			return w, err
		}
	}
	if item.Flags&(1<<27) != 0 {
		w = basictl.LongWrite(w, item.EpochNumber)
	}
	if item.Flags&(1<<27) != 0 {
		w = basictl.LongWrite(w, item.ViewNumber)
	}
	return w, nil
}

func (item *RpcReqResultExtra) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc5011709); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *RpcReqResultExtra) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0xc5011709)
	return item.Write(w)
}

func (item RpcReqResultExtra) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *RpcReqResultExtra) ReadJSONLegacy(legacyTypeNames bool, j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("rpcReqResultExtra", "expected json object")
	}
	_jFlags := _jm["flags"]
	delete(_jm, "flags")
	if err := JsonReadUint32(_jFlags, &item.Flags); err != nil {
		return err
	}
	_jBinlogPos := _jm["binlog_pos"]
	delete(_jm, "binlog_pos")
	_jBinlogTime := _jm["binlog_time"]
	delete(_jm, "binlog_time")
	_jEnginePid := _jm["engine_pid"]
	delete(_jm, "engine_pid")
	_jRequestSize := _jm["request_size"]
	delete(_jm, "request_size")
	_jResponseSize := _jm["response_size"]
	delete(_jm, "response_size")
	_jFailedSubqueries := _jm["failed_subqueries"]
	delete(_jm, "failed_subqueries")
	_jCompressionVersion := _jm["compression_version"]
	delete(_jm, "compression_version")
	_jStats := _jm["stats"]
	delete(_jm, "stats")
	_jShardsBinlogPos := _jm["shards_binlog_pos"]
	delete(_jm, "shards_binlog_pos")
	_jEpochNumber := _jm["epoch_number"]
	delete(_jm, "epoch_number")
	_jViewNumber := _jm["view_number"]
	delete(_jm, "view_number")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("rpcReqResultExtra", k)
	}
	if _jBinlogPos != nil {
		item.Flags |= 1 << 0
	}
	if _jBinlogTime != nil {
		item.Flags |= 1 << 1
	}
	if _jEnginePid != nil {
		item.Flags |= 1 << 2
	}
	if _jRequestSize != nil {
		item.Flags |= 1 << 3
	}
	if _jResponseSize != nil {
		item.Flags |= 1 << 3
	}
	if _jFailedSubqueries != nil {
		item.Flags |= 1 << 4
	}
	if _jCompressionVersion != nil {
		item.Flags |= 1 << 5
	}
	if _jStats != nil {
		item.Flags |= 1 << 6
	}
	if _jShardsBinlogPos != nil {
		item.Flags |= 1 << 8
	}
	if _jEpochNumber != nil {
		item.Flags |= 1 << 27
	}
	if _jViewNumber != nil {
		item.Flags |= 1 << 27
	}
	if _jBinlogPos != nil {
		if err := JsonReadInt64(_jBinlogPos, &item.BinlogPos); err != nil {
			return err
		}
	} else {
		item.BinlogPos = 0
	}
	if _jBinlogTime != nil {
		if err := JsonReadInt64(_jBinlogTime, &item.BinlogTime); err != nil {
			return err
		}
	} else {
		item.BinlogTime = 0
	}
	if _jEnginePid != nil {
		if err := item.EnginePid.ReadJSONLegacy(legacyTypeNames, _jEnginePid); err != nil {
			return err
		}
	} else {
		item.EnginePid.Reset()
	}
	if _jRequestSize != nil {
		if err := JsonReadInt32(_jRequestSize, &item.RequestSize); err != nil {
			return err
		}
	} else {
		item.RequestSize = 0
	}
	if _jResponseSize != nil {
		if err := JsonReadInt32(_jResponseSize, &item.ResponseSize); err != nil {
			return err
		}
	} else {
		item.ResponseSize = 0
	}
	if _jFailedSubqueries != nil {
		if err := JsonReadInt32(_jFailedSubqueries, &item.FailedSubqueries); err != nil {
			return err
		}
	} else {
		item.FailedSubqueries = 0
	}
	if _jCompressionVersion != nil {
		if err := JsonReadInt32(_jCompressionVersion, &item.CompressionVersion); err != nil {
			return err
		}
	} else {
		item.CompressionVersion = 0
	}
	if _jStats != nil {
		if err := BuiltinVectorDictionaryFieldStringReadJSONLegacy(legacyTypeNames, _jStats, &item.Stats); err != nil {
			return err
		}
	} else {
		BuiltinVectorDictionaryFieldStringReset(item.Stats)
	}
	if _jShardsBinlogPos != nil {
		if err := BuiltinVectorDictionaryFieldLongReadJSONLegacy(legacyTypeNames, _jShardsBinlogPos, &item.ShardsBinlogPos); err != nil {
			return err
		}
	} else {
		BuiltinVectorDictionaryFieldLongReset(item.ShardsBinlogPos)
	}
	if _jEpochNumber != nil {
		if err := JsonReadInt64(_jEpochNumber, &item.EpochNumber); err != nil {
			return err
		}
	} else {
		item.EpochNumber = 0
	}
	if _jViewNumber != nil {
		if err := JsonReadInt64(_jViewNumber, &item.ViewNumber); err != nil {
			return err
		}
	} else {
		item.ViewNumber = 0
	}
	return nil
}

func (item *RpcReqResultExtra) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *RpcReqResultExtra) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.Flags != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"flags":`...)
		w = basictl.JSONWriteUint32(w, item.Flags)
	}
	if item.Flags&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"binlog_pos":`...)
		w = basictl.JSONWriteInt64(w, item.BinlogPos)
	}
	if item.Flags&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"binlog_time":`...)
		w = basictl.JSONWriteInt64(w, item.BinlogTime)
	}
	if item.Flags&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"engine_pid":`...)
		if w, err = item.EnginePid.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
	}
	if item.Flags&(1<<3) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"request_size":`...)
		w = basictl.JSONWriteInt32(w, item.RequestSize)
	}
	if item.Flags&(1<<3) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"response_size":`...)
		w = basictl.JSONWriteInt32(w, item.ResponseSize)
	}
	if item.Flags&(1<<4) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"failed_subqueries":`...)
		w = basictl.JSONWriteInt32(w, item.FailedSubqueries)
	}
	if item.Flags&(1<<5) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"compression_version":`...)
		w = basictl.JSONWriteInt32(w, item.CompressionVersion)
	}
	if item.Flags&(1<<6) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"stats":`...)
		if w, err = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, item.Stats); err != nil {
			return w, err
		}
	}
	if item.Flags&(1<<8) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"shards_binlog_pos":`...)
		if w, err = BuiltinVectorDictionaryFieldLongWriteJSONOpt(newTypeNames, short, w, item.ShardsBinlogPos); err != nil {
			return w, err
		}
	}
	if item.Flags&(1<<27) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"epoch_number":`...)
		w = basictl.JSONWriteInt64(w, item.EpochNumber)
	}
	if item.Flags&(1<<27) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"view_number":`...)
		w = basictl.JSONWriteInt64(w, item.ViewNumber)
	}
	return append(w, '}'), nil
}

func (item *RpcReqResultExtra) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *RpcReqResultExtra) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("rpcReqResultExtra", err.Error())
	}
	if err = item.ReadJSONLegacy(true, j); err != nil {
		return ErrorInvalidJSON("rpcReqResultExtra", err.Error())
	}
	return nil
}
