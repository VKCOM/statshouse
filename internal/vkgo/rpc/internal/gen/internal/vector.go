// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type Vector []uint32

func (Vector) TLName() string { return "vector" }
func (Vector) TLTag() uint32  { return 0x1cb5c415 }

func (item *Vector) Reset() {
	ptr := (*[]uint32)(item)
	*ptr = (*ptr)[:0]
}

func (item *Vector) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]uint32)(item)
	BuiltinVectorFillRandom(rg, ptr)
}

func (item *Vector) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]uint32)(item)
	return BuiltinVectorRead(w, ptr)
}

func (item *Vector) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Vector) Write(w []byte) []byte {
	ptr := (*[]uint32)(item)
	return BuiltinVectorWrite(w, *ptr)
}

func (item *Vector) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *Vector) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Vector) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item Vector) String() string {
	return string(item.WriteJSON(nil))
}
func (item *Vector) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]uint32)(item)
	if err := BuiltinVectorReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Vector) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *Vector) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *Vector) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]uint32)(item)
	w = BuiltinVectorWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *Vector) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Vector) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDictionaryFieldLong map[string]int64

func (VectorDictionaryFieldLong) TLName() string { return "vector" }
func (VectorDictionaryFieldLong) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldLong) Reset() {
	ptr := (*map[string]int64)(item)
	BuiltinVectorDictionaryFieldLongReset(*ptr)
}

func (item *VectorDictionaryFieldLong) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*map[string]int64)(item)
	BuiltinVectorDictionaryFieldLongFillRandom(rg, ptr)
}

func (item *VectorDictionaryFieldLong) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]int64)(item)
	return BuiltinVectorDictionaryFieldLongRead(w, ptr)
}

func (item *VectorDictionaryFieldLong) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorDictionaryFieldLong) Write(w []byte) []byte {
	ptr := (*map[string]int64)(item)
	return BuiltinVectorDictionaryFieldLongWrite(w, *ptr)
}

func (item *VectorDictionaryFieldLong) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorDictionaryFieldLong) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorDictionaryFieldLong) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldLong) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorDictionaryFieldLong) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*map[string]int64)(item)
	if err := BuiltinVectorDictionaryFieldLongReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDictionaryFieldLong) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorDictionaryFieldLong) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorDictionaryFieldLong) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*map[string]int64)(item)
	w = BuiltinVectorDictionaryFieldLongWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorDictionaryFieldLong) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorDictionaryFieldLong) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDictionaryFieldString map[string]string

func (VectorDictionaryFieldString) TLName() string { return "vector" }
func (VectorDictionaryFieldString) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldString) Reset() {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringReset(*ptr)
}

func (item *VectorDictionaryFieldString) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringFillRandom(rg, ptr)
}

func (item *VectorDictionaryFieldString) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringRead(w, ptr)
}

func (item *VectorDictionaryFieldString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorDictionaryFieldString) Write(w []byte) []byte {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringWrite(w, *ptr)
}

func (item *VectorDictionaryFieldString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorDictionaryFieldString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorDictionaryFieldString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldString) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorDictionaryFieldString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*map[string]string)(item)
	if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDictionaryFieldString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorDictionaryFieldString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorDictionaryFieldString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*map[string]string)(item)
	w = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorDictionaryFieldString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorDictionaryFieldString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorLong []int64

func (VectorLong) TLName() string { return "vector" }
func (VectorLong) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorLong) Reset() {
	ptr := (*[]int64)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorLong) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]int64)(item)
	BuiltinVectorLongFillRandom(rg, ptr)
}

func (item *VectorLong) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]int64)(item)
	return BuiltinVectorLongRead(w, ptr)
}

func (item *VectorLong) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorLong) Write(w []byte) []byte {
	ptr := (*[]int64)(item)
	return BuiltinVectorLongWrite(w, *ptr)
}

func (item *VectorLong) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorLong) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorLong) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorLong) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorLong) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]int64)(item)
	if err := BuiltinVectorLongReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorLong) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorLong) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorLong) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]int64)(item)
	w = BuiltinVectorLongWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorLong) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorLong) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorNetUdpPacketResendRange []NetUdpPacketResendRange

func (VectorNetUdpPacketResendRange) TLName() string { return "vector" }
func (VectorNetUdpPacketResendRange) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorNetUdpPacketResendRange) Reset() {
	ptr := (*[]NetUdpPacketResendRange)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorNetUdpPacketResendRange) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]NetUdpPacketResendRange)(item)
	BuiltinVectorNetUdpPacketResendRangeFillRandom(rg, ptr)
}

func (item *VectorNetUdpPacketResendRange) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]NetUdpPacketResendRange)(item)
	return BuiltinVectorNetUdpPacketResendRangeRead(w, ptr)
}

func (item *VectorNetUdpPacketResendRange) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorNetUdpPacketResendRange) Write(w []byte) []byte {
	ptr := (*[]NetUdpPacketResendRange)(item)
	return BuiltinVectorNetUdpPacketResendRangeWrite(w, *ptr)
}

func (item *VectorNetUdpPacketResendRange) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorNetUdpPacketResendRange) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorNetUdpPacketResendRange) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorNetUdpPacketResendRange) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorNetUdpPacketResendRange) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]NetUdpPacketResendRange)(item)
	if err := BuiltinVectorNetUdpPacketResendRangeReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorNetUdpPacketResendRange) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorNetUdpPacketResendRange) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorNetUdpPacketResendRange) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]NetUdpPacketResendRange)(item)
	w = BuiltinVectorNetUdpPacketResendRangeWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorNetUdpPacketResendRange) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorNetUdpPacketResendRange) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorString []string

func (VectorString) TLName() string { return "vector" }
func (VectorString) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorString) Reset() {
	ptr := (*[]string)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorString) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]string)(item)
	BuiltinVectorStringFillRandom(rg, ptr)
}

func (item *VectorString) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]string)(item)
	return BuiltinVectorStringRead(w, ptr)
}

func (item *VectorString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorString) Write(w []byte) []byte {
	ptr := (*[]string)(item)
	return BuiltinVectorStringWrite(w, *ptr)
}

func (item *VectorString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorString) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]string)(item)
	if err := BuiltinVectorStringReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]string)(item)
	w = BuiltinVectorStringWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}
