// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type VectorDictionaryFieldLong map[string]int64

func (VectorDictionaryFieldLong) TLName() string { return "vector" }
func (VectorDictionaryFieldLong) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldLong) Reset() {
	ptr := (*map[string]int64)(item)
	BuiltinVectorDictionaryFieldLongReset(*ptr)
}

func (item *VectorDictionaryFieldLong) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]int64)(item)
	return BuiltinVectorDictionaryFieldLongRead(w, ptr)
}

func (item *VectorDictionaryFieldLong) Write(w []byte) (_ []byte, err error) {
	ptr := (*map[string]int64)(item)
	return BuiltinVectorDictionaryFieldLongWrite(w, *ptr)
}

func (item *VectorDictionaryFieldLong) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorDictionaryFieldLong) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldLong) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorDictionaryFieldLong__ReadJSON(item *VectorDictionaryFieldLong, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorDictionaryFieldLong) readJSON(j interface{}) error {
	ptr := (*map[string]int64)(item)
	if err := BuiltinVectorDictionaryFieldLongReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorDictionaryFieldLong) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}

func (item *VectorDictionaryFieldLong) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	ptr := (*map[string]int64)(item)
	if w, err = BuiltinVectorDictionaryFieldLongWriteJSONOpt(short, w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorDictionaryFieldLong) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorDictionaryFieldLong) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDictionaryFieldString map[string]string

func (VectorDictionaryFieldString) TLName() string { return "vector" }
func (VectorDictionaryFieldString) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldString) Reset() {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringReset(*ptr)
}

func (item *VectorDictionaryFieldString) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringRead(w, ptr)
}

func (item *VectorDictionaryFieldString) Write(w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringWrite(w, *ptr)
}

func (item *VectorDictionaryFieldString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorDictionaryFieldString) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldString) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorDictionaryFieldString__ReadJSON(item *VectorDictionaryFieldString, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorDictionaryFieldString) readJSON(j interface{}) error {
	ptr := (*map[string]string)(item)
	if err := BuiltinVectorDictionaryFieldStringReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorDictionaryFieldString) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}

func (item *VectorDictionaryFieldString) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	if w, err = BuiltinVectorDictionaryFieldStringWriteJSONOpt(short, w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorDictionaryFieldString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorDictionaryFieldString) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorInt []int32

func (VectorInt) TLName() string { return "vector" }
func (VectorInt) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorInt) Reset() {
	ptr := (*[]int32)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorInt) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	return BuiltinVectorIntRead(w, ptr)
}

func (item *VectorInt) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	return BuiltinVectorIntWrite(w, *ptr)
}

func (item *VectorInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorInt) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorInt) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorInt__ReadJSON(item *VectorInt, j interface{}) error { return item.readJSON(j) }
func (item *VectorInt) readJSON(j interface{}) error {
	ptr := (*[]int32)(item)
	if err := BuiltinVectorIntReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorInt) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}

func (item *VectorInt) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	if w, err = BuiltinVectorIntWriteJSONOpt(short, w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorInt) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorLong []int64

func (VectorLong) TLName() string { return "vector" }
func (VectorLong) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorLong) Reset() {
	ptr := (*[]int64)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorLong) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]int64)(item)
	return BuiltinVectorLongRead(w, ptr)
}

func (item *VectorLong) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]int64)(item)
	return BuiltinVectorLongWrite(w, *ptr)
}

func (item *VectorLong) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorLong) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorLong) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorLong__ReadJSON(item *VectorLong, j interface{}) error { return item.readJSON(j) }
func (item *VectorLong) readJSON(j interface{}) error {
	ptr := (*[]int64)(item)
	if err := BuiltinVectorLongReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorLong) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}

func (item *VectorLong) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	ptr := (*[]int64)(item)
	if w, err = BuiltinVectorLongWriteJSONOpt(short, w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorLong) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorLong) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorString []string

func (VectorString) TLName() string { return "vector" }
func (VectorString) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorString) Reset() {
	ptr := (*[]string)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorString) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]string)(item)
	return BuiltinVectorStringRead(w, ptr)
}

func (item *VectorString) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]string)(item)
	return BuiltinVectorStringWrite(w, *ptr)
}

func (item *VectorString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorString) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorString) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorString__ReadJSON(item *VectorString, j interface{}) error { return item.readJSON(j) }
func (item *VectorString) readJSON(j interface{}) error {
	ptr := (*[]string)(item)
	if err := BuiltinVectorStringReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorString) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}

func (item *VectorString) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	ptr := (*[]string)(item)
	if w, err = BuiltinVectorStringWriteJSONOpt(short, w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorString) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}
