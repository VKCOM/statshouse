// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type RpcDestActorFlags struct {
	ActorId int64
	Extra   RpcInvokeReqExtra
}

func (RpcDestActorFlags) TLName() string { return "rpcDestActorFlags" }
func (RpcDestActorFlags) TLTag() uint32  { return 0xf0a5acf7 }

func (item *RpcDestActorFlags) Reset() {
	item.ActorId = 0
	item.Extra.Reset()
}

func (item *RpcDestActorFlags) FillRandom(rg *basictl.RandGenerator) {
	item.ActorId = basictl.RandomLong(rg)
	item.Extra.FillRandom(rg)
}

func (item *RpcDestActorFlags) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.ActorId); err != nil {
		return w, err
	}
	return item.Extra.Read(w)
}

func (item *RpcDestActorFlags) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *RpcDestActorFlags) Write(w []byte) []byte {
	w = basictl.LongWrite(w, item.ActorId)
	w = item.Extra.Write(w)
	return w
}

func (item *RpcDestActorFlags) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xf0a5acf7); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *RpcDestActorFlags) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *RpcDestActorFlags) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xf0a5acf7)
	return item.Write(w)
}

func (item RpcDestActorFlags) String() string {
	return string(item.WriteJSON(nil))
}

func (item *RpcDestActorFlags) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propActorIdPresented bool
	var propExtraPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "actor_id":
				if propActorIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcDestActorFlags", "actor_id")
				}
				if err := Json2ReadInt64(in, &item.ActorId); err != nil {
					return err
				}
				propActorIdPresented = true
			case "extra":
				if propExtraPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("rpcDestActorFlags", "extra")
				}
				if err := item.Extra.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propExtraPresented = true
			default:
				return ErrorInvalidJSONExcessElement("rpcDestActorFlags", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propActorIdPresented {
		item.ActorId = 0
	}
	if !propExtraPresented {
		item.Extra.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *RpcDestActorFlags) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *RpcDestActorFlags) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *RpcDestActorFlags) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexActorId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"actor_id":`...)
	w = basictl.JSONWriteInt64(w, item.ActorId)
	if (item.ActorId != 0) == false {
		w = w[:backupIndexActorId]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"extra":`...)
	w = item.Extra.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *RpcDestActorFlags) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *RpcDestActorFlags) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("rpcDestActorFlags", err.Error())
	}
	return nil
}
