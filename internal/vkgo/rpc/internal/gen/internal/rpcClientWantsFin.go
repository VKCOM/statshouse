// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type RpcClientWantsFin struct {
}

func (RpcClientWantsFin) TLName() string { return "rpcClientWantsFin" }
func (RpcClientWantsFin) TLTag() uint32  { return 0x0b73429e }

func (item *RpcClientWantsFin) Reset() {}

func (item *RpcClientWantsFin) FillRandom(rg *basictl.RandGenerator) {}

func (item *RpcClientWantsFin) Read(w []byte) (_ []byte, err error) { return w, nil }

func (item *RpcClientWantsFin) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *RpcClientWantsFin) Write(w []byte) []byte {
	return w
}

func (item *RpcClientWantsFin) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0b73429e); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *RpcClientWantsFin) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *RpcClientWantsFin) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0b73429e)
	return item.Write(w)
}

func (item RpcClientWantsFin) String() string {
	return string(item.WriteJSON(nil))
}

func (item *RpcClientWantsFin) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return ErrorInvalidJSON("rpcClientWantsFin", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *RpcClientWantsFin) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *RpcClientWantsFin) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *RpcClientWantsFin) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *RpcClientWantsFin) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *RpcClientWantsFin) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("rpcClientWantsFin", err.Error())
	}
	return nil
}
