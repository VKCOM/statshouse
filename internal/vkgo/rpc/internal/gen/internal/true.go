// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type True struct {
}

func (True) TLName() string { return "true" }
func (True) TLTag() uint32  { return 0x3fedd339 }

func (item *True) Reset() {}

func (item *True) Read(w []byte) (_ []byte, err error) { return w, nil }

func (item *True) Write(w []byte) (_ []byte, err error) { return w, nil }

func (item *True) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3fedd339); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *True) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x3fedd339)
	return item.Write(w)
}

func (item True) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *True) ReadJSONLegacy(legacyTypeNames bool, j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("true", "expected json object")
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("true", k)
	}
	return nil
}

func (item *True) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return ErrorInvalidJSON("true", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

func (item *True) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *True) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	return append(w, '}'), nil
}

func (item *True) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *True) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("true", err.Error())
	}
	if err = item.ReadJSONLegacy(true, j); err != nil {
		return ErrorInvalidJSON("true", err.Error())
	}
	return nil
}
