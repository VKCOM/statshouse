// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func (item ExactlyOnceCommitRequest) AsUnion() ExactlyOncePersistentRequest {
	var ret ExactlyOncePersistentRequest
	ret.SetCommitRequest(item)
	return ret
}

type ExactlyOnceCommitRequest struct {
	PersistentQueryUuid ExactlyOnceUuid
	PersistentSlotUuid  ExactlyOnceUuid
}

func (ExactlyOnceCommitRequest) TLName() string { return "exactlyOnce.commitRequest" }
func (ExactlyOnceCommitRequest) TLTag() uint32  { return 0x6836b983 }

func (item *ExactlyOnceCommitRequest) Reset() {
	item.PersistentQueryUuid.Reset()
	item.PersistentSlotUuid.Reset()
}

func (item *ExactlyOnceCommitRequest) FillRandom(rg *basictl.RandGenerator) {
	item.PersistentQueryUuid.FillRandom(rg)
	item.PersistentSlotUuid.FillRandom(rg)
}

func (item *ExactlyOnceCommitRequest) Read(w []byte) (_ []byte, err error) {
	if w, err = item.PersistentQueryUuid.Read(w); err != nil {
		return w, err
	}
	return item.PersistentSlotUuid.Read(w)
}

// This method is general version of Write, use it instead!
func (item *ExactlyOnceCommitRequest) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *ExactlyOnceCommitRequest) Write(w []byte) []byte {
	w = item.PersistentQueryUuid.Write(w)
	w = item.PersistentSlotUuid.Write(w)
	return w
}

func (item *ExactlyOnceCommitRequest) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x6836b983); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *ExactlyOnceCommitRequest) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *ExactlyOnceCommitRequest) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x6836b983)
	return item.Write(w)
}

func (item ExactlyOnceCommitRequest) String() string {
	return string(item.WriteJSON(nil))
}

func (item *ExactlyOnceCommitRequest) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propPersistentQueryUuidPresented bool
	var propPersistentSlotUuidPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "persistent_query_uuid":
				if propPersistentQueryUuidPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("exactlyOnce.commitRequest", "persistent_query_uuid")
				}
				if err := item.PersistentQueryUuid.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propPersistentQueryUuidPresented = true
			case "persistent_slot_uuid":
				if propPersistentSlotUuidPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("exactlyOnce.commitRequest", "persistent_slot_uuid")
				}
				if err := item.PersistentSlotUuid.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propPersistentSlotUuidPresented = true
			default:
				return ErrorInvalidJSONExcessElement("exactlyOnce.commitRequest", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propPersistentQueryUuidPresented {
		item.PersistentQueryUuid.Reset()
	}
	if !propPersistentSlotUuidPresented {
		item.PersistentSlotUuid.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *ExactlyOnceCommitRequest) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *ExactlyOnceCommitRequest) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *ExactlyOnceCommitRequest) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"persistent_query_uuid":`...)
	w = item.PersistentQueryUuid.WriteJSONOpt(newTypeNames, short, w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"persistent_slot_uuid":`...)
	w = item.PersistentSlotUuid.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *ExactlyOnceCommitRequest) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *ExactlyOnceCommitRequest) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("exactlyOnce.commitRequest", err.Error())
	}
	return nil
}

var _ExactlyOncePersistentRequest = [2]UnionElement{
	{TLTag: 0xc8d71b66, TLName: "exactlyOnce.prepareRequest", TLString: "exactlyOnce.prepareRequest#c8d71b66"},
	{TLTag: 0x6836b983, TLName: "exactlyOnce.commitRequest", TLString: "exactlyOnce.commitRequest#6836b983"},
}

type ExactlyOncePersistentRequest struct {
	valuePrepareRequest ExactlyOncePrepareRequest
	valueCommitRequest  ExactlyOnceCommitRequest
	index               int
}

func (item ExactlyOncePersistentRequest) TLName() string {
	return _ExactlyOncePersistentRequest[item.index].TLName
}
func (item ExactlyOncePersistentRequest) TLTag() uint32 {
	return _ExactlyOncePersistentRequest[item.index].TLTag
}

func (item *ExactlyOncePersistentRequest) Reset() { item.ResetToPrepareRequest() }
func (item *ExactlyOncePersistentRequest) FillRandom(rg *basictl.RandGenerator) {
	index := basictl.RandomUint(rg) % 2
	switch index {
	case 0:
		item.index = 0
		item.valuePrepareRequest.FillRandom(rg)
	case 1:
		item.index = 1
		item.valueCommitRequest.FillRandom(rg)
	default:
	}
}

func (item *ExactlyOncePersistentRequest) IsPrepareRequest() bool { return item.index == 0 }

func (item *ExactlyOncePersistentRequest) AsPrepareRequest() (*ExactlyOncePrepareRequest, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valuePrepareRequest, true
}
func (item *ExactlyOncePersistentRequest) ResetToPrepareRequest() *ExactlyOncePrepareRequest {
	item.index = 0
	item.valuePrepareRequest.Reset()
	return &item.valuePrepareRequest
}
func (item *ExactlyOncePersistentRequest) SetPrepareRequest(value ExactlyOncePrepareRequest) {
	item.index = 0
	item.valuePrepareRequest = value
}

func (item *ExactlyOncePersistentRequest) IsCommitRequest() bool { return item.index == 1 }

func (item *ExactlyOncePersistentRequest) AsCommitRequest() (*ExactlyOnceCommitRequest, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueCommitRequest, true
}
func (item *ExactlyOncePersistentRequest) ResetToCommitRequest() *ExactlyOnceCommitRequest {
	item.index = 1
	item.valueCommitRequest.Reset()
	return &item.valueCommitRequest
}
func (item *ExactlyOncePersistentRequest) SetCommitRequest(value ExactlyOnceCommitRequest) {
	item.index = 1
	item.valueCommitRequest = value
}

func (item *ExactlyOncePersistentRequest) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0xc8d71b66:
		item.index = 0
		return item.valuePrepareRequest.Read(w)
	case 0x6836b983:
		item.index = 1
		return item.valueCommitRequest.Read(w)
	default:
		return w, ErrorInvalidUnionTag("exactlyOnce.PersistentRequest", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *ExactlyOncePersistentRequest) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *ExactlyOncePersistentRequest) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _ExactlyOncePersistentRequest[item.index].TLTag)
	switch item.index {
	case 0:
		w = item.valuePrepareRequest.Write(w)
	case 1:
		w = item.valueCommitRequest.Write(w)
	}
	return w
}

func (item *ExactlyOncePersistentRequest) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := Json2ReadUnion("exactlyOnce.PersistentRequest", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "exactlyOnce.prepareRequest#c8d71b66", "exactlyOnce.prepareRequest", "#c8d71b66":
		if !legacyTypeNames && _tag == "exactlyOnce.prepareRequest#c8d71b66" {
			return ErrorInvalidUnionLegacyTagJSON("exactlyOnce.PersistentRequest", "exactlyOnce.prepareRequest#c8d71b66")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valuePrepareRequest.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "exactlyOnce.commitRequest#6836b983", "exactlyOnce.commitRequest", "#6836b983":
		if !legacyTypeNames && _tag == "exactlyOnce.commitRequest#6836b983" {
			return ErrorInvalidUnionLegacyTagJSON("exactlyOnce.PersistentRequest", "exactlyOnce.commitRequest#6836b983")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueCommitRequest.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("exactlyOnce.PersistentRequest", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *ExactlyOncePersistentRequest) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *ExactlyOncePersistentRequest) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *ExactlyOncePersistentRequest) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"exactlyOnce.prepareRequest"`...)
		} else {
			w = append(w, `{"type":"exactlyOnce.prepareRequest#c8d71b66"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valuePrepareRequest.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"exactlyOnce.commitRequest"`...)
		} else {
			w = append(w, `{"type":"exactlyOnce.commitRequest#6836b983"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueCommitRequest.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item ExactlyOncePersistentRequest) String() string {
	return string(item.WriteJSON(nil))
}

func (item *ExactlyOncePersistentRequest) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *ExactlyOncePersistentRequest) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("exactlyOnce.PersistentRequest", err.Error())
	}
	return nil
}

func (item ExactlyOncePrepareRequest) AsUnion() ExactlyOncePersistentRequest {
	var ret ExactlyOncePersistentRequest
	ret.SetPrepareRequest(item)
	return ret
}

type ExactlyOncePrepareRequest struct {
	PersistentQueryUuid ExactlyOnceUuid
}

func (ExactlyOncePrepareRequest) TLName() string { return "exactlyOnce.prepareRequest" }
func (ExactlyOncePrepareRequest) TLTag() uint32  { return 0xc8d71b66 }

func (item *ExactlyOncePrepareRequest) Reset() {
	item.PersistentQueryUuid.Reset()
}

func (item *ExactlyOncePrepareRequest) FillRandom(rg *basictl.RandGenerator) {
	item.PersistentQueryUuid.FillRandom(rg)
}

func (item *ExactlyOncePrepareRequest) Read(w []byte) (_ []byte, err error) {
	return item.PersistentQueryUuid.Read(w)
}

// This method is general version of Write, use it instead!
func (item *ExactlyOncePrepareRequest) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *ExactlyOncePrepareRequest) Write(w []byte) []byte {
	w = item.PersistentQueryUuid.Write(w)
	return w
}

func (item *ExactlyOncePrepareRequest) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc8d71b66); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *ExactlyOncePrepareRequest) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *ExactlyOncePrepareRequest) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xc8d71b66)
	return item.Write(w)
}

func (item ExactlyOncePrepareRequest) String() string {
	return string(item.WriteJSON(nil))
}

func (item *ExactlyOncePrepareRequest) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propPersistentQueryUuidPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "persistent_query_uuid":
				if propPersistentQueryUuidPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("exactlyOnce.prepareRequest", "persistent_query_uuid")
				}
				if err := item.PersistentQueryUuid.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propPersistentQueryUuidPresented = true
			default:
				return ErrorInvalidJSONExcessElement("exactlyOnce.prepareRequest", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propPersistentQueryUuidPresented {
		item.PersistentQueryUuid.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *ExactlyOncePrepareRequest) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *ExactlyOncePrepareRequest) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *ExactlyOncePrepareRequest) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"persistent_query_uuid":`...)
	w = item.PersistentQueryUuid.WriteJSONOpt(newTypeNames, short, w)
	return append(w, '}')
}

func (item *ExactlyOncePrepareRequest) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *ExactlyOncePrepareRequest) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("exactlyOnce.prepareRequest", err.Error())
	}
	return nil
}
