// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicStart

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tl/tlBuiltinVectorString"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tl/tlTrue"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicStart struct {
	FieldsMask uint32
	// Dump (TrueType) // Conditional: item.FieldsMask.0
	ClusterId         string
	ShardId           string
	EncryptionSecret  string
	EncryptionSecrets []string // Conditional: item.FieldsMask.1
	Snapshots         []string
}

func (BarsicStart) TLName() string { return "barsic.start" }
func (BarsicStart) TLTag() uint32  { return 0x85ca2340 }

func (item *BarsicStart) SetDump(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item BarsicStart) IsSetDump() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BarsicStart) SetEncryptionSecrets(v []string) {
	item.EncryptionSecrets = v
	item.FieldsMask |= 1 << 1
}
func (item *BarsicStart) ClearEncryptionSecrets() {
	item.EncryptionSecrets = item.EncryptionSecrets[:0]
	item.FieldsMask &^= 1 << 1
}
func (item BarsicStart) IsSetEncryptionSecrets() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *BarsicStart) Reset() {
	item.FieldsMask = 0
	item.ClusterId = ""
	item.ShardId = ""
	item.EncryptionSecret = ""
	item.EncryptionSecrets = item.EncryptionSecrets[:0]
	item.Snapshots = item.Snapshots[:0]
}

func (item *BarsicStart) FillRandom(rg *basictl.RandGenerator) {
	var maskFieldsMask uint32
	maskFieldsMask = basictl.RandomUint(rg)
	item.FieldsMask = 0
	if maskFieldsMask&(1<<0) != 0 {
		item.FieldsMask |= (1 << 0)
	}
	if maskFieldsMask&(1<<1) != 0 {
		item.FieldsMask |= (1 << 1)
	}
	item.ClusterId = basictl.RandomString(rg)
	item.ShardId = basictl.RandomString(rg)
	item.EncryptionSecret = basictl.RandomString(rg)
	if item.FieldsMask&(1<<1) != 0 {
		tlBuiltinVectorString.BuiltinVectorStringFillRandom(rg, &item.EncryptionSecrets)
	} else {
		item.EncryptionSecrets = item.EncryptionSecrets[:0]
	}
	tlBuiltinVectorString.BuiltinVectorStringFillRandom(rg, &item.Snapshots)
}

func (item *BarsicStart) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.ShardId); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.EncryptionSecret); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = tlBuiltinVectorString.BuiltinVectorStringRead(w, &item.EncryptionSecrets); err != nil {
			return w, err
		}
	} else {
		item.EncryptionSecrets = item.EncryptionSecrets[:0]
	}
	return tlBuiltinVectorString.BuiltinVectorStringRead(w, &item.Snapshots)
}

// This method is general version of Write, use it instead!
func (item *BarsicStart) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BarsicStart) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWrite(w, item.ClusterId)
	w = basictl.StringWrite(w, item.ShardId)
	w = basictl.StringWrite(w, item.EncryptionSecret)
	if item.FieldsMask&(1<<1) != 0 {
		w = tlBuiltinVectorString.BuiltinVectorStringWrite(w, item.EncryptionSecrets)
	}
	w = tlBuiltinVectorString.BuiltinVectorStringWrite(w, item.Snapshots)
	return w
}

func (item *BarsicStart) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x85ca2340); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *BarsicStart) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BarsicStart) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x85ca2340)
	return item.Write(w)
}

func (item *BarsicStart) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicStart) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *BarsicStart) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *tlTrue.True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *BarsicStart) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *BarsicStart) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *BarsicStart) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicStart) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *BarsicStart) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret tlTrue.True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicStart) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BarsicStart) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var trueTypeDumpPresented bool
	var trueTypeDumpValue bool
	var propClusterIdPresented bool
	var propShardIdPresented bool
	var propEncryptionSecretPresented bool
	var propEncryptionSecretsPresented bool
	var propSnapshotsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "dump":
				if trueTypeDumpPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "dump")
				}
				if err := internal.Json2ReadBool(in, &trueTypeDumpValue); err != nil {
					return err
				}
				trueTypeDumpPresented = true
			case "cluster_id":
				if propClusterIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "cluster_id")
				}
				if err := internal.Json2ReadString(in, &item.ClusterId); err != nil {
					return err
				}
				propClusterIdPresented = true
			case "shard_id":
				if propShardIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "shard_id")
				}
				if err := internal.Json2ReadString(in, &item.ShardId); err != nil {
					return err
				}
				propShardIdPresented = true
			case "encryptionSecret":
				if propEncryptionSecretPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "encryptionSecret")
				}
				if err := internal.Json2ReadString(in, &item.EncryptionSecret); err != nil {
					return err
				}
				propEncryptionSecretPresented = true
			case "encryptionSecrets":
				if propEncryptionSecretsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "encryptionSecrets")
				}
				if err := tlBuiltinVectorString.BuiltinVectorStringReadJSON(legacyTypeNames, in, &item.EncryptionSecrets); err != nil {
					return err
				}
				propEncryptionSecretsPresented = true
			case "snapshots":
				if propSnapshotsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "snapshots")
				}
				if err := tlBuiltinVectorString.BuiltinVectorStringReadJSON(legacyTypeNames, in, &item.Snapshots); err != nil {
					return err
				}
				propSnapshotsPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.start", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propClusterIdPresented {
		item.ClusterId = ""
	}
	if !propShardIdPresented {
		item.ShardId = ""
	}
	if !propEncryptionSecretPresented {
		item.EncryptionSecret = ""
	}
	if !propEncryptionSecretsPresented {
		item.EncryptionSecrets = item.EncryptionSecrets[:0]
	}
	if !propSnapshotsPresented {
		item.Snapshots = item.Snapshots[:0]
	}
	if trueTypeDumpPresented {
		if trueTypeDumpValue {
			item.FieldsMask |= 1 << 0
		}
	}
	if propEncryptionSecretsPresented {
		item.FieldsMask |= 1 << 1
	}
	// tries to set bit to zero if it is 1
	if trueTypeDumpPresented && !trueTypeDumpValue && (item.FieldsMask&(1<<0) != 0) {
		return internal.ErrorInvalidJSON("barsic.start", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BarsicStart) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BarsicStart) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicStart) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"dump":true`...)
	}
	backupIndexClusterId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"cluster_id":`...)
	w = basictl.JSONWriteString(w, item.ClusterId)
	if (len(item.ClusterId) != 0) == false {
		w = w[:backupIndexClusterId]
	}
	backupIndexShardId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"shard_id":`...)
	w = basictl.JSONWriteString(w, item.ShardId)
	if (len(item.ShardId) != 0) == false {
		w = w[:backupIndexShardId]
	}
	backupIndexEncryptionSecret := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"encryptionSecret":`...)
	w = basictl.JSONWriteString(w, item.EncryptionSecret)
	if (len(item.EncryptionSecret) != 0) == false {
		w = w[:backupIndexEncryptionSecret]
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"encryptionSecrets":`...)
		w = tlBuiltinVectorString.BuiltinVectorStringWriteJSONOpt(newTypeNames, short, w, item.EncryptionSecrets)
	}
	backupIndexSnapshots := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"snapshots":`...)
	w = tlBuiltinVectorString.BuiltinVectorStringWriteJSONOpt(newTypeNames, short, w, item.Snapshots)
	if (len(item.Snapshots) != 0) == false {
		w = w[:backupIndexSnapshots]
	}
	return append(w, '}')
}

func (item *BarsicStart) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BarsicStart) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("barsic.start", err.Error())
	}
	return nil
}

type BarsicStartBytes struct {
	FieldsMask uint32
	// Dump (TrueType) // Conditional: item.FieldsMask.0
	ClusterId         []byte
	ShardId           []byte
	EncryptionSecret  []byte
	EncryptionSecrets [][]byte // Conditional: item.FieldsMask.1
	Snapshots         [][]byte
}

func (BarsicStartBytes) TLName() string { return "barsic.start" }
func (BarsicStartBytes) TLTag() uint32  { return 0x85ca2340 }

func (item *BarsicStartBytes) SetDump(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item BarsicStartBytes) IsSetDump() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BarsicStartBytes) SetEncryptionSecrets(v [][]byte) {
	item.EncryptionSecrets = v
	item.FieldsMask |= 1 << 1
}
func (item *BarsicStartBytes) ClearEncryptionSecrets() {
	item.EncryptionSecrets = item.EncryptionSecrets[:0]
	item.FieldsMask &^= 1 << 1
}
func (item BarsicStartBytes) IsSetEncryptionSecrets() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *BarsicStartBytes) Reset() {
	item.FieldsMask = 0
	item.ClusterId = item.ClusterId[:0]
	item.ShardId = item.ShardId[:0]
	item.EncryptionSecret = item.EncryptionSecret[:0]
	item.EncryptionSecrets = item.EncryptionSecrets[:0]
	item.Snapshots = item.Snapshots[:0]
}

func (item *BarsicStartBytes) FillRandom(rg *basictl.RandGenerator) {
	var maskFieldsMask uint32
	maskFieldsMask = basictl.RandomUint(rg)
	item.FieldsMask = 0
	if maskFieldsMask&(1<<0) != 0 {
		item.FieldsMask |= (1 << 0)
	}
	if maskFieldsMask&(1<<1) != 0 {
		item.FieldsMask |= (1 << 1)
	}
	item.ClusterId = basictl.RandomStringBytes(rg)
	item.ShardId = basictl.RandomStringBytes(rg)
	item.EncryptionSecret = basictl.RandomStringBytes(rg)
	if item.FieldsMask&(1<<1) != 0 {
		tlBuiltinVectorString.BuiltinVectorStringBytesFillRandom(rg, &item.EncryptionSecrets)
	} else {
		item.EncryptionSecrets = item.EncryptionSecrets[:0]
	}
	tlBuiltinVectorString.BuiltinVectorStringBytesFillRandom(rg, &item.Snapshots)
}

func (item *BarsicStartBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.ShardId); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.EncryptionSecret); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = tlBuiltinVectorString.BuiltinVectorStringBytesRead(w, &item.EncryptionSecrets); err != nil {
			return w, err
		}
	} else {
		item.EncryptionSecrets = item.EncryptionSecrets[:0]
	}
	return tlBuiltinVectorString.BuiltinVectorStringBytesRead(w, &item.Snapshots)
}

// This method is general version of Write, use it instead!
func (item *BarsicStartBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BarsicStartBytes) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWriteBytes(w, item.ClusterId)
	w = basictl.StringWriteBytes(w, item.ShardId)
	w = basictl.StringWriteBytes(w, item.EncryptionSecret)
	if item.FieldsMask&(1<<1) != 0 {
		w = tlBuiltinVectorString.BuiltinVectorStringBytesWrite(w, item.EncryptionSecrets)
	}
	w = tlBuiltinVectorString.BuiltinVectorStringBytesWrite(w, item.Snapshots)
	return w
}

func (item *BarsicStartBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x85ca2340); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *BarsicStartBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BarsicStartBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x85ca2340)
	return item.Write(w)
}

func (item *BarsicStartBytes) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicStartBytes) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *BarsicStartBytes) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *tlTrue.True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *BarsicStartBytes) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *BarsicStartBytes) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *BarsicStartBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicStartBytes) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *BarsicStartBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret tlTrue.True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicStartBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BarsicStartBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var trueTypeDumpPresented bool
	var trueTypeDumpValue bool
	var propClusterIdPresented bool
	var propShardIdPresented bool
	var propEncryptionSecretPresented bool
	var propEncryptionSecretsPresented bool
	var propSnapshotsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "dump":
				if trueTypeDumpPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "dump")
				}
				if err := internal.Json2ReadBool(in, &trueTypeDumpValue); err != nil {
					return err
				}
				trueTypeDumpPresented = true
			case "cluster_id":
				if propClusterIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "cluster_id")
				}
				if err := internal.Json2ReadStringBytes(in, &item.ClusterId); err != nil {
					return err
				}
				propClusterIdPresented = true
			case "shard_id":
				if propShardIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "shard_id")
				}
				if err := internal.Json2ReadStringBytes(in, &item.ShardId); err != nil {
					return err
				}
				propShardIdPresented = true
			case "encryptionSecret":
				if propEncryptionSecretPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "encryptionSecret")
				}
				if err := internal.Json2ReadStringBytes(in, &item.EncryptionSecret); err != nil {
					return err
				}
				propEncryptionSecretPresented = true
			case "encryptionSecrets":
				if propEncryptionSecretsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "encryptionSecrets")
				}
				if err := tlBuiltinVectorString.BuiltinVectorStringBytesReadJSON(legacyTypeNames, in, &item.EncryptionSecrets); err != nil {
					return err
				}
				propEncryptionSecretsPresented = true
			case "snapshots":
				if propSnapshotsPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.start", "snapshots")
				}
				if err := tlBuiltinVectorString.BuiltinVectorStringBytesReadJSON(legacyTypeNames, in, &item.Snapshots); err != nil {
					return err
				}
				propSnapshotsPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.start", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propClusterIdPresented {
		item.ClusterId = item.ClusterId[:0]
	}
	if !propShardIdPresented {
		item.ShardId = item.ShardId[:0]
	}
	if !propEncryptionSecretPresented {
		item.EncryptionSecret = item.EncryptionSecret[:0]
	}
	if !propEncryptionSecretsPresented {
		item.EncryptionSecrets = item.EncryptionSecrets[:0]
	}
	if !propSnapshotsPresented {
		item.Snapshots = item.Snapshots[:0]
	}
	if trueTypeDumpPresented {
		if trueTypeDumpValue {
			item.FieldsMask |= 1 << 0
		}
	}
	if propEncryptionSecretsPresented {
		item.FieldsMask |= 1 << 1
	}
	// tries to set bit to zero if it is 1
	if trueTypeDumpPresented && !trueTypeDumpValue && (item.FieldsMask&(1<<0) != 0) {
		return internal.ErrorInvalidJSON("barsic.start", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BarsicStartBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BarsicStartBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicStartBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"dump":true`...)
	}
	backupIndexClusterId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"cluster_id":`...)
	w = basictl.JSONWriteStringBytes(w, item.ClusterId)
	if (len(item.ClusterId) != 0) == false {
		w = w[:backupIndexClusterId]
	}
	backupIndexShardId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"shard_id":`...)
	w = basictl.JSONWriteStringBytes(w, item.ShardId)
	if (len(item.ShardId) != 0) == false {
		w = w[:backupIndexShardId]
	}
	backupIndexEncryptionSecret := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"encryptionSecret":`...)
	w = basictl.JSONWriteStringBytes(w, item.EncryptionSecret)
	if (len(item.EncryptionSecret) != 0) == false {
		w = w[:backupIndexEncryptionSecret]
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"encryptionSecrets":`...)
		w = tlBuiltinVectorString.BuiltinVectorStringBytesWriteJSONOpt(newTypeNames, short, w, item.EncryptionSecrets)
	}
	backupIndexSnapshots := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"snapshots":`...)
	w = tlBuiltinVectorString.BuiltinVectorStringBytesWriteJSONOpt(newTypeNames, short, w, item.Snapshots)
	if (len(item.Snapshots) != 0) == false {
		w = w[:backupIndexSnapshots]
	}
	return append(w, '}')
}

func (item *BarsicStartBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BarsicStartBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("barsic.start", err.Error())
	}
	return nil
}
