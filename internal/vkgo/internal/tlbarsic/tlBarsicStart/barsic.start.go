// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicStart

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tl/tlBuiltinVectorString"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tl/tlTrue"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicStart struct {
	FieldsMask uint32
	// Dump (TrueType) // Conditional: item.FieldsMask.0
	ClusterId         string
	ShardId           string
	EncryptionSecret  string
	EncryptionSecrets []string // Conditional: item.FieldsMask.1
	Snapshots         []string
}

func (BarsicStart) TLName() string { return "barsic.start" }
func (BarsicStart) TLTag() uint32  { return 0x85ca2340 }

func (item *BarsicStart) SetDump(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item BarsicStart) IsSetDump() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BarsicStart) SetEncryptionSecrets(v []string) {
	item.EncryptionSecrets = v
	item.FieldsMask |= 1 << 1
}
func (item *BarsicStart) ClearEncryptionSecrets() {
	item.EncryptionSecrets = item.EncryptionSecrets[:0]
	item.FieldsMask &^= 1 << 1
}
func (item BarsicStart) IsSetEncryptionSecrets() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *BarsicStart) Reset() {
	item.FieldsMask = 0
	item.ClusterId = ""
	item.ShardId = ""
	item.EncryptionSecret = ""
	item.EncryptionSecrets = item.EncryptionSecrets[:0]
	item.Snapshots = item.Snapshots[:0]
}

func (item *BarsicStart) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.ShardId); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.EncryptionSecret); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = tlBuiltinVectorString.BuiltinVectorStringRead(w, &item.EncryptionSecrets); err != nil {
			return w, err
		}
	} else {
		item.EncryptionSecrets = item.EncryptionSecrets[:0]
	}
	return tlBuiltinVectorString.BuiltinVectorStringRead(w, &item.Snapshots)
}

func (item *BarsicStart) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = basictl.StringWrite(w, item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringWrite(w, item.ShardId); err != nil {
		return w, err
	}
	if w, err = basictl.StringWrite(w, item.EncryptionSecret); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = tlBuiltinVectorString.BuiltinVectorStringWrite(w, item.EncryptionSecrets); err != nil {
			return w, err
		}
	}
	return tlBuiltinVectorString.BuiltinVectorStringWrite(w, item.Snapshots)
}

func (item *BarsicStart) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x85ca2340); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicStart) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x85ca2340)
	return item.Write(w)
}

func (item *BarsicStart) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicStart) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *BarsicStart) ReadResultJSON(j interface{}, ret *tlTrue.True) error {
	if err := tlTrue.True__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *BarsicStart) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(false, w, ret)
}

func (item *BarsicStart) writeResultJSON(short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	if w, err = ret.WriteJSONOpt(short, w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *BarsicStart) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicStart) ReadResultWriteResultJSONShort(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(true, w, ret)
	return r, w, err
}

func (item *BarsicStart) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := internal.JsonBytesToInterface(r)
	if err != nil {
		return r, w, internal.ErrorInvalidJSON("barsic.start", err.Error())
	}
	var ret tlTrue.True
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicStart) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func BarsicStart__ReadJSON(item *BarsicStart, j interface{}) error { return item.readJSON(j) }
func (item *BarsicStart) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON("barsic.start", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := internal.JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jDump := _jm["dump"]
	delete(_jm, "dump")
	_jClusterId := _jm["cluster_id"]
	delete(_jm, "cluster_id")
	if err := internal.JsonReadString(_jClusterId, &item.ClusterId); err != nil {
		return err
	}
	_jShardId := _jm["shard_id"]
	delete(_jm, "shard_id")
	if err := internal.JsonReadString(_jShardId, &item.ShardId); err != nil {
		return err
	}
	_jEncryptionSecret := _jm["encryptionSecret"]
	delete(_jm, "encryptionSecret")
	if err := internal.JsonReadString(_jEncryptionSecret, &item.EncryptionSecret); err != nil {
		return err
	}
	_jEncryptionSecrets := _jm["encryptionSecrets"]
	delete(_jm, "encryptionSecrets")
	_jSnapshots := _jm["snapshots"]
	delete(_jm, "snapshots")
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement("barsic.start", k)
	}
	if _jDump != nil {
		_bit := false
		if err := internal.JsonReadBool(_jDump, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if _jEncryptionSecrets != nil {
		item.FieldsMask |= 1 << 1
	}
	if _jEncryptionSecrets != nil {
		if err := tlBuiltinVectorString.BuiltinVectorStringReadJSON(_jEncryptionSecrets, &item.EncryptionSecrets); err != nil {
			return err
		}
	} else {
		item.EncryptionSecrets = item.EncryptionSecrets[:0]
	}
	if err := tlBuiltinVectorString.BuiltinVectorStringReadJSON(_jSnapshots, &item.Snapshots); err != nil {
		return err
	}
	return nil
}

func (item *BarsicStart) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *BarsicStart) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"dump":true`...)
	}
	if len(item.ClusterId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"cluster_id":`...)
		w = basictl.JSONWriteString(w, item.ClusterId)
	}
	if len(item.ShardId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"shard_id":`...)
		w = basictl.JSONWriteString(w, item.ShardId)
	}
	if len(item.EncryptionSecret) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"encryptionSecret":`...)
		w = basictl.JSONWriteString(w, item.EncryptionSecret)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"encryptionSecrets":`...)
		if w, err = tlBuiltinVectorString.BuiltinVectorStringWriteJSONOpt(short, w, item.EncryptionSecrets); err != nil {
			return w, err
		}
	}
	if len(item.Snapshots) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"snapshots":`...)
		if w, err = tlBuiltinVectorString.BuiltinVectorStringWriteJSONOpt(short, w, item.Snapshots); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *BarsicStart) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BarsicStart) UnmarshalJSON(b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON("barsic.start", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return internal.ErrorInvalidJSON("barsic.start", err.Error())
	}
	return nil
}

type BarsicStartBytes struct {
	FieldsMask uint32
	// Dump (TrueType) // Conditional: item.FieldsMask.0
	ClusterId         []byte
	ShardId           []byte
	EncryptionSecret  []byte
	EncryptionSecrets [][]byte // Conditional: item.FieldsMask.1
	Snapshots         [][]byte
}

func (BarsicStartBytes) TLName() string { return "barsic.start" }
func (BarsicStartBytes) TLTag() uint32  { return 0x85ca2340 }

func (item *BarsicStartBytes) SetDump(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item BarsicStartBytes) IsSetDump() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BarsicStartBytes) SetEncryptionSecrets(v [][]byte) {
	item.EncryptionSecrets = v
	item.FieldsMask |= 1 << 1
}
func (item *BarsicStartBytes) ClearEncryptionSecrets() {
	item.EncryptionSecrets = item.EncryptionSecrets[:0]
	item.FieldsMask &^= 1 << 1
}
func (item BarsicStartBytes) IsSetEncryptionSecrets() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *BarsicStartBytes) Reset() {
	item.FieldsMask = 0
	item.ClusterId = item.ClusterId[:0]
	item.ShardId = item.ShardId[:0]
	item.EncryptionSecret = item.EncryptionSecret[:0]
	item.EncryptionSecrets = item.EncryptionSecrets[:0]
	item.Snapshots = item.Snapshots[:0]
}

func (item *BarsicStartBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.ShardId); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.EncryptionSecret); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = tlBuiltinVectorString.BuiltinVectorStringBytesRead(w, &item.EncryptionSecrets); err != nil {
			return w, err
		}
	} else {
		item.EncryptionSecrets = item.EncryptionSecrets[:0]
	}
	return tlBuiltinVectorString.BuiltinVectorStringBytesRead(w, &item.Snapshots)
}

func (item *BarsicStartBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = basictl.StringWriteBytes(w, item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringWriteBytes(w, item.ShardId); err != nil {
		return w, err
	}
	if w, err = basictl.StringWriteBytes(w, item.EncryptionSecret); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = tlBuiltinVectorString.BuiltinVectorStringBytesWrite(w, item.EncryptionSecrets); err != nil {
			return w, err
		}
	}
	return tlBuiltinVectorString.BuiltinVectorStringBytesWrite(w, item.Snapshots)
}

func (item *BarsicStartBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x85ca2340); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicStartBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x85ca2340)
	return item.Write(w)
}

func (item *BarsicStartBytes) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicStartBytes) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *BarsicStartBytes) ReadResultJSON(j interface{}, ret *tlTrue.True) error {
	if err := tlTrue.True__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *BarsicStartBytes) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(false, w, ret)
}

func (item *BarsicStartBytes) writeResultJSON(short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	if w, err = ret.WriteJSONOpt(short, w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *BarsicStartBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicStartBytes) ReadResultWriteResultJSONShort(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(true, w, ret)
	return r, w, err
}

func (item *BarsicStartBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := internal.JsonBytesToInterface(r)
	if err != nil {
		return r, w, internal.ErrorInvalidJSON("barsic.start", err.Error())
	}
	var ret tlTrue.True
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicStartBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func BarsicStartBytes__ReadJSON(item *BarsicStartBytes, j interface{}) error { return item.readJSON(j) }
func (item *BarsicStartBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON("barsic.start", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := internal.JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jDump := _jm["dump"]
	delete(_jm, "dump")
	_jClusterId := _jm["cluster_id"]
	delete(_jm, "cluster_id")
	if err := internal.JsonReadStringBytes(_jClusterId, &item.ClusterId); err != nil {
		return err
	}
	_jShardId := _jm["shard_id"]
	delete(_jm, "shard_id")
	if err := internal.JsonReadStringBytes(_jShardId, &item.ShardId); err != nil {
		return err
	}
	_jEncryptionSecret := _jm["encryptionSecret"]
	delete(_jm, "encryptionSecret")
	if err := internal.JsonReadStringBytes(_jEncryptionSecret, &item.EncryptionSecret); err != nil {
		return err
	}
	_jEncryptionSecrets := _jm["encryptionSecrets"]
	delete(_jm, "encryptionSecrets")
	_jSnapshots := _jm["snapshots"]
	delete(_jm, "snapshots")
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement("barsic.start", k)
	}
	if _jDump != nil {
		_bit := false
		if err := internal.JsonReadBool(_jDump, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if _jEncryptionSecrets != nil {
		item.FieldsMask |= 1 << 1
	}
	if _jEncryptionSecrets != nil {
		if err := tlBuiltinVectorString.BuiltinVectorStringBytesReadJSON(_jEncryptionSecrets, &item.EncryptionSecrets); err != nil {
			return err
		}
	} else {
		item.EncryptionSecrets = item.EncryptionSecrets[:0]
	}
	if err := tlBuiltinVectorString.BuiltinVectorStringBytesReadJSON(_jSnapshots, &item.Snapshots); err != nil {
		return err
	}
	return nil
}

func (item *BarsicStartBytes) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *BarsicStartBytes) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"dump":true`...)
	}
	if len(item.ClusterId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"cluster_id":`...)
		w = basictl.JSONWriteStringBytes(w, item.ClusterId)
	}
	if len(item.ShardId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"shard_id":`...)
		w = basictl.JSONWriteStringBytes(w, item.ShardId)
	}
	if len(item.EncryptionSecret) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"encryptionSecret":`...)
		w = basictl.JSONWriteStringBytes(w, item.EncryptionSecret)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"encryptionSecrets":`...)
		if w, err = tlBuiltinVectorString.BuiltinVectorStringBytesWriteJSONOpt(short, w, item.EncryptionSecrets); err != nil {
			return w, err
		}
	}
	if len(item.Snapshots) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"snapshots":`...)
		if w, err = tlBuiltinVectorString.BuiltinVectorStringBytesWriteJSONOpt(short, w, item.Snapshots); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *BarsicStartBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BarsicStartBytes) UnmarshalJSON(b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON("barsic.start", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return internal.ErrorInvalidJSON("barsic.start", err.Error())
	}
	return nil
}
