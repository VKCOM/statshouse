// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicEngineStatus

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
	"github.com/VKCOM/statshouse/internal/vkgo/internal"
	"github.com/VKCOM/statshouse/internal/vkgo/internal/tl/tlTrue"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicEngineStatus struct {
	FieldsMask               uint32
	Version                  string
	LoadedSnapshot           string
	LoadedSnapshotOffset     int64
	LoadedSnapshotProgress   int64
	LoadedSnapshotSize       int64
	PreparedSnapshot         string
	PreparedSnapshotOffset   int64
	PreparedSnapshotProgress int64
	PreparedSnapshotSize     int64
}

func (BarsicEngineStatus) TLName() string { return "barsic.engineStatus" }
func (BarsicEngineStatus) TLTag() uint32  { return 0xbfe7b094 }

func (item *BarsicEngineStatus) Reset() {
	item.FieldsMask = 0
	item.Version = ""
	item.LoadedSnapshot = ""
	item.LoadedSnapshotOffset = 0
	item.LoadedSnapshotProgress = 0
	item.LoadedSnapshotSize = 0
	item.PreparedSnapshot = ""
	item.PreparedSnapshotOffset = 0
	item.PreparedSnapshotProgress = 0
	item.PreparedSnapshotSize = 0
}

func (item *BarsicEngineStatus) FillRandom(rg *basictl.RandGenerator) {
	item.FieldsMask = basictl.RandomUint(rg)
	item.Version = basictl.RandomString(rg)
	item.LoadedSnapshot = basictl.RandomString(rg)
	item.LoadedSnapshotOffset = basictl.RandomLong(rg)
	item.LoadedSnapshotProgress = basictl.RandomLong(rg)
	item.LoadedSnapshotSize = basictl.RandomLong(rg)
	item.PreparedSnapshot = basictl.RandomString(rg)
	item.PreparedSnapshotOffset = basictl.RandomLong(rg)
	item.PreparedSnapshotProgress = basictl.RandomLong(rg)
	item.PreparedSnapshotSize = basictl.RandomLong(rg)
}

func (item *BarsicEngineStatus) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.LoadedSnapshot); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotOffset); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotProgress); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotSize); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.PreparedSnapshot); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PreparedSnapshotOffset); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PreparedSnapshotProgress); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.PreparedSnapshotSize)
}

func (item *BarsicEngineStatus) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BarsicEngineStatus) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWrite(w, item.Version)
	w = basictl.StringWrite(w, item.LoadedSnapshot)
	w = basictl.LongWrite(w, item.LoadedSnapshotOffset)
	w = basictl.LongWrite(w, item.LoadedSnapshotProgress)
	w = basictl.LongWrite(w, item.LoadedSnapshotSize)
	w = basictl.StringWrite(w, item.PreparedSnapshot)
	w = basictl.LongWrite(w, item.PreparedSnapshotOffset)
	w = basictl.LongWrite(w, item.PreparedSnapshotProgress)
	w = basictl.LongWrite(w, item.PreparedSnapshotSize)
	return w
}

func (item *BarsicEngineStatus) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xbfe7b094); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicEngineStatus) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BarsicEngineStatus) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xbfe7b094)
	return item.Write(w)
}

func (item *BarsicEngineStatus) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicEngineStatus) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *BarsicEngineStatus) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *tlTrue.True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *BarsicEngineStatus) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *BarsicEngineStatus) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *BarsicEngineStatus) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicEngineStatus) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *BarsicEngineStatus) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret tlTrue.True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicEngineStatus) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BarsicEngineStatus) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propVersionPresented bool
	var propLoadedSnapshotPresented bool
	var propLoadedSnapshotOffsetPresented bool
	var propLoadedSnapshotProgressPresented bool
	var propLoadedSnapshotSizePresented bool
	var propPreparedSnapshotPresented bool
	var propPreparedSnapshotOffsetPresented bool
	var propPreparedSnapshotProgressPresented bool
	var propPreparedSnapshotSizePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "version":
				if propVersionPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "version")
				}
				if err := internal.Json2ReadString(in, &item.Version); err != nil {
					return err
				}
				propVersionPresented = true
			case "loaded_snapshot":
				if propLoadedSnapshotPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot")
				}
				if err := internal.Json2ReadString(in, &item.LoadedSnapshot); err != nil {
					return err
				}
				propLoadedSnapshotPresented = true
			case "loaded_snapshot_offset":
				if propLoadedSnapshotOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotOffset); err != nil {
					return err
				}
				propLoadedSnapshotOffsetPresented = true
			case "loaded_snapshot_progress":
				if propLoadedSnapshotProgressPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_progress")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotProgress); err != nil {
					return err
				}
				propLoadedSnapshotProgressPresented = true
			case "loaded_snapshot_size":
				if propLoadedSnapshotSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_size")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotSize); err != nil {
					return err
				}
				propLoadedSnapshotSizePresented = true
			case "prepared_snapshot":
				if propPreparedSnapshotPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot")
				}
				if err := internal.Json2ReadString(in, &item.PreparedSnapshot); err != nil {
					return err
				}
				propPreparedSnapshotPresented = true
			case "prepared_snapshot_offset":
				if propPreparedSnapshotOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotOffset); err != nil {
					return err
				}
				propPreparedSnapshotOffsetPresented = true
			case "prepared_snapshot_progress":
				if propPreparedSnapshotProgressPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_progress")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotProgress); err != nil {
					return err
				}
				propPreparedSnapshotProgressPresented = true
			case "prepared_snapshot_size":
				if propPreparedSnapshotSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_size")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotSize); err != nil {
					return err
				}
				propPreparedSnapshotSizePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.engineStatus", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propVersionPresented {
		item.Version = ""
	}
	if !propLoadedSnapshotPresented {
		item.LoadedSnapshot = ""
	}
	if !propLoadedSnapshotOffsetPresented {
		item.LoadedSnapshotOffset = 0
	}
	if !propLoadedSnapshotProgressPresented {
		item.LoadedSnapshotProgress = 0
	}
	if !propLoadedSnapshotSizePresented {
		item.LoadedSnapshotSize = 0
	}
	if !propPreparedSnapshotPresented {
		item.PreparedSnapshot = ""
	}
	if !propPreparedSnapshotOffsetPresented {
		item.PreparedSnapshotOffset = 0
	}
	if !propPreparedSnapshotProgressPresented {
		item.PreparedSnapshotProgress = 0
	}
	if !propPreparedSnapshotSizePresented {
		item.PreparedSnapshotSize = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BarsicEngineStatus) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BarsicEngineStatus) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicEngineStatus) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexVersion := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"version":`...)
	w = basictl.JSONWriteString(w, item.Version)
	if (len(item.Version) != 0) == false {
		w = w[:backupIndexVersion]
	}
	backupIndexLoadedSnapshot := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"loaded_snapshot":`...)
	w = basictl.JSONWriteString(w, item.LoadedSnapshot)
	if (len(item.LoadedSnapshot) != 0) == false {
		w = w[:backupIndexLoadedSnapshot]
	}
	backupIndexLoadedSnapshotOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"loaded_snapshot_offset":`...)
	w = basictl.JSONWriteInt64(w, item.LoadedSnapshotOffset)
	if (item.LoadedSnapshotOffset != 0) == false {
		w = w[:backupIndexLoadedSnapshotOffset]
	}
	backupIndexLoadedSnapshotProgress := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"loaded_snapshot_progress":`...)
	w = basictl.JSONWriteInt64(w, item.LoadedSnapshotProgress)
	if (item.LoadedSnapshotProgress != 0) == false {
		w = w[:backupIndexLoadedSnapshotProgress]
	}
	backupIndexLoadedSnapshotSize := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"loaded_snapshot_size":`...)
	w = basictl.JSONWriteInt64(w, item.LoadedSnapshotSize)
	if (item.LoadedSnapshotSize != 0) == false {
		w = w[:backupIndexLoadedSnapshotSize]
	}
	backupIndexPreparedSnapshot := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"prepared_snapshot":`...)
	w = basictl.JSONWriteString(w, item.PreparedSnapshot)
	if (len(item.PreparedSnapshot) != 0) == false {
		w = w[:backupIndexPreparedSnapshot]
	}
	backupIndexPreparedSnapshotOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"prepared_snapshot_offset":`...)
	w = basictl.JSONWriteInt64(w, item.PreparedSnapshotOffset)
	if (item.PreparedSnapshotOffset != 0) == false {
		w = w[:backupIndexPreparedSnapshotOffset]
	}
	backupIndexPreparedSnapshotProgress := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"prepared_snapshot_progress":`...)
	w = basictl.JSONWriteInt64(w, item.PreparedSnapshotProgress)
	if (item.PreparedSnapshotProgress != 0) == false {
		w = w[:backupIndexPreparedSnapshotProgress]
	}
	backupIndexPreparedSnapshotSize := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"prepared_snapshot_size":`...)
	w = basictl.JSONWriteInt64(w, item.PreparedSnapshotSize)
	if (item.PreparedSnapshotSize != 0) == false {
		w = w[:backupIndexPreparedSnapshotSize]
	}
	return append(w, '}')
}

func (item *BarsicEngineStatus) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BarsicEngineStatus) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("barsic.engineStatus", err.Error())
	}
	return nil
}

func (item *BarsicEngineStatus) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	return w
}

func (item *BarsicEngineStatus) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return r, internal.ErrorTL2SerializersNotGenerated("barsic.engineStatus")
}

type BarsicEngineStatusBytes struct {
	FieldsMask               uint32
	Version                  []byte
	LoadedSnapshot           []byte
	LoadedSnapshotOffset     int64
	LoadedSnapshotProgress   int64
	LoadedSnapshotSize       int64
	PreparedSnapshot         []byte
	PreparedSnapshotOffset   int64
	PreparedSnapshotProgress int64
	PreparedSnapshotSize     int64
}

func (BarsicEngineStatusBytes) TLName() string { return "barsic.engineStatus" }
func (BarsicEngineStatusBytes) TLTag() uint32  { return 0xbfe7b094 }

func (item *BarsicEngineStatusBytes) Reset() {
	item.FieldsMask = 0
	item.Version = item.Version[:0]
	item.LoadedSnapshot = item.LoadedSnapshot[:0]
	item.LoadedSnapshotOffset = 0
	item.LoadedSnapshotProgress = 0
	item.LoadedSnapshotSize = 0
	item.PreparedSnapshot = item.PreparedSnapshot[:0]
	item.PreparedSnapshotOffset = 0
	item.PreparedSnapshotProgress = 0
	item.PreparedSnapshotSize = 0
}

func (item *BarsicEngineStatusBytes) FillRandom(rg *basictl.RandGenerator) {
	item.FieldsMask = basictl.RandomUint(rg)
	item.Version = basictl.RandomStringBytes(rg)
	item.LoadedSnapshot = basictl.RandomStringBytes(rg)
	item.LoadedSnapshotOffset = basictl.RandomLong(rg)
	item.LoadedSnapshotProgress = basictl.RandomLong(rg)
	item.LoadedSnapshotSize = basictl.RandomLong(rg)
	item.PreparedSnapshot = basictl.RandomStringBytes(rg)
	item.PreparedSnapshotOffset = basictl.RandomLong(rg)
	item.PreparedSnapshotProgress = basictl.RandomLong(rg)
	item.PreparedSnapshotSize = basictl.RandomLong(rg)
}

func (item *BarsicEngineStatusBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.LoadedSnapshot); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotOffset); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotProgress); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotSize); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.PreparedSnapshot); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PreparedSnapshotOffset); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PreparedSnapshotProgress); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.PreparedSnapshotSize)
}

func (item *BarsicEngineStatusBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BarsicEngineStatusBytes) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWriteBytes(w, item.Version)
	w = basictl.StringWriteBytes(w, item.LoadedSnapshot)
	w = basictl.LongWrite(w, item.LoadedSnapshotOffset)
	w = basictl.LongWrite(w, item.LoadedSnapshotProgress)
	w = basictl.LongWrite(w, item.LoadedSnapshotSize)
	w = basictl.StringWriteBytes(w, item.PreparedSnapshot)
	w = basictl.LongWrite(w, item.PreparedSnapshotOffset)
	w = basictl.LongWrite(w, item.PreparedSnapshotProgress)
	w = basictl.LongWrite(w, item.PreparedSnapshotSize)
	return w
}

func (item *BarsicEngineStatusBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xbfe7b094); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicEngineStatusBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BarsicEngineStatusBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xbfe7b094)
	return item.Write(w)
}

func (item *BarsicEngineStatusBytes) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicEngineStatusBytes) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *BarsicEngineStatusBytes) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *tlTrue.True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *BarsicEngineStatusBytes) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *BarsicEngineStatusBytes) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *BarsicEngineStatusBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicEngineStatusBytes) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *BarsicEngineStatusBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret tlTrue.True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicEngineStatusBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BarsicEngineStatusBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propVersionPresented bool
	var propLoadedSnapshotPresented bool
	var propLoadedSnapshotOffsetPresented bool
	var propLoadedSnapshotProgressPresented bool
	var propLoadedSnapshotSizePresented bool
	var propPreparedSnapshotPresented bool
	var propPreparedSnapshotOffsetPresented bool
	var propPreparedSnapshotProgressPresented bool
	var propPreparedSnapshotSizePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "version":
				if propVersionPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "version")
				}
				if err := internal.Json2ReadStringBytes(in, &item.Version); err != nil {
					return err
				}
				propVersionPresented = true
			case "loaded_snapshot":
				if propLoadedSnapshotPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot")
				}
				if err := internal.Json2ReadStringBytes(in, &item.LoadedSnapshot); err != nil {
					return err
				}
				propLoadedSnapshotPresented = true
			case "loaded_snapshot_offset":
				if propLoadedSnapshotOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotOffset); err != nil {
					return err
				}
				propLoadedSnapshotOffsetPresented = true
			case "loaded_snapshot_progress":
				if propLoadedSnapshotProgressPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_progress")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotProgress); err != nil {
					return err
				}
				propLoadedSnapshotProgressPresented = true
			case "loaded_snapshot_size":
				if propLoadedSnapshotSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_size")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotSize); err != nil {
					return err
				}
				propLoadedSnapshotSizePresented = true
			case "prepared_snapshot":
				if propPreparedSnapshotPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot")
				}
				if err := internal.Json2ReadStringBytes(in, &item.PreparedSnapshot); err != nil {
					return err
				}
				propPreparedSnapshotPresented = true
			case "prepared_snapshot_offset":
				if propPreparedSnapshotOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotOffset); err != nil {
					return err
				}
				propPreparedSnapshotOffsetPresented = true
			case "prepared_snapshot_progress":
				if propPreparedSnapshotProgressPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_progress")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotProgress); err != nil {
					return err
				}
				propPreparedSnapshotProgressPresented = true
			case "prepared_snapshot_size":
				if propPreparedSnapshotSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_size")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotSize); err != nil {
					return err
				}
				propPreparedSnapshotSizePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.engineStatus", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propVersionPresented {
		item.Version = item.Version[:0]
	}
	if !propLoadedSnapshotPresented {
		item.LoadedSnapshot = item.LoadedSnapshot[:0]
	}
	if !propLoadedSnapshotOffsetPresented {
		item.LoadedSnapshotOffset = 0
	}
	if !propLoadedSnapshotProgressPresented {
		item.LoadedSnapshotProgress = 0
	}
	if !propLoadedSnapshotSizePresented {
		item.LoadedSnapshotSize = 0
	}
	if !propPreparedSnapshotPresented {
		item.PreparedSnapshot = item.PreparedSnapshot[:0]
	}
	if !propPreparedSnapshotOffsetPresented {
		item.PreparedSnapshotOffset = 0
	}
	if !propPreparedSnapshotProgressPresented {
		item.PreparedSnapshotProgress = 0
	}
	if !propPreparedSnapshotSizePresented {
		item.PreparedSnapshotSize = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BarsicEngineStatusBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BarsicEngineStatusBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicEngineStatusBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexVersion := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"version":`...)
	w = basictl.JSONWriteStringBytes(w, item.Version)
	if (len(item.Version) != 0) == false {
		w = w[:backupIndexVersion]
	}
	backupIndexLoadedSnapshot := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"loaded_snapshot":`...)
	w = basictl.JSONWriteStringBytes(w, item.LoadedSnapshot)
	if (len(item.LoadedSnapshot) != 0) == false {
		w = w[:backupIndexLoadedSnapshot]
	}
	backupIndexLoadedSnapshotOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"loaded_snapshot_offset":`...)
	w = basictl.JSONWriteInt64(w, item.LoadedSnapshotOffset)
	if (item.LoadedSnapshotOffset != 0) == false {
		w = w[:backupIndexLoadedSnapshotOffset]
	}
	backupIndexLoadedSnapshotProgress := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"loaded_snapshot_progress":`...)
	w = basictl.JSONWriteInt64(w, item.LoadedSnapshotProgress)
	if (item.LoadedSnapshotProgress != 0) == false {
		w = w[:backupIndexLoadedSnapshotProgress]
	}
	backupIndexLoadedSnapshotSize := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"loaded_snapshot_size":`...)
	w = basictl.JSONWriteInt64(w, item.LoadedSnapshotSize)
	if (item.LoadedSnapshotSize != 0) == false {
		w = w[:backupIndexLoadedSnapshotSize]
	}
	backupIndexPreparedSnapshot := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"prepared_snapshot":`...)
	w = basictl.JSONWriteStringBytes(w, item.PreparedSnapshot)
	if (len(item.PreparedSnapshot) != 0) == false {
		w = w[:backupIndexPreparedSnapshot]
	}
	backupIndexPreparedSnapshotOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"prepared_snapshot_offset":`...)
	w = basictl.JSONWriteInt64(w, item.PreparedSnapshotOffset)
	if (item.PreparedSnapshotOffset != 0) == false {
		w = w[:backupIndexPreparedSnapshotOffset]
	}
	backupIndexPreparedSnapshotProgress := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"prepared_snapshot_progress":`...)
	w = basictl.JSONWriteInt64(w, item.PreparedSnapshotProgress)
	if (item.PreparedSnapshotProgress != 0) == false {
		w = w[:backupIndexPreparedSnapshotProgress]
	}
	backupIndexPreparedSnapshotSize := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"prepared_snapshot_size":`...)
	w = basictl.JSONWriteInt64(w, item.PreparedSnapshotSize)
	if (item.PreparedSnapshotSize != 0) == false {
		w = w[:backupIndexPreparedSnapshotSize]
	}
	return append(w, '}')
}

func (item *BarsicEngineStatusBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BarsicEngineStatusBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("barsic.engineStatus", err.Error())
	}
	return nil
}

func (item *BarsicEngineStatusBytes) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	return w
}

func (item *BarsicEngineStatusBytes) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return r, internal.ErrorTL2SerializersNotGenerated("barsic.engineStatus")
}
