// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicEngineStatus

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tl/tlTrue"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicEngineStatus struct {
	FieldsMask               uint32
	Version                  string
	LoadedSnapshot           string
	LoadedSnapshotOffset     int64
	LoadedSnapshotProgress   int64
	LoadedSnapshotSize       int64
	PreparedSnapshot         string
	PreparedSnapshotOffset   int64
	PreparedSnapshotProgress int64
	PreparedSnapshotSize     int64
}

func (BarsicEngineStatus) TLName() string { return "barsic.engineStatus" }
func (BarsicEngineStatus) TLTag() uint32  { return 0xbfe7b094 }

func (item *BarsicEngineStatus) Reset() {
	item.FieldsMask = 0
	item.Version = ""
	item.LoadedSnapshot = ""
	item.LoadedSnapshotOffset = 0
	item.LoadedSnapshotProgress = 0
	item.LoadedSnapshotSize = 0
	item.PreparedSnapshot = ""
	item.PreparedSnapshotOffset = 0
	item.PreparedSnapshotProgress = 0
	item.PreparedSnapshotSize = 0
}

func (item *BarsicEngineStatus) FillRandom(gen basictl.Rand) {
	item.FieldsMask = basictl.RandomUint(gen)
	item.Version = basictl.RandomString(gen)
	item.LoadedSnapshot = basictl.RandomString(gen)
	item.LoadedSnapshotOffset = basictl.RandomLong(gen)
	item.LoadedSnapshotProgress = basictl.RandomLong(gen)
	item.LoadedSnapshotSize = basictl.RandomLong(gen)
	item.PreparedSnapshot = basictl.RandomString(gen)
	item.PreparedSnapshotOffset = basictl.RandomLong(gen)
	item.PreparedSnapshotProgress = basictl.RandomLong(gen)
	item.PreparedSnapshotSize = basictl.RandomLong(gen)
}

func (item *BarsicEngineStatus) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.LoadedSnapshot); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotOffset); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotProgress); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotSize); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.PreparedSnapshot); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PreparedSnapshotOffset); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PreparedSnapshotProgress); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.PreparedSnapshotSize)
}

func (item *BarsicEngineStatus) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWrite(w, item.Version)
	w = basictl.StringWrite(w, item.LoadedSnapshot)
	w = basictl.LongWrite(w, item.LoadedSnapshotOffset)
	w = basictl.LongWrite(w, item.LoadedSnapshotProgress)
	w = basictl.LongWrite(w, item.LoadedSnapshotSize)
	w = basictl.StringWrite(w, item.PreparedSnapshot)
	w = basictl.LongWrite(w, item.PreparedSnapshotOffset)
	w = basictl.LongWrite(w, item.PreparedSnapshotProgress)
	return basictl.LongWrite(w, item.PreparedSnapshotSize), nil
}

func (item *BarsicEngineStatus) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xbfe7b094); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicEngineStatus) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0xbfe7b094)
	return item.Write(w)
}

func (item *BarsicEngineStatus) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicEngineStatus) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *BarsicEngineStatus) ReadResultJSON(legacyTypeNames bool, j interface{}, ret *tlTrue.True) error {
	if err := ret.ReadJSONLegacy(legacyTypeNames, j); err != nil {
		return err
	}
	return nil
}

func (item *BarsicEngineStatus) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *BarsicEngineStatus) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	if w, err = ret.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *BarsicEngineStatus) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicEngineStatus) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *BarsicEngineStatus) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := internal.JsonBytesToInterface(r)
	if err != nil {
		return r, w, internal.ErrorInvalidJSON("barsic.engineStatus", err.Error())
	}
	var ret tlTrue.True
	if err = item.ReadResultJSON(true, j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicEngineStatus) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *BarsicEngineStatus) ReadJSONLegacy(legacyTypeNames bool, j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON("barsic.engineStatus", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := internal.JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jVersion := _jm["version"]
	delete(_jm, "version")
	if err := internal.JsonReadString(_jVersion, &item.Version); err != nil {
		return err
	}
	_jLoadedSnapshot := _jm["loaded_snapshot"]
	delete(_jm, "loaded_snapshot")
	if err := internal.JsonReadString(_jLoadedSnapshot, &item.LoadedSnapshot); err != nil {
		return err
	}
	_jLoadedSnapshotOffset := _jm["loaded_snapshot_offset"]
	delete(_jm, "loaded_snapshot_offset")
	if err := internal.JsonReadInt64(_jLoadedSnapshotOffset, &item.LoadedSnapshotOffset); err != nil {
		return err
	}
	_jLoadedSnapshotProgress := _jm["loaded_snapshot_progress"]
	delete(_jm, "loaded_snapshot_progress")
	if err := internal.JsonReadInt64(_jLoadedSnapshotProgress, &item.LoadedSnapshotProgress); err != nil {
		return err
	}
	_jLoadedSnapshotSize := _jm["loaded_snapshot_size"]
	delete(_jm, "loaded_snapshot_size")
	if err := internal.JsonReadInt64(_jLoadedSnapshotSize, &item.LoadedSnapshotSize); err != nil {
		return err
	}
	_jPreparedSnapshot := _jm["prepared_snapshot"]
	delete(_jm, "prepared_snapshot")
	if err := internal.JsonReadString(_jPreparedSnapshot, &item.PreparedSnapshot); err != nil {
		return err
	}
	_jPreparedSnapshotOffset := _jm["prepared_snapshot_offset"]
	delete(_jm, "prepared_snapshot_offset")
	if err := internal.JsonReadInt64(_jPreparedSnapshotOffset, &item.PreparedSnapshotOffset); err != nil {
		return err
	}
	_jPreparedSnapshotProgress := _jm["prepared_snapshot_progress"]
	delete(_jm, "prepared_snapshot_progress")
	if err := internal.JsonReadInt64(_jPreparedSnapshotProgress, &item.PreparedSnapshotProgress); err != nil {
		return err
	}
	_jPreparedSnapshotSize := _jm["prepared_snapshot_size"]
	delete(_jm, "prepared_snapshot_size")
	if err := internal.JsonReadInt64(_jPreparedSnapshotSize, &item.PreparedSnapshotSize); err != nil {
		return err
	}
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement("barsic.engineStatus", k)
	}
	return nil
}

func (item *BarsicEngineStatus) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propVersionPresented bool
	var propLoadedSnapshotPresented bool
	var propLoadedSnapshotOffsetPresented bool
	var propLoadedSnapshotProgressPresented bool
	var propLoadedSnapshotSizePresented bool
	var propPreparedSnapshotPresented bool
	var propPreparedSnapshotOffsetPresented bool
	var propPreparedSnapshotProgressPresented bool
	var propPreparedSnapshotSizePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "version":
				if propVersionPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "version")
				}
				if err := internal.Json2ReadString(in, &item.Version); err != nil {
					return err
				}
				propVersionPresented = true
			case "loaded_snapshot":
				if propLoadedSnapshotPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot")
				}
				if err := internal.Json2ReadString(in, &item.LoadedSnapshot); err != nil {
					return err
				}
				propLoadedSnapshotPresented = true
			case "loaded_snapshot_offset":
				if propLoadedSnapshotOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotOffset); err != nil {
					return err
				}
				propLoadedSnapshotOffsetPresented = true
			case "loaded_snapshot_progress":
				if propLoadedSnapshotProgressPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_progress")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotProgress); err != nil {
					return err
				}
				propLoadedSnapshotProgressPresented = true
			case "loaded_snapshot_size":
				if propLoadedSnapshotSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_size")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotSize); err != nil {
					return err
				}
				propLoadedSnapshotSizePresented = true
			case "prepared_snapshot":
				if propPreparedSnapshotPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot")
				}
				if err := internal.Json2ReadString(in, &item.PreparedSnapshot); err != nil {
					return err
				}
				propPreparedSnapshotPresented = true
			case "prepared_snapshot_offset":
				if propPreparedSnapshotOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotOffset); err != nil {
					return err
				}
				propPreparedSnapshotOffsetPresented = true
			case "prepared_snapshot_progress":
				if propPreparedSnapshotProgressPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_progress")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotProgress); err != nil {
					return err
				}
				propPreparedSnapshotProgressPresented = true
			case "prepared_snapshot_size":
				if propPreparedSnapshotSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_size")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotSize); err != nil {
					return err
				}
				propPreparedSnapshotSizePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.engineStatus", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propVersionPresented {
		item.Version = ""
	}
	if !propLoadedSnapshotPresented {
		item.LoadedSnapshot = ""
	}
	if !propLoadedSnapshotOffsetPresented {
		item.LoadedSnapshotOffset = 0
	}
	if !propLoadedSnapshotProgressPresented {
		item.LoadedSnapshotProgress = 0
	}
	if !propLoadedSnapshotSizePresented {
		item.LoadedSnapshotSize = 0
	}
	if !propPreparedSnapshotPresented {
		item.PreparedSnapshot = ""
	}
	if !propPreparedSnapshotOffsetPresented {
		item.PreparedSnapshotOffset = 0
	}
	if !propPreparedSnapshotProgressPresented {
		item.PreparedSnapshotProgress = 0
	}
	if !propPreparedSnapshotSizePresented {
		item.PreparedSnapshotSize = 0
	}
	return nil
}

func (item *BarsicEngineStatus) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicEngineStatus) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.Version) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"version":`...)
		w = basictl.JSONWriteString(w, item.Version)
	}
	if len(item.LoadedSnapshot) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"loaded_snapshot":`...)
		w = basictl.JSONWriteString(w, item.LoadedSnapshot)
	}
	if item.LoadedSnapshotOffset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"loaded_snapshot_offset":`...)
		w = basictl.JSONWriteInt64(w, item.LoadedSnapshotOffset)
	}
	if item.LoadedSnapshotProgress != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"loaded_snapshot_progress":`...)
		w = basictl.JSONWriteInt64(w, item.LoadedSnapshotProgress)
	}
	if item.LoadedSnapshotSize != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"loaded_snapshot_size":`...)
		w = basictl.JSONWriteInt64(w, item.LoadedSnapshotSize)
	}
	if len(item.PreparedSnapshot) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"prepared_snapshot":`...)
		w = basictl.JSONWriteString(w, item.PreparedSnapshot)
	}
	if item.PreparedSnapshotOffset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"prepared_snapshot_offset":`...)
		w = basictl.JSONWriteInt64(w, item.PreparedSnapshotOffset)
	}
	if item.PreparedSnapshotProgress != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"prepared_snapshot_progress":`...)
		w = basictl.JSONWriteInt64(w, item.PreparedSnapshotProgress)
	}
	if item.PreparedSnapshotSize != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"prepared_snapshot_size":`...)
		w = basictl.JSONWriteInt64(w, item.PreparedSnapshotSize)
	}
	return append(w, '}'), nil
}

func (item *BarsicEngineStatus) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BarsicEngineStatus) UnmarshalJSON(b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON("barsic.engineStatus", err.Error())
	}
	if err = item.ReadJSONLegacy(true, j); err != nil {
		return internal.ErrorInvalidJSON("barsic.engineStatus", err.Error())
	}
	return nil
}

type BarsicEngineStatusBytes struct {
	FieldsMask               uint32
	Version                  []byte
	LoadedSnapshot           []byte
	LoadedSnapshotOffset     int64
	LoadedSnapshotProgress   int64
	LoadedSnapshotSize       int64
	PreparedSnapshot         []byte
	PreparedSnapshotOffset   int64
	PreparedSnapshotProgress int64
	PreparedSnapshotSize     int64
}

func (BarsicEngineStatusBytes) TLName() string { return "barsic.engineStatus" }
func (BarsicEngineStatusBytes) TLTag() uint32  { return 0xbfe7b094 }

func (item *BarsicEngineStatusBytes) Reset() {
	item.FieldsMask = 0
	item.Version = item.Version[:0]
	item.LoadedSnapshot = item.LoadedSnapshot[:0]
	item.LoadedSnapshotOffset = 0
	item.LoadedSnapshotProgress = 0
	item.LoadedSnapshotSize = 0
	item.PreparedSnapshot = item.PreparedSnapshot[:0]
	item.PreparedSnapshotOffset = 0
	item.PreparedSnapshotProgress = 0
	item.PreparedSnapshotSize = 0
}

func (item *BarsicEngineStatusBytes) FillRandom(gen basictl.Rand) {
	item.FieldsMask = basictl.RandomUint(gen)
	item.Version = basictl.RandomStringBytes(gen)
	item.LoadedSnapshot = basictl.RandomStringBytes(gen)
	item.LoadedSnapshotOffset = basictl.RandomLong(gen)
	item.LoadedSnapshotProgress = basictl.RandomLong(gen)
	item.LoadedSnapshotSize = basictl.RandomLong(gen)
	item.PreparedSnapshot = basictl.RandomStringBytes(gen)
	item.PreparedSnapshotOffset = basictl.RandomLong(gen)
	item.PreparedSnapshotProgress = basictl.RandomLong(gen)
	item.PreparedSnapshotSize = basictl.RandomLong(gen)
}

func (item *BarsicEngineStatusBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.LoadedSnapshot); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotOffset); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotProgress); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.LoadedSnapshotSize); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.PreparedSnapshot); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PreparedSnapshotOffset); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PreparedSnapshotProgress); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.PreparedSnapshotSize)
}

func (item *BarsicEngineStatusBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWriteBytes(w, item.Version)
	w = basictl.StringWriteBytes(w, item.LoadedSnapshot)
	w = basictl.LongWrite(w, item.LoadedSnapshotOffset)
	w = basictl.LongWrite(w, item.LoadedSnapshotProgress)
	w = basictl.LongWrite(w, item.LoadedSnapshotSize)
	w = basictl.StringWriteBytes(w, item.PreparedSnapshot)
	w = basictl.LongWrite(w, item.PreparedSnapshotOffset)
	w = basictl.LongWrite(w, item.PreparedSnapshotProgress)
	return basictl.LongWrite(w, item.PreparedSnapshotSize), nil
}

func (item *BarsicEngineStatusBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xbfe7b094); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicEngineStatusBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0xbfe7b094)
	return item.Write(w)
}

func (item *BarsicEngineStatusBytes) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicEngineStatusBytes) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *BarsicEngineStatusBytes) ReadResultJSON(legacyTypeNames bool, j interface{}, ret *tlTrue.True) error {
	if err := ret.ReadJSONLegacy(legacyTypeNames, j); err != nil {
		return err
	}
	return nil
}

func (item *BarsicEngineStatusBytes) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *BarsicEngineStatusBytes) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	if w, err = ret.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *BarsicEngineStatusBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicEngineStatusBytes) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *BarsicEngineStatusBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := internal.JsonBytesToInterface(r)
	if err != nil {
		return r, w, internal.ErrorInvalidJSON("barsic.engineStatus", err.Error())
	}
	var ret tlTrue.True
	if err = item.ReadResultJSON(true, j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicEngineStatusBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *BarsicEngineStatusBytes) ReadJSONLegacy(legacyTypeNames bool, j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON("barsic.engineStatus", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := internal.JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jVersion := _jm["version"]
	delete(_jm, "version")
	if err := internal.JsonReadStringBytes(_jVersion, &item.Version); err != nil {
		return err
	}
	_jLoadedSnapshot := _jm["loaded_snapshot"]
	delete(_jm, "loaded_snapshot")
	if err := internal.JsonReadStringBytes(_jLoadedSnapshot, &item.LoadedSnapshot); err != nil {
		return err
	}
	_jLoadedSnapshotOffset := _jm["loaded_snapshot_offset"]
	delete(_jm, "loaded_snapshot_offset")
	if err := internal.JsonReadInt64(_jLoadedSnapshotOffset, &item.LoadedSnapshotOffset); err != nil {
		return err
	}
	_jLoadedSnapshotProgress := _jm["loaded_snapshot_progress"]
	delete(_jm, "loaded_snapshot_progress")
	if err := internal.JsonReadInt64(_jLoadedSnapshotProgress, &item.LoadedSnapshotProgress); err != nil {
		return err
	}
	_jLoadedSnapshotSize := _jm["loaded_snapshot_size"]
	delete(_jm, "loaded_snapshot_size")
	if err := internal.JsonReadInt64(_jLoadedSnapshotSize, &item.LoadedSnapshotSize); err != nil {
		return err
	}
	_jPreparedSnapshot := _jm["prepared_snapshot"]
	delete(_jm, "prepared_snapshot")
	if err := internal.JsonReadStringBytes(_jPreparedSnapshot, &item.PreparedSnapshot); err != nil {
		return err
	}
	_jPreparedSnapshotOffset := _jm["prepared_snapshot_offset"]
	delete(_jm, "prepared_snapshot_offset")
	if err := internal.JsonReadInt64(_jPreparedSnapshotOffset, &item.PreparedSnapshotOffset); err != nil {
		return err
	}
	_jPreparedSnapshotProgress := _jm["prepared_snapshot_progress"]
	delete(_jm, "prepared_snapshot_progress")
	if err := internal.JsonReadInt64(_jPreparedSnapshotProgress, &item.PreparedSnapshotProgress); err != nil {
		return err
	}
	_jPreparedSnapshotSize := _jm["prepared_snapshot_size"]
	delete(_jm, "prepared_snapshot_size")
	if err := internal.JsonReadInt64(_jPreparedSnapshotSize, &item.PreparedSnapshotSize); err != nil {
		return err
	}
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement("barsic.engineStatus", k)
	}
	return nil
}

func (item *BarsicEngineStatusBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propVersionPresented bool
	var propLoadedSnapshotPresented bool
	var propLoadedSnapshotOffsetPresented bool
	var propLoadedSnapshotProgressPresented bool
	var propLoadedSnapshotSizePresented bool
	var propPreparedSnapshotPresented bool
	var propPreparedSnapshotOffsetPresented bool
	var propPreparedSnapshotProgressPresented bool
	var propPreparedSnapshotSizePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "version":
				if propVersionPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "version")
				}
				if err := internal.Json2ReadStringBytes(in, &item.Version); err != nil {
					return err
				}
				propVersionPresented = true
			case "loaded_snapshot":
				if propLoadedSnapshotPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot")
				}
				if err := internal.Json2ReadStringBytes(in, &item.LoadedSnapshot); err != nil {
					return err
				}
				propLoadedSnapshotPresented = true
			case "loaded_snapshot_offset":
				if propLoadedSnapshotOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotOffset); err != nil {
					return err
				}
				propLoadedSnapshotOffsetPresented = true
			case "loaded_snapshot_progress":
				if propLoadedSnapshotProgressPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_progress")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotProgress); err != nil {
					return err
				}
				propLoadedSnapshotProgressPresented = true
			case "loaded_snapshot_size":
				if propLoadedSnapshotSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "loaded_snapshot_size")
				}
				if err := internal.Json2ReadInt64(in, &item.LoadedSnapshotSize); err != nil {
					return err
				}
				propLoadedSnapshotSizePresented = true
			case "prepared_snapshot":
				if propPreparedSnapshotPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot")
				}
				if err := internal.Json2ReadStringBytes(in, &item.PreparedSnapshot); err != nil {
					return err
				}
				propPreparedSnapshotPresented = true
			case "prepared_snapshot_offset":
				if propPreparedSnapshotOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotOffset); err != nil {
					return err
				}
				propPreparedSnapshotOffsetPresented = true
			case "prepared_snapshot_progress":
				if propPreparedSnapshotProgressPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_progress")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotProgress); err != nil {
					return err
				}
				propPreparedSnapshotProgressPresented = true
			case "prepared_snapshot_size":
				if propPreparedSnapshotSizePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStatus", "prepared_snapshot_size")
				}
				if err := internal.Json2ReadInt64(in, &item.PreparedSnapshotSize); err != nil {
					return err
				}
				propPreparedSnapshotSizePresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.engineStatus", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propVersionPresented {
		item.Version = item.Version[:0]
	}
	if !propLoadedSnapshotPresented {
		item.LoadedSnapshot = item.LoadedSnapshot[:0]
	}
	if !propLoadedSnapshotOffsetPresented {
		item.LoadedSnapshotOffset = 0
	}
	if !propLoadedSnapshotProgressPresented {
		item.LoadedSnapshotProgress = 0
	}
	if !propLoadedSnapshotSizePresented {
		item.LoadedSnapshotSize = 0
	}
	if !propPreparedSnapshotPresented {
		item.PreparedSnapshot = item.PreparedSnapshot[:0]
	}
	if !propPreparedSnapshotOffsetPresented {
		item.PreparedSnapshotOffset = 0
	}
	if !propPreparedSnapshotProgressPresented {
		item.PreparedSnapshotProgress = 0
	}
	if !propPreparedSnapshotSizePresented {
		item.PreparedSnapshotSize = 0
	}
	return nil
}

func (item *BarsicEngineStatusBytes) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicEngineStatusBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.Version) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"version":`...)
		w = basictl.JSONWriteStringBytes(w, item.Version)
	}
	if len(item.LoadedSnapshot) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"loaded_snapshot":`...)
		w = basictl.JSONWriteStringBytes(w, item.LoadedSnapshot)
	}
	if item.LoadedSnapshotOffset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"loaded_snapshot_offset":`...)
		w = basictl.JSONWriteInt64(w, item.LoadedSnapshotOffset)
	}
	if item.LoadedSnapshotProgress != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"loaded_snapshot_progress":`...)
		w = basictl.JSONWriteInt64(w, item.LoadedSnapshotProgress)
	}
	if item.LoadedSnapshotSize != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"loaded_snapshot_size":`...)
		w = basictl.JSONWriteInt64(w, item.LoadedSnapshotSize)
	}
	if len(item.PreparedSnapshot) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"prepared_snapshot":`...)
		w = basictl.JSONWriteStringBytes(w, item.PreparedSnapshot)
	}
	if item.PreparedSnapshotOffset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"prepared_snapshot_offset":`...)
		w = basictl.JSONWriteInt64(w, item.PreparedSnapshotOffset)
	}
	if item.PreparedSnapshotProgress != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"prepared_snapshot_progress":`...)
		w = basictl.JSONWriteInt64(w, item.PreparedSnapshotProgress)
	}
	if item.PreparedSnapshotSize != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"prepared_snapshot_size":`...)
		w = basictl.JSONWriteInt64(w, item.PreparedSnapshotSize)
	}
	return append(w, '}'), nil
}

func (item *BarsicEngineStatusBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BarsicEngineStatusBytes) UnmarshalJSON(b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON("barsic.engineStatus", err.Error())
	}
	if err = item.ReadJSONLegacy(true, j); err != nil {
		return internal.ErrorInvalidJSON("barsic.engineStatus", err.Error())
	}
	return nil
}
