// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicReindex

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tl/tlTrue"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicReindex struct {
	FieldsMask uint32
	// Fast (TrueType) // Conditional: item.FieldsMask.0
	// Diff (TrueType) // Conditional: item.FieldsMask.1
}

func (BarsicReindex) TLName() string { return "barsic.reindex" }
func (BarsicReindex) TLTag() uint32  { return 0x6a8e47c1 }

func (item *BarsicReindex) SetFast(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item BarsicReindex) IsSetFast() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BarsicReindex) SetDiff(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item BarsicReindex) IsSetDiff() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *BarsicReindex) Reset() {
	item.FieldsMask = 0
}

func (item *BarsicReindex) FillRandom(gen basictl.Rand) {
	item.FieldsMask = basictl.RandomUint(gen)
}

func (item *BarsicReindex) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	return w, nil
}

func (item *BarsicReindex) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	return w, nil
}

func (item *BarsicReindex) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x6a8e47c1); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicReindex) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x6a8e47c1)
	return item.Write(w)
}

func (item *BarsicReindex) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicReindex) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *BarsicReindex) ReadResultJSON(legacyTypeNames bool, j interface{}, ret *tlTrue.True) error {
	if err := ret.ReadJSONLegacy(legacyTypeNames, j); err != nil {
		return err
	}
	return nil
}

func (item *BarsicReindex) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *BarsicReindex) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	if w, err = ret.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *BarsicReindex) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicReindex) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *BarsicReindex) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := internal.JsonBytesToInterface(r)
	if err != nil {
		return r, w, internal.ErrorInvalidJSON("barsic.reindex", err.Error())
	}
	var ret tlTrue.True
	if err = item.ReadResultJSON(true, j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicReindex) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *BarsicReindex) ReadJSONLegacy(legacyTypeNames bool, j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON("barsic.reindex", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := internal.JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jFast := _jm["fast"]
	delete(_jm, "fast")
	_jDiff := _jm["diff"]
	delete(_jm, "diff")
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement("barsic.reindex", k)
	}
	if _jFast != nil {
		_bit := false
		if err := internal.JsonReadBool(_jFast, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if _jDiff != nil {
		_bit := false
		if err := internal.JsonReadBool(_jDiff, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 1
		} else {
			item.FieldsMask &^= 1 << 1
		}
	}
	return nil
}

func (item *BarsicReindex) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var trueTypeFastPresented bool
	var trueTypeFastValue bool
	var trueTypeDiffPresented bool
	var trueTypeDiffValue bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.reindex", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "fast":
				if trueTypeFastPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.reindex", "fast")
				}
				if err := internal.Json2ReadBool(in, &trueTypeFastValue); err != nil {
					return err
				}
				trueTypeFastPresented = true
			case "diff":
				if trueTypeDiffPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.reindex", "diff")
				}
				if err := internal.Json2ReadBool(in, &trueTypeDiffValue); err != nil {
					return err
				}
				trueTypeDiffPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.reindex", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if trueTypeFastPresented {
		if trueTypeFastValue {
			item.FieldsMask |= 1 << 0
		}
	}
	if trueTypeDiffPresented {
		if trueTypeDiffValue {
			item.FieldsMask |= 1 << 1
		}
	}
	// tries to set bit to zero if it is 1
	if trueTypeFastPresented && !trueTypeFastValue && (item.FieldsMask&(1<<0) != 0) {
		return internal.ErrorInvalidJSON("barsic.reindex", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeDiffPresented && !trueTypeDiffValue && (item.FieldsMask&(1<<1) != 0) {
		return internal.ErrorInvalidJSON("barsic.reindex", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

func (item *BarsicReindex) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicReindex) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fast":true`...)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"diff":true`...)
	}
	return append(w, '}'), nil
}

func (item *BarsicReindex) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BarsicReindex) UnmarshalJSON(b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON("barsic.reindex", err.Error())
	}
	if err = item.ReadJSONLegacy(true, j); err != nil {
		return internal.ErrorInvalidJSON("barsic.reindex", err.Error())
	}
	return nil
}
