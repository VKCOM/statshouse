// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicSnapshotExternalFile

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicSnapshotExternalFile struct {
	FieldsMask   uint32
	RelativePath string
}

func (BarsicSnapshotExternalFile) TLName() string { return "barsic.snapshotExternalFile" }
func (BarsicSnapshotExternalFile) TLTag() uint32  { return 0x888c63ed }

func (item *BarsicSnapshotExternalFile) Reset() {
	item.FieldsMask = 0
	item.RelativePath = ""
}

func (item *BarsicSnapshotExternalFile) FillRandom(rg *basictl.RandGenerator) {
	item.RelativePath = basictl.RandomString(rg)
}

func (item *BarsicSnapshotExternalFile) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.RelativePath)
}

// This method is general version of Write, use it instead!
func (item *BarsicSnapshotExternalFile) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BarsicSnapshotExternalFile) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWrite(w, item.RelativePath)
	return w
}

func (item *BarsicSnapshotExternalFile) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x888c63ed); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *BarsicSnapshotExternalFile) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BarsicSnapshotExternalFile) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x888c63ed)
	return item.Write(w)
}

func (item BarsicSnapshotExternalFile) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BarsicSnapshotExternalFile) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propRelativePathPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotExternalFile", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "relative_path":
				if propRelativePathPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotExternalFile", "relative_path")
				}
				if err := internal.Json2ReadString(in, &item.RelativePath); err != nil {
					return err
				}
				propRelativePathPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.snapshotExternalFile", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propRelativePathPresented {
		item.RelativePath = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BarsicSnapshotExternalFile) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BarsicSnapshotExternalFile) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicSnapshotExternalFile) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexRelativePath := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"relative_path":`...)
	w = basictl.JSONWriteString(w, item.RelativePath)
	if (len(item.RelativePath) != 0) == false {
		w = w[:backupIndexRelativePath]
	}
	return append(w, '}')
}

func (item *BarsicSnapshotExternalFile) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BarsicSnapshotExternalFile) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotExternalFile", err.Error())
	}
	return nil
}

type BarsicSnapshotExternalFileBytes struct {
	FieldsMask   uint32
	RelativePath []byte
}

func (BarsicSnapshotExternalFileBytes) TLName() string { return "barsic.snapshotExternalFile" }
func (BarsicSnapshotExternalFileBytes) TLTag() uint32  { return 0x888c63ed }

func (item *BarsicSnapshotExternalFileBytes) Reset() {
	item.FieldsMask = 0
	item.RelativePath = item.RelativePath[:0]
}

func (item *BarsicSnapshotExternalFileBytes) FillRandom(rg *basictl.RandGenerator) {
	item.RelativePath = basictl.RandomStringBytes(rg)
}

func (item *BarsicSnapshotExternalFileBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	return basictl.StringReadBytes(w, &item.RelativePath)
}

// This method is general version of Write, use it instead!
func (item *BarsicSnapshotExternalFileBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BarsicSnapshotExternalFileBytes) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWriteBytes(w, item.RelativePath)
	return w
}

func (item *BarsicSnapshotExternalFileBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x888c63ed); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *BarsicSnapshotExternalFileBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BarsicSnapshotExternalFileBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x888c63ed)
	return item.Write(w)
}

func (item BarsicSnapshotExternalFileBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BarsicSnapshotExternalFileBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propRelativePathPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotExternalFile", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "relative_path":
				if propRelativePathPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotExternalFile", "relative_path")
				}
				if err := internal.Json2ReadStringBytes(in, &item.RelativePath); err != nil {
					return err
				}
				propRelativePathPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.snapshotExternalFile", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propRelativePathPresented {
		item.RelativePath = item.RelativePath[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BarsicSnapshotExternalFileBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BarsicSnapshotExternalFileBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicSnapshotExternalFileBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexRelativePath := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"relative_path":`...)
	w = basictl.JSONWriteStringBytes(w, item.RelativePath)
	if (len(item.RelativePath) != 0) == false {
		w = w[:backupIndexRelativePath]
	}
	return append(w, '}')
}

func (item *BarsicSnapshotExternalFileBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BarsicSnapshotExternalFileBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotExternalFile", err.Error())
	}
	return nil
}
