// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicSnapshotDependency

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicSnapshotDependency struct {
	FieldsMask    uint32
	ClusterId     string
	ShardId       string
	PayloadOffset int64
}

func (BarsicSnapshotDependency) TLName() string { return "barsic.snapshotDependency" }
func (BarsicSnapshotDependency) TLTag() uint32  { return 0x8258fc86 }

func (item *BarsicSnapshotDependency) Reset() {
	item.FieldsMask = 0
	item.ClusterId = ""
	item.ShardId = ""
	item.PayloadOffset = 0
}

func (item *BarsicSnapshotDependency) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.ShardId); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.PayloadOffset)
}

func (item *BarsicSnapshotDependency) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = basictl.StringWrite(w, item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringWrite(w, item.ShardId); err != nil {
		return w, err
	}
	return basictl.LongWrite(w, item.PayloadOffset), nil
}

func (item *BarsicSnapshotDependency) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x8258fc86); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicSnapshotDependency) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x8258fc86)
	return item.Write(w)
}

func (item BarsicSnapshotDependency) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func BarsicSnapshotDependency__ReadJSON(item *BarsicSnapshotDependency, j interface{}) error {
	return item.readJSON(j)
}
func (item *BarsicSnapshotDependency) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON("barsic.snapshotDependency", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := internal.JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jClusterId := _jm["cluster_id"]
	delete(_jm, "cluster_id")
	if err := internal.JsonReadString(_jClusterId, &item.ClusterId); err != nil {
		return err
	}
	_jShardId := _jm["shard_id"]
	delete(_jm, "shard_id")
	if err := internal.JsonReadString(_jShardId, &item.ShardId); err != nil {
		return err
	}
	_jPayloadOffset := _jm["payload_offset"]
	delete(_jm, "payload_offset")
	if err := internal.JsonReadInt64(_jPayloadOffset, &item.PayloadOffset); err != nil {
		return err
	}
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement("barsic.snapshotDependency", k)
	}
	return nil
}

func (item *BarsicSnapshotDependency) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *BarsicSnapshotDependency) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.ClusterId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"cluster_id":`...)
		w = basictl.JSONWriteString(w, item.ClusterId)
	}
	if len(item.ShardId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"shard_id":`...)
		w = basictl.JSONWriteString(w, item.ShardId)
	}
	if item.PayloadOffset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"payload_offset":`...)
		w = basictl.JSONWriteInt64(w, item.PayloadOffset)
	}
	return append(w, '}'), nil
}

func (item *BarsicSnapshotDependency) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BarsicSnapshotDependency) UnmarshalJSON(b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotDependency", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotDependency", err.Error())
	}
	return nil
}

type BarsicSnapshotDependencyBytes struct {
	FieldsMask    uint32
	ClusterId     []byte
	ShardId       []byte
	PayloadOffset int64
}

func (BarsicSnapshotDependencyBytes) TLName() string { return "barsic.snapshotDependency" }
func (BarsicSnapshotDependencyBytes) TLTag() uint32  { return 0x8258fc86 }

func (item *BarsicSnapshotDependencyBytes) Reset() {
	item.FieldsMask = 0
	item.ClusterId = item.ClusterId[:0]
	item.ShardId = item.ShardId[:0]
	item.PayloadOffset = 0
}

func (item *BarsicSnapshotDependencyBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.ShardId); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.PayloadOffset)
}

func (item *BarsicSnapshotDependencyBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = basictl.StringWriteBytes(w, item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringWriteBytes(w, item.ShardId); err != nil {
		return w, err
	}
	return basictl.LongWrite(w, item.PayloadOffset), nil
}

func (item *BarsicSnapshotDependencyBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x8258fc86); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicSnapshotDependencyBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x8258fc86)
	return item.Write(w)
}

func (item BarsicSnapshotDependencyBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func BarsicSnapshotDependencyBytes__ReadJSON(item *BarsicSnapshotDependencyBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *BarsicSnapshotDependencyBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON("barsic.snapshotDependency", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := internal.JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jClusterId := _jm["cluster_id"]
	delete(_jm, "cluster_id")
	if err := internal.JsonReadStringBytes(_jClusterId, &item.ClusterId); err != nil {
		return err
	}
	_jShardId := _jm["shard_id"]
	delete(_jm, "shard_id")
	if err := internal.JsonReadStringBytes(_jShardId, &item.ShardId); err != nil {
		return err
	}
	_jPayloadOffset := _jm["payload_offset"]
	delete(_jm, "payload_offset")
	if err := internal.JsonReadInt64(_jPayloadOffset, &item.PayloadOffset); err != nil {
		return err
	}
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement("barsic.snapshotDependency", k)
	}
	return nil
}

func (item *BarsicSnapshotDependencyBytes) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *BarsicSnapshotDependencyBytes) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.ClusterId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"cluster_id":`...)
		w = basictl.JSONWriteStringBytes(w, item.ClusterId)
	}
	if len(item.ShardId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"shard_id":`...)
		w = basictl.JSONWriteStringBytes(w, item.ShardId)
	}
	if item.PayloadOffset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"payload_offset":`...)
		w = basictl.JSONWriteInt64(w, item.PayloadOffset)
	}
	return append(w, '}'), nil
}

func (item *BarsicSnapshotDependencyBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BarsicSnapshotDependencyBytes) UnmarshalJSON(b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotDependency", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotDependency", err.Error())
	}
	return nil
}
