// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicSnapshotDependency

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicSnapshotDependency struct {
	FieldsMask    uint32
	ClusterId     string
	ShardId       string
	PayloadOffset int64
}

func (BarsicSnapshotDependency) TLName() string { return "barsic.snapshotDependency" }
func (BarsicSnapshotDependency) TLTag() uint32  { return 0x8258fc86 }

func (item *BarsicSnapshotDependency) Reset() {
	item.FieldsMask = 0
	item.ClusterId = ""
	item.ShardId = ""
	item.PayloadOffset = 0
}

func (item *BarsicSnapshotDependency) FillRandom(rg *basictl.RandGenerator) {
	item.ClusterId = basictl.RandomString(rg)
	item.ShardId = basictl.RandomString(rg)
	item.PayloadOffset = basictl.RandomLong(rg)
}

func (item *BarsicSnapshotDependency) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.ShardId); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.PayloadOffset)
}

// This method is general version of Write, use it instead!
func (item *BarsicSnapshotDependency) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BarsicSnapshotDependency) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWrite(w, item.ClusterId)
	w = basictl.StringWrite(w, item.ShardId)
	w = basictl.LongWrite(w, item.PayloadOffset)
	return w
}

func (item *BarsicSnapshotDependency) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x8258fc86); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *BarsicSnapshotDependency) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BarsicSnapshotDependency) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x8258fc86)
	return item.Write(w)
}

func (item BarsicSnapshotDependency) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BarsicSnapshotDependency) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propClusterIdPresented bool
	var propShardIdPresented bool
	var propPayloadOffsetPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotDependency", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "cluster_id":
				if propClusterIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotDependency", "cluster_id")
				}
				if err := internal.Json2ReadString(in, &item.ClusterId); err != nil {
					return err
				}
				propClusterIdPresented = true
			case "shard_id":
				if propShardIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotDependency", "shard_id")
				}
				if err := internal.Json2ReadString(in, &item.ShardId); err != nil {
					return err
				}
				propShardIdPresented = true
			case "payload_offset":
				if propPayloadOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotDependency", "payload_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.PayloadOffset); err != nil {
					return err
				}
				propPayloadOffsetPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.snapshotDependency", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propClusterIdPresented {
		item.ClusterId = ""
	}
	if !propShardIdPresented {
		item.ShardId = ""
	}
	if !propPayloadOffsetPresented {
		item.PayloadOffset = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BarsicSnapshotDependency) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BarsicSnapshotDependency) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicSnapshotDependency) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexClusterId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"cluster_id":`...)
	w = basictl.JSONWriteString(w, item.ClusterId)
	if (len(item.ClusterId) != 0) == false {
		w = w[:backupIndexClusterId]
	}
	backupIndexShardId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"shard_id":`...)
	w = basictl.JSONWriteString(w, item.ShardId)
	if (len(item.ShardId) != 0) == false {
		w = w[:backupIndexShardId]
	}
	backupIndexPayloadOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"payload_offset":`...)
	w = basictl.JSONWriteInt64(w, item.PayloadOffset)
	if (item.PayloadOffset != 0) == false {
		w = w[:backupIndexPayloadOffset]
	}
	return append(w, '}')
}

func (item *BarsicSnapshotDependency) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BarsicSnapshotDependency) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotDependency", err.Error())
	}
	return nil
}

type BarsicSnapshotDependencyBytes struct {
	FieldsMask    uint32
	ClusterId     []byte
	ShardId       []byte
	PayloadOffset int64
}

func (BarsicSnapshotDependencyBytes) TLName() string { return "barsic.snapshotDependency" }
func (BarsicSnapshotDependencyBytes) TLTag() uint32  { return 0x8258fc86 }

func (item *BarsicSnapshotDependencyBytes) Reset() {
	item.FieldsMask = 0
	item.ClusterId = item.ClusterId[:0]
	item.ShardId = item.ShardId[:0]
	item.PayloadOffset = 0
}

func (item *BarsicSnapshotDependencyBytes) FillRandom(rg *basictl.RandGenerator) {
	item.ClusterId = basictl.RandomStringBytes(rg)
	item.ShardId = basictl.RandomStringBytes(rg)
	item.PayloadOffset = basictl.RandomLong(rg)
}

func (item *BarsicSnapshotDependencyBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.ShardId); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.PayloadOffset)
}

// This method is general version of Write, use it instead!
func (item *BarsicSnapshotDependencyBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BarsicSnapshotDependencyBytes) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWriteBytes(w, item.ClusterId)
	w = basictl.StringWriteBytes(w, item.ShardId)
	w = basictl.LongWrite(w, item.PayloadOffset)
	return w
}

func (item *BarsicSnapshotDependencyBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x8258fc86); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *BarsicSnapshotDependencyBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BarsicSnapshotDependencyBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x8258fc86)
	return item.Write(w)
}

func (item BarsicSnapshotDependencyBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BarsicSnapshotDependencyBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propClusterIdPresented bool
	var propShardIdPresented bool
	var propPayloadOffsetPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotDependency", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "cluster_id":
				if propClusterIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotDependency", "cluster_id")
				}
				if err := internal.Json2ReadStringBytes(in, &item.ClusterId); err != nil {
					return err
				}
				propClusterIdPresented = true
			case "shard_id":
				if propShardIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotDependency", "shard_id")
				}
				if err := internal.Json2ReadStringBytes(in, &item.ShardId); err != nil {
					return err
				}
				propShardIdPresented = true
			case "payload_offset":
				if propPayloadOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotDependency", "payload_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.PayloadOffset); err != nil {
					return err
				}
				propPayloadOffsetPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.snapshotDependency", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propClusterIdPresented {
		item.ClusterId = item.ClusterId[:0]
	}
	if !propShardIdPresented {
		item.ShardId = item.ShardId[:0]
	}
	if !propPayloadOffsetPresented {
		item.PayloadOffset = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BarsicSnapshotDependencyBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BarsicSnapshotDependencyBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicSnapshotDependencyBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexClusterId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"cluster_id":`...)
	w = basictl.JSONWriteStringBytes(w, item.ClusterId)
	if (len(item.ClusterId) != 0) == false {
		w = w[:backupIndexClusterId]
	}
	backupIndexShardId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"shard_id":`...)
	w = basictl.JSONWriteStringBytes(w, item.ShardId)
	if (len(item.ShardId) != 0) == false {
		w = w[:backupIndexShardId]
	}
	backupIndexPayloadOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"payload_offset":`...)
	w = basictl.JSONWriteInt64(w, item.PayloadOffset)
	if (item.PayloadOffset != 0) == false {
		w = w[:backupIndexPayloadOffset]
	}
	return append(w, '}')
}

func (item *BarsicSnapshotDependencyBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BarsicSnapshotDependencyBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotDependency", err.Error())
	}
	return nil
}
