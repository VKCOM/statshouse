// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicEngineStarted

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tl/tlTrue"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicEngineStarted struct {
	FieldsMask uint32
	// LegacyStart (TrueType) // Conditional: item.FieldsMask.0
	// EngineUpgrade (TrueType) // Conditional: item.FieldsMask.1
	Offset          int64
	SnapshotMeta    string
	ControlMeta     string
	ProtocolVersion uint32 // Conditional: item.FieldsMask.2
}

func (BarsicEngineStarted) TLName() string { return "barsic.engineStarted" }
func (BarsicEngineStarted) TLTag() uint32  { return 0x4798167a }

func (item *BarsicEngineStarted) SetLegacyStart(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item BarsicEngineStarted) IsSetLegacyStart() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BarsicEngineStarted) SetEngineUpgrade(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item BarsicEngineStarted) IsSetEngineUpgrade() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *BarsicEngineStarted) SetProtocolVersion(v uint32) {
	item.ProtocolVersion = v
	item.FieldsMask |= 1 << 2
}
func (item *BarsicEngineStarted) ClearProtocolVersion() {
	item.ProtocolVersion = 0
	item.FieldsMask &^= 1 << 2
}
func (item BarsicEngineStarted) IsSetProtocolVersion() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *BarsicEngineStarted) Reset() {
	item.FieldsMask = 0
	item.Offset = 0
	item.SnapshotMeta = ""
	item.ControlMeta = ""
	item.ProtocolVersion = 0
}

func (item *BarsicEngineStarted) FillRandom(rg *basictl.RandGenerator) {
	var maskFieldsMask uint32
	maskFieldsMask = basictl.RandomUint(rg)
	item.FieldsMask = 0
	if maskFieldsMask&(1<<0) != 0 {
		item.FieldsMask |= (1 << 0)
	}
	if maskFieldsMask&(1<<1) != 0 {
		item.FieldsMask |= (1 << 1)
	}
	if maskFieldsMask&(1<<2) != 0 {
		item.FieldsMask |= (1 << 2)
	}
	item.Offset = basictl.RandomLong(rg)
	item.SnapshotMeta = basictl.RandomString(rg)
	item.ControlMeta = basictl.RandomString(rg)
	if item.FieldsMask&(1<<2) != 0 {
	} else {
		item.ProtocolVersion = 0
	}
}

func (item *BarsicEngineStarted) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.Offset); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.SnapshotMeta); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.ControlMeta); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.NatRead(w, &item.ProtocolVersion); err != nil {
			return w, err
		}
	} else {
		item.ProtocolVersion = 0
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *BarsicEngineStarted) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BarsicEngineStarted) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.LongWrite(w, item.Offset)
	w = basictl.StringWrite(w, item.SnapshotMeta)
	w = basictl.StringWrite(w, item.ControlMeta)
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.NatWrite(w, item.ProtocolVersion)
	}
	return w
}

func (item *BarsicEngineStarted) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4798167a); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *BarsicEngineStarted) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BarsicEngineStarted) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x4798167a)
	return item.Write(w)
}

func (item *BarsicEngineStarted) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicEngineStarted) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *BarsicEngineStarted) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *tlTrue.True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *BarsicEngineStarted) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *BarsicEngineStarted) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *BarsicEngineStarted) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicEngineStarted) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *BarsicEngineStarted) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret tlTrue.True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicEngineStarted) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BarsicEngineStarted) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var trueTypeLegacyStartPresented bool
	var trueTypeLegacyStartValue bool
	var trueTypeEngineUpgradePresented bool
	var trueTypeEngineUpgradeValue bool
	var propOffsetPresented bool
	var propSnapshotMetaPresented bool
	var propControlMetaPresented bool
	var propProtocolVersionPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "legacy_start":
				if trueTypeLegacyStartPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "legacy_start")
				}
				if err := internal.Json2ReadBool(in, &trueTypeLegacyStartValue); err != nil {
					return err
				}
				trueTypeLegacyStartPresented = true
			case "engine_upgrade":
				if trueTypeEngineUpgradePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "engine_upgrade")
				}
				if err := internal.Json2ReadBool(in, &trueTypeEngineUpgradeValue); err != nil {
					return err
				}
				trueTypeEngineUpgradePresented = true
			case "offset":
				if propOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "offset")
				}
				if err := internal.Json2ReadInt64(in, &item.Offset); err != nil {
					return err
				}
				propOffsetPresented = true
			case "snapshot_meta":
				if propSnapshotMetaPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "snapshot_meta")
				}
				if err := internal.Json2ReadString(in, &item.SnapshotMeta); err != nil {
					return err
				}
				propSnapshotMetaPresented = true
			case "control_meta":
				if propControlMetaPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "control_meta")
				}
				if err := internal.Json2ReadString(in, &item.ControlMeta); err != nil {
					return err
				}
				propControlMetaPresented = true
			case "protocol_version":
				if propProtocolVersionPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "protocol_version")
				}
				if err := internal.Json2ReadUint32(in, &item.ProtocolVersion); err != nil {
					return err
				}
				propProtocolVersionPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.engineStarted", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propOffsetPresented {
		item.Offset = 0
	}
	if !propSnapshotMetaPresented {
		item.SnapshotMeta = ""
	}
	if !propControlMetaPresented {
		item.ControlMeta = ""
	}
	if !propProtocolVersionPresented {
		item.ProtocolVersion = 0
	}
	if trueTypeLegacyStartPresented {
		if trueTypeLegacyStartValue {
			item.FieldsMask |= 1 << 0
		}
	}
	if trueTypeEngineUpgradePresented {
		if trueTypeEngineUpgradeValue {
			item.FieldsMask |= 1 << 1
		}
	}
	if propProtocolVersionPresented {
		item.FieldsMask |= 1 << 2
	}
	// tries to set bit to zero if it is 1
	if trueTypeLegacyStartPresented && !trueTypeLegacyStartValue && (item.FieldsMask&(1<<0) != 0) {
		return internal.ErrorInvalidJSON("barsic.engineStarted", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeEngineUpgradePresented && !trueTypeEngineUpgradeValue && (item.FieldsMask&(1<<1) != 0) {
		return internal.ErrorInvalidJSON("barsic.engineStarted", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BarsicEngineStarted) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BarsicEngineStarted) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicEngineStarted) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"legacy_start":true`...)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"engine_upgrade":true`...)
	}
	backupIndexOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"offset":`...)
	w = basictl.JSONWriteInt64(w, item.Offset)
	if (item.Offset != 0) == false {
		w = w[:backupIndexOffset]
	}
	backupIndexSnapshotMeta := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"snapshot_meta":`...)
	w = basictl.JSONWriteString(w, item.SnapshotMeta)
	if (len(item.SnapshotMeta) != 0) == false {
		w = w[:backupIndexSnapshotMeta]
	}
	backupIndexControlMeta := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"control_meta":`...)
	w = basictl.JSONWriteString(w, item.ControlMeta)
	if (len(item.ControlMeta) != 0) == false {
		w = w[:backupIndexControlMeta]
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"protocol_version":`...)
		w = basictl.JSONWriteUint32(w, item.ProtocolVersion)
	}
	return append(w, '}')
}

func (item *BarsicEngineStarted) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BarsicEngineStarted) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("barsic.engineStarted", err.Error())
	}
	return nil
}

type BarsicEngineStartedBytes struct {
	FieldsMask uint32
	// LegacyStart (TrueType) // Conditional: item.FieldsMask.0
	// EngineUpgrade (TrueType) // Conditional: item.FieldsMask.1
	Offset          int64
	SnapshotMeta    []byte
	ControlMeta     []byte
	ProtocolVersion uint32 // Conditional: item.FieldsMask.2
}

func (BarsicEngineStartedBytes) TLName() string { return "barsic.engineStarted" }
func (BarsicEngineStartedBytes) TLTag() uint32  { return 0x4798167a }

func (item *BarsicEngineStartedBytes) SetLegacyStart(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item BarsicEngineStartedBytes) IsSetLegacyStart() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BarsicEngineStartedBytes) SetEngineUpgrade(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item BarsicEngineStartedBytes) IsSetEngineUpgrade() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *BarsicEngineStartedBytes) SetProtocolVersion(v uint32) {
	item.ProtocolVersion = v
	item.FieldsMask |= 1 << 2
}
func (item *BarsicEngineStartedBytes) ClearProtocolVersion() {
	item.ProtocolVersion = 0
	item.FieldsMask &^= 1 << 2
}
func (item BarsicEngineStartedBytes) IsSetProtocolVersion() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *BarsicEngineStartedBytes) Reset() {
	item.FieldsMask = 0
	item.Offset = 0
	item.SnapshotMeta = item.SnapshotMeta[:0]
	item.ControlMeta = item.ControlMeta[:0]
	item.ProtocolVersion = 0
}

func (item *BarsicEngineStartedBytes) FillRandom(rg *basictl.RandGenerator) {
	var maskFieldsMask uint32
	maskFieldsMask = basictl.RandomUint(rg)
	item.FieldsMask = 0
	if maskFieldsMask&(1<<0) != 0 {
		item.FieldsMask |= (1 << 0)
	}
	if maskFieldsMask&(1<<1) != 0 {
		item.FieldsMask |= (1 << 1)
	}
	if maskFieldsMask&(1<<2) != 0 {
		item.FieldsMask |= (1 << 2)
	}
	item.Offset = basictl.RandomLong(rg)
	item.SnapshotMeta = basictl.RandomStringBytes(rg)
	item.ControlMeta = basictl.RandomStringBytes(rg)
	if item.FieldsMask&(1<<2) != 0 {
	} else {
		item.ProtocolVersion = 0
	}
}

func (item *BarsicEngineStartedBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.Offset); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.SnapshotMeta); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.ControlMeta); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.NatRead(w, &item.ProtocolVersion); err != nil {
			return w, err
		}
	} else {
		item.ProtocolVersion = 0
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *BarsicEngineStartedBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BarsicEngineStartedBytes) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.LongWrite(w, item.Offset)
	w = basictl.StringWriteBytes(w, item.SnapshotMeta)
	w = basictl.StringWriteBytes(w, item.ControlMeta)
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.NatWrite(w, item.ProtocolVersion)
	}
	return w
}

func (item *BarsicEngineStartedBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4798167a); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *BarsicEngineStartedBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BarsicEngineStartedBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x4798167a)
	return item.Write(w)
}

func (item *BarsicEngineStartedBytes) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicEngineStartedBytes) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *BarsicEngineStartedBytes) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *tlTrue.True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *BarsicEngineStartedBytes) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *BarsicEngineStartedBytes) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *BarsicEngineStartedBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicEngineStartedBytes) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *BarsicEngineStartedBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret tlTrue.True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicEngineStartedBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BarsicEngineStartedBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var trueTypeLegacyStartPresented bool
	var trueTypeLegacyStartValue bool
	var trueTypeEngineUpgradePresented bool
	var trueTypeEngineUpgradeValue bool
	var propOffsetPresented bool
	var propSnapshotMetaPresented bool
	var propControlMetaPresented bool
	var propProtocolVersionPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "legacy_start":
				if trueTypeLegacyStartPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "legacy_start")
				}
				if err := internal.Json2ReadBool(in, &trueTypeLegacyStartValue); err != nil {
					return err
				}
				trueTypeLegacyStartPresented = true
			case "engine_upgrade":
				if trueTypeEngineUpgradePresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "engine_upgrade")
				}
				if err := internal.Json2ReadBool(in, &trueTypeEngineUpgradeValue); err != nil {
					return err
				}
				trueTypeEngineUpgradePresented = true
			case "offset":
				if propOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "offset")
				}
				if err := internal.Json2ReadInt64(in, &item.Offset); err != nil {
					return err
				}
				propOffsetPresented = true
			case "snapshot_meta":
				if propSnapshotMetaPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "snapshot_meta")
				}
				if err := internal.Json2ReadStringBytes(in, &item.SnapshotMeta); err != nil {
					return err
				}
				propSnapshotMetaPresented = true
			case "control_meta":
				if propControlMetaPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "control_meta")
				}
				if err := internal.Json2ReadStringBytes(in, &item.ControlMeta); err != nil {
					return err
				}
				propControlMetaPresented = true
			case "protocol_version":
				if propProtocolVersionPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.engineStarted", "protocol_version")
				}
				if err := internal.Json2ReadUint32(in, &item.ProtocolVersion); err != nil {
					return err
				}
				propProtocolVersionPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.engineStarted", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propOffsetPresented {
		item.Offset = 0
	}
	if !propSnapshotMetaPresented {
		item.SnapshotMeta = item.SnapshotMeta[:0]
	}
	if !propControlMetaPresented {
		item.ControlMeta = item.ControlMeta[:0]
	}
	if !propProtocolVersionPresented {
		item.ProtocolVersion = 0
	}
	if trueTypeLegacyStartPresented {
		if trueTypeLegacyStartValue {
			item.FieldsMask |= 1 << 0
		}
	}
	if trueTypeEngineUpgradePresented {
		if trueTypeEngineUpgradeValue {
			item.FieldsMask |= 1 << 1
		}
	}
	if propProtocolVersionPresented {
		item.FieldsMask |= 1 << 2
	}
	// tries to set bit to zero if it is 1
	if trueTypeLegacyStartPresented && !trueTypeLegacyStartValue && (item.FieldsMask&(1<<0) != 0) {
		return internal.ErrorInvalidJSON("barsic.engineStarted", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeEngineUpgradePresented && !trueTypeEngineUpgradeValue && (item.FieldsMask&(1<<1) != 0) {
		return internal.ErrorInvalidJSON("barsic.engineStarted", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BarsicEngineStartedBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BarsicEngineStartedBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicEngineStartedBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"legacy_start":true`...)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"engine_upgrade":true`...)
	}
	backupIndexOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"offset":`...)
	w = basictl.JSONWriteInt64(w, item.Offset)
	if (item.Offset != 0) == false {
		w = w[:backupIndexOffset]
	}
	backupIndexSnapshotMeta := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"snapshot_meta":`...)
	w = basictl.JSONWriteStringBytes(w, item.SnapshotMeta)
	if (len(item.SnapshotMeta) != 0) == false {
		w = w[:backupIndexSnapshotMeta]
	}
	backupIndexControlMeta := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"control_meta":`...)
	w = basictl.JSONWriteStringBytes(w, item.ControlMeta)
	if (len(item.ControlMeta) != 0) == false {
		w = w[:backupIndexControlMeta]
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"protocol_version":`...)
		w = basictl.JSONWriteUint32(w, item.ProtocolVersion)
	}
	return append(w, '}')
}

func (item *BarsicEngineStartedBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BarsicEngineStartedBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("barsic.engineStarted", err.Error())
	}
	return nil
}
