// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicChangeRole

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tl/tlTrue"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicChangeRole struct {
	FieldsMask uint32
	// Master (TrueType) // Conditional: item.FieldsMask.0
	// Ready (TrueType) // Conditional: item.FieldsMask.1
	Offset      int64
	EpochNumber int64
	ViewNumber  int64
	// EpochNumberLegacyFlag (TrueType) // Conditional: item.FieldsMask.30
}

func (BarsicChangeRole) TLName() string { return "barsic.changeRole" }
func (BarsicChangeRole) TLTag() uint32  { return 0xecb3db89 }

func (item *BarsicChangeRole) SetMaster(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item BarsicChangeRole) IsSetMaster() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BarsicChangeRole) SetReady(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item BarsicChangeRole) IsSetReady() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *BarsicChangeRole) SetEpochNumberLegacyFlag(v bool) {
	if v {
		item.FieldsMask |= 1 << 30
	} else {
		item.FieldsMask &^= 1 << 30
	}
}
func (item BarsicChangeRole) IsSetEpochNumberLegacyFlag() bool { return item.FieldsMask&(1<<30) != 0 }

func (item *BarsicChangeRole) Reset() {
	item.FieldsMask = 0
	item.Offset = 0
	item.EpochNumber = 0
	item.ViewNumber = 0
}

func (item *BarsicChangeRole) FillRandom(rg *basictl.RandGenerator) {
	var maskFieldsMask uint32
	maskFieldsMask = basictl.RandomUint(rg)
	item.FieldsMask = 0
	if maskFieldsMask&(1<<0) != 0 {
		item.FieldsMask |= (1 << 0)
	}
	if maskFieldsMask&(1<<1) != 0 {
		item.FieldsMask |= (1 << 1)
	}
	if maskFieldsMask&(1<<2) != 0 {
		item.FieldsMask |= (1 << 30)
	}
	item.Offset = basictl.RandomLong(rg)
	item.EpochNumber = basictl.RandomLong(rg)
	item.ViewNumber = basictl.RandomLong(rg)
}

func (item *BarsicChangeRole) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.Offset); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.EpochNumber); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.ViewNumber); err != nil {
		return w, err
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *BarsicChangeRole) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *BarsicChangeRole) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.LongWrite(w, item.Offset)
	w = basictl.LongWrite(w, item.EpochNumber)
	w = basictl.LongWrite(w, item.ViewNumber)
	return w
}

func (item *BarsicChangeRole) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xecb3db89); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *BarsicChangeRole) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *BarsicChangeRole) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xecb3db89)
	return item.Write(w)
}

func (item *BarsicChangeRole) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicChangeRole) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *BarsicChangeRole) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *tlTrue.True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *BarsicChangeRole) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *BarsicChangeRole) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *BarsicChangeRole) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicChangeRole) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *BarsicChangeRole) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret tlTrue.True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicChangeRole) String() string {
	return string(item.WriteJSON(nil))
}

func (item *BarsicChangeRole) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var trueTypeMasterPresented bool
	var trueTypeMasterValue bool
	var trueTypeReadyPresented bool
	var trueTypeReadyValue bool
	var propOffsetPresented bool
	var propEpochNumberPresented bool
	var propViewNumberPresented bool
	var trueTypeEpochNumberLegacyFlagPresented bool
	var trueTypeEpochNumberLegacyFlagValue bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.changeRole", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "master":
				if trueTypeMasterPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.changeRole", "master")
				}
				if err := internal.Json2ReadBool(in, &trueTypeMasterValue); err != nil {
					return err
				}
				trueTypeMasterPresented = true
			case "ready":
				if trueTypeReadyPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.changeRole", "ready")
				}
				if err := internal.Json2ReadBool(in, &trueTypeReadyValue); err != nil {
					return err
				}
				trueTypeReadyPresented = true
			case "offset":
				if propOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.changeRole", "offset")
				}
				if err := internal.Json2ReadInt64(in, &item.Offset); err != nil {
					return err
				}
				propOffsetPresented = true
			case "epoch_number":
				if propEpochNumberPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.changeRole", "epoch_number")
				}
				if err := internal.Json2ReadInt64(in, &item.EpochNumber); err != nil {
					return err
				}
				propEpochNumberPresented = true
			case "view_number":
				if propViewNumberPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.changeRole", "view_number")
				}
				if err := internal.Json2ReadInt64(in, &item.ViewNumber); err != nil {
					return err
				}
				propViewNumberPresented = true
			case "epoch_number_legacy_flag":
				if trueTypeEpochNumberLegacyFlagPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.changeRole", "epoch_number_legacy_flag")
				}
				if err := internal.Json2ReadBool(in, &trueTypeEpochNumberLegacyFlagValue); err != nil {
					return err
				}
				trueTypeEpochNumberLegacyFlagPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.changeRole", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propOffsetPresented {
		item.Offset = 0
	}
	if !propEpochNumberPresented {
		item.EpochNumber = 0
	}
	if !propViewNumberPresented {
		item.ViewNumber = 0
	}
	if trueTypeMasterPresented {
		if trueTypeMasterValue {
			item.FieldsMask |= 1 << 0
		}
	}
	if trueTypeReadyPresented {
		if trueTypeReadyValue {
			item.FieldsMask |= 1 << 1
		}
	}
	if trueTypeEpochNumberLegacyFlagPresented {
		if trueTypeEpochNumberLegacyFlagValue {
			item.FieldsMask |= 1 << 30
		}
	}
	// tries to set bit to zero if it is 1
	if trueTypeMasterPresented && !trueTypeMasterValue && (item.FieldsMask&(1<<0) != 0) {
		return internal.ErrorInvalidJSON("barsic.changeRole", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeReadyPresented && !trueTypeReadyValue && (item.FieldsMask&(1<<1) != 0) {
		return internal.ErrorInvalidJSON("barsic.changeRole", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	// tries to set bit to zero if it is 1
	if trueTypeEpochNumberLegacyFlagPresented && !trueTypeEpochNumberLegacyFlagValue && (item.FieldsMask&(1<<30) != 0) {
		return internal.ErrorInvalidJSON("barsic.changeRole", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *BarsicChangeRole) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *BarsicChangeRole) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicChangeRole) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"master":true`...)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ready":true`...)
	}
	backupIndexOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"offset":`...)
	w = basictl.JSONWriteInt64(w, item.Offset)
	if (item.Offset != 0) == false {
		w = w[:backupIndexOffset]
	}
	backupIndexEpochNumber := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"epoch_number":`...)
	w = basictl.JSONWriteInt64(w, item.EpochNumber)
	if (item.EpochNumber != 0) == false {
		w = w[:backupIndexEpochNumber]
	}
	backupIndexViewNumber := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"view_number":`...)
	w = basictl.JSONWriteInt64(w, item.ViewNumber)
	if (item.ViewNumber != 0) == false {
		w = w[:backupIndexViewNumber]
	}
	if item.FieldsMask&(1<<30) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"epoch_number_legacy_flag":true`...)
	}
	return append(w, '}')
}

func (item *BarsicChangeRole) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *BarsicChangeRole) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("barsic.changeRole", err.Error())
	}
	return nil
}
