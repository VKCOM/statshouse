// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicChangeRole

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tl/tlTrue"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicChangeRole struct {
	FieldsMask uint32
	// Master (TrueType) // Conditional: item.FieldsMask.0
	// Ready (TrueType) // Conditional: item.FieldsMask.1
	Offset      int64
	EpochNumber int64 // Conditional: item.FieldsMask.30
	ViewNumber  int64
}

func (BarsicChangeRole) TLName() string { return "barsic.changeRole" }
func (BarsicChangeRole) TLTag() uint32  { return 0xecb3db89 }

func (item *BarsicChangeRole) SetMaster(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item BarsicChangeRole) IsSetMaster() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BarsicChangeRole) SetReady(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item BarsicChangeRole) IsSetReady() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *BarsicChangeRole) SetEpochNumber(v int64) {
	item.EpochNumber = v
	item.FieldsMask |= 1 << 30
}
func (item *BarsicChangeRole) ClearEpochNumber() {
	item.EpochNumber = 0
	item.FieldsMask &^= 1 << 30
}
func (item BarsicChangeRole) IsSetEpochNumber() bool { return item.FieldsMask&(1<<30) != 0 }

func (item *BarsicChangeRole) Reset() {
	item.FieldsMask = 0
	item.Offset = 0
	item.EpochNumber = 0
	item.ViewNumber = 0
}

func (item *BarsicChangeRole) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.Offset); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<30) != 0 {
		if w, err = basictl.LongRead(w, &item.EpochNumber); err != nil {
			return w, err
		}
	} else {
		item.EpochNumber = 0
	}
	return basictl.LongRead(w, &item.ViewNumber)
}

func (item *BarsicChangeRole) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.LongWrite(w, item.Offset)
	if item.FieldsMask&(1<<30) != 0 {
		w = basictl.LongWrite(w, item.EpochNumber)
	}
	return basictl.LongWrite(w, item.ViewNumber), nil
}

func (item *BarsicChangeRole) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xecb3db89); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicChangeRole) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0xecb3db89)
	return item.Write(w)
}

func (item *BarsicChangeRole) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicChangeRole) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *BarsicChangeRole) ReadResultJSON(j interface{}, ret *tlTrue.True) error {
	if err := tlTrue.True__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *BarsicChangeRole) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(false, w, ret)
}

func (item *BarsicChangeRole) writeResultJSON(short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	if w, err = ret.WriteJSONOpt(short, w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *BarsicChangeRole) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicChangeRole) ReadResultWriteResultJSONShort(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(true, w, ret)
	return r, w, err
}

func (item *BarsicChangeRole) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := internal.JsonBytesToInterface(r)
	if err != nil {
		return r, w, internal.ErrorInvalidJSON("barsic.changeRole", err.Error())
	}
	var ret tlTrue.True
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicChangeRole) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func BarsicChangeRole__ReadJSON(item *BarsicChangeRole, j interface{}) error { return item.readJSON(j) }
func (item *BarsicChangeRole) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON("barsic.changeRole", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := internal.JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jMaster := _jm["master"]
	delete(_jm, "master")
	_jReady := _jm["ready"]
	delete(_jm, "ready")
	_jOffset := _jm["offset"]
	delete(_jm, "offset")
	if err := internal.JsonReadInt64(_jOffset, &item.Offset); err != nil {
		return err
	}
	_jEpochNumber := _jm["epoch_number"]
	delete(_jm, "epoch_number")
	_jViewNumber := _jm["view_number"]
	delete(_jm, "view_number")
	if err := internal.JsonReadInt64(_jViewNumber, &item.ViewNumber); err != nil {
		return err
	}
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement("barsic.changeRole", k)
	}
	if _jMaster != nil {
		_bit := false
		if err := internal.JsonReadBool(_jMaster, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if _jReady != nil {
		_bit := false
		if err := internal.JsonReadBool(_jReady, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 1
		} else {
			item.FieldsMask &^= 1 << 1
		}
	}
	if _jEpochNumber != nil {
		item.FieldsMask |= 1 << 30
	}
	if _jEpochNumber != nil {
		if err := internal.JsonReadInt64(_jEpochNumber, &item.EpochNumber); err != nil {
			return err
		}
	} else {
		item.EpochNumber = 0
	}
	return nil
}

func (item *BarsicChangeRole) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *BarsicChangeRole) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"master":true`...)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ready":true`...)
	}
	if item.Offset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"offset":`...)
		w = basictl.JSONWriteInt64(w, item.Offset)
	}
	if item.FieldsMask&(1<<30) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"epoch_number":`...)
		w = basictl.JSONWriteInt64(w, item.EpochNumber)
	}
	if item.ViewNumber != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"view_number":`...)
		w = basictl.JSONWriteInt64(w, item.ViewNumber)
	}
	return append(w, '}'), nil
}

func (item *BarsicChangeRole) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BarsicChangeRole) UnmarshalJSON(b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON("barsic.changeRole", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return internal.ErrorInvalidJSON("barsic.changeRole", err.Error())
	}
	return nil
}
