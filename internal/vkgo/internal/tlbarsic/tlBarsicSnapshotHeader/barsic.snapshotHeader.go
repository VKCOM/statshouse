// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicSnapshotHeader

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tl/tlBuiltinVectorBarsicSnapshotDependency"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tlbarsic/tlBarsicSnapshotDependency"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicSnapshotHeader struct {
	FieldsMask       uint32
	ClusterId        string
	ShardId          string
	SnapshotMeta     string
	Dependencies     []tlBarsicSnapshotDependency.BarsicSnapshotDependency
	PayloadOffset    int64
	EngineVersion    string
	CreationTimeNano int64
	ControlMeta      string // Conditional: item.FieldsMask.0
}

func (BarsicSnapshotHeader) TLName() string { return "barsic.snapshotHeader" }
func (BarsicSnapshotHeader) TLTag() uint32  { return 0x1d0d1b74 }

func (item *BarsicSnapshotHeader) SetControlMeta(v string) {
	item.ControlMeta = v
	item.FieldsMask |= 1 << 0
}
func (item *BarsicSnapshotHeader) ClearControlMeta() {
	item.ControlMeta = ""
	item.FieldsMask &^= 1 << 0
}
func (item BarsicSnapshotHeader) IsSetControlMeta() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BarsicSnapshotHeader) Reset() {
	item.FieldsMask = 0
	item.ClusterId = ""
	item.ShardId = ""
	item.SnapshotMeta = ""
	item.Dependencies = item.Dependencies[:0]
	item.PayloadOffset = 0
	item.EngineVersion = ""
	item.CreationTimeNano = 0
	item.ControlMeta = ""
}

func (item *BarsicSnapshotHeader) FillRandom(gen basictl.Rand) {
	item.FieldsMask = basictl.RandomUint(gen)
	item.ClusterId = basictl.RandomString(gen)
	item.ShardId = basictl.RandomString(gen)
	item.SnapshotMeta = basictl.RandomString(gen)
	tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyFillRandom(gen, &item.Dependencies)
	item.PayloadOffset = basictl.RandomLong(gen)
	item.EngineVersion = basictl.RandomString(gen)
	item.CreationTimeNano = basictl.RandomLong(gen)
	if item.FieldsMask&(1<<0) != 0 {
		item.ControlMeta = basictl.RandomString(gen)
	} else {
		item.ControlMeta = ""
	}
}

func (item *BarsicSnapshotHeader) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.ShardId); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.SnapshotMeta); err != nil {
		return w, err
	}
	if w, err = tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyRead(w, &item.Dependencies); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PayloadOffset); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.EngineVersion); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.CreationTimeNano); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.StringRead(w, &item.ControlMeta); err != nil {
			return w, err
		}
	} else {
		item.ControlMeta = ""
	}
	return w, nil
}

func (item *BarsicSnapshotHeader) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWrite(w, item.ClusterId)
	w = basictl.StringWrite(w, item.ShardId)
	w = basictl.StringWrite(w, item.SnapshotMeta)
	if w, err = tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyWrite(w, item.Dependencies); err != nil {
		return w, err
	}
	w = basictl.LongWrite(w, item.PayloadOffset)
	w = basictl.StringWrite(w, item.EngineVersion)
	w = basictl.LongWrite(w, item.CreationTimeNano)
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.StringWrite(w, item.ControlMeta)
	}
	return w, nil
}

func (item *BarsicSnapshotHeader) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1d0d1b74); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicSnapshotHeader) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1d0d1b74)
	return item.Write(w)
}

func (item BarsicSnapshotHeader) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *BarsicSnapshotHeader) ReadJSONLegacy(legacyTypeNames bool, j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON("barsic.snapshotHeader", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := internal.JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jClusterId := _jm["cluster_id"]
	delete(_jm, "cluster_id")
	if err := internal.JsonReadString(_jClusterId, &item.ClusterId); err != nil {
		return err
	}
	_jShardId := _jm["shard_id"]
	delete(_jm, "shard_id")
	if err := internal.JsonReadString(_jShardId, &item.ShardId); err != nil {
		return err
	}
	_jSnapshotMeta := _jm["snapshot_meta"]
	delete(_jm, "snapshot_meta")
	if err := internal.JsonReadString(_jSnapshotMeta, &item.SnapshotMeta); err != nil {
		return err
	}
	_jDependencies := _jm["dependencies"]
	delete(_jm, "dependencies")
	_jPayloadOffset := _jm["payload_offset"]
	delete(_jm, "payload_offset")
	if err := internal.JsonReadInt64(_jPayloadOffset, &item.PayloadOffset); err != nil {
		return err
	}
	_jEngineVersion := _jm["engine_version"]
	delete(_jm, "engine_version")
	if err := internal.JsonReadString(_jEngineVersion, &item.EngineVersion); err != nil {
		return err
	}
	_jCreationTimeNano := _jm["creation_time_nano"]
	delete(_jm, "creation_time_nano")
	if err := internal.JsonReadInt64(_jCreationTimeNano, &item.CreationTimeNano); err != nil {
		return err
	}
	_jControlMeta := _jm["control_meta"]
	delete(_jm, "control_meta")
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement("barsic.snapshotHeader", k)
	}
	if _jControlMeta != nil {
		item.FieldsMask |= 1 << 0
	}
	if err := tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyReadJSONLegacy(legacyTypeNames, _jDependencies, &item.Dependencies); err != nil {
		return err
	}
	if _jControlMeta != nil {
		if err := internal.JsonReadString(_jControlMeta, &item.ControlMeta); err != nil {
			return err
		}
	} else {
		item.ControlMeta = ""
	}
	return nil
}

func (item *BarsicSnapshotHeader) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propClusterIdPresented bool
	var propShardIdPresented bool
	var propSnapshotMetaPresented bool
	var propDependenciesPresented bool
	var propPayloadOffsetPresented bool
	var propEngineVersionPresented bool
	var propCreationTimeNanoPresented bool
	var propControlMetaPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "cluster_id":
				if propClusterIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "cluster_id")
				}
				if err := internal.Json2ReadString(in, &item.ClusterId); err != nil {
					return err
				}
				propClusterIdPresented = true
			case "shard_id":
				if propShardIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "shard_id")
				}
				if err := internal.Json2ReadString(in, &item.ShardId); err != nil {
					return err
				}
				propShardIdPresented = true
			case "snapshot_meta":
				if propSnapshotMetaPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "snapshot_meta")
				}
				if err := internal.Json2ReadString(in, &item.SnapshotMeta); err != nil {
					return err
				}
				propSnapshotMetaPresented = true
			case "dependencies":
				if propDependenciesPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "dependencies")
				}
				if err := tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyReadJSON(legacyTypeNames, in, &item.Dependencies); err != nil {
					return err
				}
				propDependenciesPresented = true
			case "payload_offset":
				if propPayloadOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "payload_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.PayloadOffset); err != nil {
					return err
				}
				propPayloadOffsetPresented = true
			case "engine_version":
				if propEngineVersionPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "engine_version")
				}
				if err := internal.Json2ReadString(in, &item.EngineVersion); err != nil {
					return err
				}
				propEngineVersionPresented = true
			case "creation_time_nano":
				if propCreationTimeNanoPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "creation_time_nano")
				}
				if err := internal.Json2ReadInt64(in, &item.CreationTimeNano); err != nil {
					return err
				}
				propCreationTimeNanoPresented = true
			case "control_meta":
				if propControlMetaPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "control_meta")
				}
				if err := internal.Json2ReadString(in, &item.ControlMeta); err != nil {
					return err
				}
				propControlMetaPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.snapshotHeader", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propClusterIdPresented {
		item.ClusterId = ""
	}
	if !propShardIdPresented {
		item.ShardId = ""
	}
	if !propSnapshotMetaPresented {
		item.SnapshotMeta = ""
	}
	if !propDependenciesPresented {
		item.Dependencies = item.Dependencies[:0]
	}
	if !propPayloadOffsetPresented {
		item.PayloadOffset = 0
	}
	if !propEngineVersionPresented {
		item.EngineVersion = ""
	}
	if !propCreationTimeNanoPresented {
		item.CreationTimeNano = 0
	}
	if !propControlMetaPresented {
		item.ControlMeta = ""
	}
	if propControlMetaPresented {
		item.FieldsMask |= 1 << 0
	}
	return nil
}

func (item *BarsicSnapshotHeader) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicSnapshotHeader) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.ClusterId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"cluster_id":`...)
		w = basictl.JSONWriteString(w, item.ClusterId)
	}
	if len(item.ShardId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"shard_id":`...)
		w = basictl.JSONWriteString(w, item.ShardId)
	}
	if len(item.SnapshotMeta) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"snapshot_meta":`...)
		w = basictl.JSONWriteString(w, item.SnapshotMeta)
	}
	if len(item.Dependencies) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"dependencies":`...)
		if w, err = tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyWriteJSONOpt(newTypeNames, short, w, item.Dependencies); err != nil {
			return w, err
		}
	}
	if item.PayloadOffset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"payload_offset":`...)
		w = basictl.JSONWriteInt64(w, item.PayloadOffset)
	}
	if len(item.EngineVersion) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"engine_version":`...)
		w = basictl.JSONWriteString(w, item.EngineVersion)
	}
	if item.CreationTimeNano != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"creation_time_nano":`...)
		w = basictl.JSONWriteInt64(w, item.CreationTimeNano)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"control_meta":`...)
		w = basictl.JSONWriteString(w, item.ControlMeta)
	}
	return append(w, '}'), nil
}

func (item *BarsicSnapshotHeader) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BarsicSnapshotHeader) UnmarshalJSON(b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotHeader", err.Error())
	}
	if err = item.ReadJSONLegacy(true, j); err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotHeader", err.Error())
	}
	return nil
}

type BarsicSnapshotHeaderBytes struct {
	FieldsMask       uint32
	ClusterId        []byte
	ShardId          []byte
	SnapshotMeta     []byte
	Dependencies     []tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes
	PayloadOffset    int64
	EngineVersion    []byte
	CreationTimeNano int64
	ControlMeta      []byte // Conditional: item.FieldsMask.0
}

func (BarsicSnapshotHeaderBytes) TLName() string { return "barsic.snapshotHeader" }
func (BarsicSnapshotHeaderBytes) TLTag() uint32  { return 0x1d0d1b74 }

func (item *BarsicSnapshotHeaderBytes) SetControlMeta(v []byte) {
	item.ControlMeta = v
	item.FieldsMask |= 1 << 0
}
func (item *BarsicSnapshotHeaderBytes) ClearControlMeta() {
	item.ControlMeta = item.ControlMeta[:0]
	item.FieldsMask &^= 1 << 0
}
func (item BarsicSnapshotHeaderBytes) IsSetControlMeta() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *BarsicSnapshotHeaderBytes) Reset() {
	item.FieldsMask = 0
	item.ClusterId = item.ClusterId[:0]
	item.ShardId = item.ShardId[:0]
	item.SnapshotMeta = item.SnapshotMeta[:0]
	item.Dependencies = item.Dependencies[:0]
	item.PayloadOffset = 0
	item.EngineVersion = item.EngineVersion[:0]
	item.CreationTimeNano = 0
	item.ControlMeta = item.ControlMeta[:0]
}

func (item *BarsicSnapshotHeaderBytes) FillRandom(gen basictl.Rand) {
	item.FieldsMask = basictl.RandomUint(gen)
	item.ClusterId = basictl.RandomStringBytes(gen)
	item.ShardId = basictl.RandomStringBytes(gen)
	item.SnapshotMeta = basictl.RandomStringBytes(gen)
	tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyBytesFillRandom(gen, &item.Dependencies)
	item.PayloadOffset = basictl.RandomLong(gen)
	item.EngineVersion = basictl.RandomStringBytes(gen)
	item.CreationTimeNano = basictl.RandomLong(gen)
	if item.FieldsMask&(1<<0) != 0 {
		item.ControlMeta = basictl.RandomStringBytes(gen)
	} else {
		item.ControlMeta = item.ControlMeta[:0]
	}
}

func (item *BarsicSnapshotHeaderBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.ClusterId); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.ShardId); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.SnapshotMeta); err != nil {
		return w, err
	}
	if w, err = tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyBytesRead(w, &item.Dependencies); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PayloadOffset); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.EngineVersion); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.CreationTimeNano); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.StringReadBytes(w, &item.ControlMeta); err != nil {
			return w, err
		}
	} else {
		item.ControlMeta = item.ControlMeta[:0]
	}
	return w, nil
}

func (item *BarsicSnapshotHeaderBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWriteBytes(w, item.ClusterId)
	w = basictl.StringWriteBytes(w, item.ShardId)
	w = basictl.StringWriteBytes(w, item.SnapshotMeta)
	if w, err = tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyBytesWrite(w, item.Dependencies); err != nil {
		return w, err
	}
	w = basictl.LongWrite(w, item.PayloadOffset)
	w = basictl.StringWriteBytes(w, item.EngineVersion)
	w = basictl.LongWrite(w, item.CreationTimeNano)
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.StringWriteBytes(w, item.ControlMeta)
	}
	return w, nil
}

func (item *BarsicSnapshotHeaderBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1d0d1b74); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicSnapshotHeaderBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1d0d1b74)
	return item.Write(w)
}

func (item BarsicSnapshotHeaderBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *BarsicSnapshotHeaderBytes) ReadJSONLegacy(legacyTypeNames bool, j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON("barsic.snapshotHeader", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := internal.JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jClusterId := _jm["cluster_id"]
	delete(_jm, "cluster_id")
	if err := internal.JsonReadStringBytes(_jClusterId, &item.ClusterId); err != nil {
		return err
	}
	_jShardId := _jm["shard_id"]
	delete(_jm, "shard_id")
	if err := internal.JsonReadStringBytes(_jShardId, &item.ShardId); err != nil {
		return err
	}
	_jSnapshotMeta := _jm["snapshot_meta"]
	delete(_jm, "snapshot_meta")
	if err := internal.JsonReadStringBytes(_jSnapshotMeta, &item.SnapshotMeta); err != nil {
		return err
	}
	_jDependencies := _jm["dependencies"]
	delete(_jm, "dependencies")
	_jPayloadOffset := _jm["payload_offset"]
	delete(_jm, "payload_offset")
	if err := internal.JsonReadInt64(_jPayloadOffset, &item.PayloadOffset); err != nil {
		return err
	}
	_jEngineVersion := _jm["engine_version"]
	delete(_jm, "engine_version")
	if err := internal.JsonReadStringBytes(_jEngineVersion, &item.EngineVersion); err != nil {
		return err
	}
	_jCreationTimeNano := _jm["creation_time_nano"]
	delete(_jm, "creation_time_nano")
	if err := internal.JsonReadInt64(_jCreationTimeNano, &item.CreationTimeNano); err != nil {
		return err
	}
	_jControlMeta := _jm["control_meta"]
	delete(_jm, "control_meta")
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement("barsic.snapshotHeader", k)
	}
	if _jControlMeta != nil {
		item.FieldsMask |= 1 << 0
	}
	if err := tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyBytesReadJSONLegacy(legacyTypeNames, _jDependencies, &item.Dependencies); err != nil {
		return err
	}
	if _jControlMeta != nil {
		if err := internal.JsonReadStringBytes(_jControlMeta, &item.ControlMeta); err != nil {
			return err
		}
	} else {
		item.ControlMeta = item.ControlMeta[:0]
	}
	return nil
}

func (item *BarsicSnapshotHeaderBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propClusterIdPresented bool
	var propShardIdPresented bool
	var propSnapshotMetaPresented bool
	var propDependenciesPresented bool
	var propPayloadOffsetPresented bool
	var propEngineVersionPresented bool
	var propCreationTimeNanoPresented bool
	var propControlMetaPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "fields_mask")
				}
				if err := internal.Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "cluster_id":
				if propClusterIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "cluster_id")
				}
				if err := internal.Json2ReadStringBytes(in, &item.ClusterId); err != nil {
					return err
				}
				propClusterIdPresented = true
			case "shard_id":
				if propShardIdPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "shard_id")
				}
				if err := internal.Json2ReadStringBytes(in, &item.ShardId); err != nil {
					return err
				}
				propShardIdPresented = true
			case "snapshot_meta":
				if propSnapshotMetaPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "snapshot_meta")
				}
				if err := internal.Json2ReadStringBytes(in, &item.SnapshotMeta); err != nil {
					return err
				}
				propSnapshotMetaPresented = true
			case "dependencies":
				if propDependenciesPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "dependencies")
				}
				if err := tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyBytesReadJSON(legacyTypeNames, in, &item.Dependencies); err != nil {
					return err
				}
				propDependenciesPresented = true
			case "payload_offset":
				if propPayloadOffsetPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "payload_offset")
				}
				if err := internal.Json2ReadInt64(in, &item.PayloadOffset); err != nil {
					return err
				}
				propPayloadOffsetPresented = true
			case "engine_version":
				if propEngineVersionPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "engine_version")
				}
				if err := internal.Json2ReadStringBytes(in, &item.EngineVersion); err != nil {
					return err
				}
				propEngineVersionPresented = true
			case "creation_time_nano":
				if propCreationTimeNanoPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "creation_time_nano")
				}
				if err := internal.Json2ReadInt64(in, &item.CreationTimeNano); err != nil {
					return err
				}
				propCreationTimeNanoPresented = true
			case "control_meta":
				if propControlMetaPresented {
					return internal.ErrorInvalidJSONWithDuplicatingKeys("barsic.snapshotHeader", "control_meta")
				}
				if err := internal.Json2ReadStringBytes(in, &item.ControlMeta); err != nil {
					return err
				}
				propControlMetaPresented = true
			default:
				return internal.ErrorInvalidJSONExcessElement("barsic.snapshotHeader", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propClusterIdPresented {
		item.ClusterId = item.ClusterId[:0]
	}
	if !propShardIdPresented {
		item.ShardId = item.ShardId[:0]
	}
	if !propSnapshotMetaPresented {
		item.SnapshotMeta = item.SnapshotMeta[:0]
	}
	if !propDependenciesPresented {
		item.Dependencies = item.Dependencies[:0]
	}
	if !propPayloadOffsetPresented {
		item.PayloadOffset = 0
	}
	if !propEngineVersionPresented {
		item.EngineVersion = item.EngineVersion[:0]
	}
	if !propCreationTimeNanoPresented {
		item.CreationTimeNano = 0
	}
	if !propControlMetaPresented {
		item.ControlMeta = item.ControlMeta[:0]
	}
	if propControlMetaPresented {
		item.FieldsMask |= 1 << 0
	}
	return nil
}

func (item *BarsicSnapshotHeaderBytes) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicSnapshotHeaderBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.ClusterId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"cluster_id":`...)
		w = basictl.JSONWriteStringBytes(w, item.ClusterId)
	}
	if len(item.ShardId) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"shard_id":`...)
		w = basictl.JSONWriteStringBytes(w, item.ShardId)
	}
	if len(item.SnapshotMeta) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"snapshot_meta":`...)
		w = basictl.JSONWriteStringBytes(w, item.SnapshotMeta)
	}
	if len(item.Dependencies) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"dependencies":`...)
		if w, err = tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyBytesWriteJSONOpt(newTypeNames, short, w, item.Dependencies); err != nil {
			return w, err
		}
	}
	if item.PayloadOffset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"payload_offset":`...)
		w = basictl.JSONWriteInt64(w, item.PayloadOffset)
	}
	if len(item.EngineVersion) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"engine_version":`...)
		w = basictl.JSONWriteStringBytes(w, item.EngineVersion)
	}
	if item.CreationTimeNano != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"creation_time_nano":`...)
		w = basictl.JSONWriteInt64(w, item.CreationTimeNano)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"control_meta":`...)
		w = basictl.JSONWriteStringBytes(w, item.ControlMeta)
	}
	return append(w, '}'), nil
}

func (item *BarsicSnapshotHeaderBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BarsicSnapshotHeaderBytes) UnmarshalJSON(b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotHeader", err.Error())
	}
	if err = item.ReadJSONLegacy(true, j); err != nil {
		return internal.ErrorInvalidJSON("barsic.snapshotHeader", err.Error())
	}
	return nil
}
