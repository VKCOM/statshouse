// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBarsicShutdown

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tl/tlTrue"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type BarsicShutdown struct {
	FieldsMask uint32
}

func (BarsicShutdown) TLName() string { return "barsic.shutdown" }
func (BarsicShutdown) TLTag() uint32  { return 0x708fd8d4 }

func (item *BarsicShutdown) Reset() {
	item.FieldsMask = 0
}

func (item *BarsicShutdown) Read(w []byte) (_ []byte, err error) {
	return basictl.NatRead(w, &item.FieldsMask)
}

func (item *BarsicShutdown) Write(w []byte) (_ []byte, err error) {
	return basictl.NatWrite(w, item.FieldsMask), nil
}

func (item *BarsicShutdown) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x708fd8d4); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BarsicShutdown) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x708fd8d4)
	return item.Write(w)
}

func (item *BarsicShutdown) ReadResult(w []byte, ret *tlTrue.True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *BarsicShutdown) WriteResult(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *BarsicShutdown) ReadResultJSON(legacyTypeNames bool, j interface{}, ret *tlTrue.True) error {
	if err := ret.ReadJSONLegacy(legacyTypeNames, j); err != nil {
		return err
	}
	return nil
}

func (item *BarsicShutdown) WriteResultJSON(w []byte, ret tlTrue.True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *BarsicShutdown) writeResultJSON(newTypeNames bool, short bool, w []byte, ret tlTrue.True) (_ []byte, err error) {
	if w, err = ret.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *BarsicShutdown) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *BarsicShutdown) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret tlTrue.True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *BarsicShutdown) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := internal.JsonBytesToInterface(r)
	if err != nil {
		return r, w, internal.ErrorInvalidJSON("barsic.shutdown", err.Error())
	}
	var ret tlTrue.True
	if err = item.ReadResultJSON(true, j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item BarsicShutdown) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *BarsicShutdown) ReadJSONLegacy(legacyTypeNames bool, j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return internal.ErrorInvalidJSON("barsic.shutdown", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := internal.JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	for k := range _jm {
		return internal.ErrorInvalidJSONExcessElement("barsic.shutdown", k)
	}
	return nil
}

func (item *BarsicShutdown) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *BarsicShutdown) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	return append(w, '}'), nil
}

func (item *BarsicShutdown) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BarsicShutdown) UnmarshalJSON(b []byte) error {
	j, err := internal.JsonBytesToInterface(b)
	if err != nil {
		return internal.ErrorInvalidJSON("barsic.shutdown", err.Error())
	}
	if err = item.ReadJSONLegacy(true, j); err != nil {
		return internal.ErrorInvalidJSON("barsic.shutdown", err.Error())
	}
	return nil
}
