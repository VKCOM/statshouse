// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlVectorBarsicSnapshotExternalFile

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
	"github.com/VKCOM/statshouse/internal/vkgo/internal"
	"github.com/VKCOM/statshouse/internal/vkgo/internal/tl/tlBuiltinVectorBarsicSnapshotExternalFile"
	"github.com/VKCOM/statshouse/internal/vkgo/internal/tlbarsic/tlBarsicSnapshotExternalFile"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type VectorBarsicSnapshotExternalFile []tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFile

func (VectorBarsicSnapshotExternalFile) TLName() string { return "vector" }
func (VectorBarsicSnapshotExternalFile) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorBarsicSnapshotExternalFile) Reset() {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFile)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorBarsicSnapshotExternalFile) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFile)(item)
	tlBuiltinVectorBarsicSnapshotExternalFile.BuiltinVectorBarsicSnapshotExternalFileFillRandom(rg, ptr)
}

func (item *VectorBarsicSnapshotExternalFile) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFile)(item)
	return tlBuiltinVectorBarsicSnapshotExternalFile.BuiltinVectorBarsicSnapshotExternalFileRead(w, ptr)
}

func (item *VectorBarsicSnapshotExternalFile) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorBarsicSnapshotExternalFile) Write(w []byte) []byte {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFile)(item)
	return tlBuiltinVectorBarsicSnapshotExternalFile.BuiltinVectorBarsicSnapshotExternalFileWrite(w, *ptr)
}

func (item *VectorBarsicSnapshotExternalFile) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorBarsicSnapshotExternalFile) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorBarsicSnapshotExternalFile) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorBarsicSnapshotExternalFile) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorBarsicSnapshotExternalFile) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFile)(item)
	if err := tlBuiltinVectorBarsicSnapshotExternalFile.BuiltinVectorBarsicSnapshotExternalFileReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorBarsicSnapshotExternalFile) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorBarsicSnapshotExternalFile) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorBarsicSnapshotExternalFile) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFile)(item)
	w = tlBuiltinVectorBarsicSnapshotExternalFile.BuiltinVectorBarsicSnapshotExternalFileWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorBarsicSnapshotExternalFile) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorBarsicSnapshotExternalFile) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

func (item *VectorBarsicSnapshotExternalFile) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	return w
}

func (item *VectorBarsicSnapshotExternalFile) InternalReadTL2(r []byte) (_ []byte, err error) {
	return r, internal.ErrorTL2SerializersNotGenerated("vector")
}

func (item *VectorBarsicSnapshotExternalFile) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type VectorBarsicSnapshotExternalFileBytes []tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFileBytes

func (VectorBarsicSnapshotExternalFileBytes) TLName() string { return "vector" }
func (VectorBarsicSnapshotExternalFileBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorBarsicSnapshotExternalFileBytes) Reset() {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFileBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorBarsicSnapshotExternalFileBytes) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFileBytes)(item)
	tlBuiltinVectorBarsicSnapshotExternalFile.BuiltinVectorBarsicSnapshotExternalFileBytesFillRandom(rg, ptr)
}

func (item *VectorBarsicSnapshotExternalFileBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFileBytes)(item)
	return tlBuiltinVectorBarsicSnapshotExternalFile.BuiltinVectorBarsicSnapshotExternalFileBytesRead(w, ptr)
}

func (item *VectorBarsicSnapshotExternalFileBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorBarsicSnapshotExternalFileBytes) Write(w []byte) []byte {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFileBytes)(item)
	return tlBuiltinVectorBarsicSnapshotExternalFile.BuiltinVectorBarsicSnapshotExternalFileBytesWrite(w, *ptr)
}

func (item *VectorBarsicSnapshotExternalFileBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorBarsicSnapshotExternalFileBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorBarsicSnapshotExternalFileBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorBarsicSnapshotExternalFileBytes) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorBarsicSnapshotExternalFileBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFileBytes)(item)
	if err := tlBuiltinVectorBarsicSnapshotExternalFile.BuiltinVectorBarsicSnapshotExternalFileBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorBarsicSnapshotExternalFileBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorBarsicSnapshotExternalFileBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorBarsicSnapshotExternalFileBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]tlBarsicSnapshotExternalFile.BarsicSnapshotExternalFileBytes)(item)
	w = tlBuiltinVectorBarsicSnapshotExternalFile.BuiltinVectorBarsicSnapshotExternalFileBytesWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorBarsicSnapshotExternalFileBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorBarsicSnapshotExternalFileBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

func (item *VectorBarsicSnapshotExternalFileBytes) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	return w
}

func (item *VectorBarsicSnapshotExternalFileBytes) InternalReadTL2(r []byte) (_ []byte, err error) {
	return r, internal.ErrorTL2SerializersNotGenerated("vector")
}

func (item *VectorBarsicSnapshotExternalFileBytes) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
