// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlVectorBarsicSnapshotDependency

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
	"github.com/VKCOM/statshouse/internal/vkgo/internal"
	"github.com/VKCOM/statshouse/internal/vkgo/internal/tl/tlBuiltinVectorBarsicSnapshotDependency"
	"github.com/VKCOM/statshouse/internal/vkgo/internal/tlbarsic/tlBarsicSnapshotDependency"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

type VectorBarsicSnapshotDependency []tlBarsicSnapshotDependency.BarsicSnapshotDependency

func (VectorBarsicSnapshotDependency) TLName() string { return "vector" }
func (VectorBarsicSnapshotDependency) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorBarsicSnapshotDependency) Reset() {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependency)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorBarsicSnapshotDependency) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependency)(item)
	tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyFillRandom(rg, ptr)
}

func (item *VectorBarsicSnapshotDependency) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependency)(item)
	return tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyRead(w, ptr)
}

func (item *VectorBarsicSnapshotDependency) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorBarsicSnapshotDependency) Write(w []byte) []byte {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependency)(item)
	return tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyWrite(w, *ptr)
}

func (item *VectorBarsicSnapshotDependency) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorBarsicSnapshotDependency) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorBarsicSnapshotDependency) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorBarsicSnapshotDependency) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorBarsicSnapshotDependency) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependency)(item)
	if err := tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorBarsicSnapshotDependency) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorBarsicSnapshotDependency) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorBarsicSnapshotDependency) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependency)(item)
	w = tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorBarsicSnapshotDependency) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorBarsicSnapshotDependency) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

func (item *VectorBarsicSnapshotDependency) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	return w
}

func (item *VectorBarsicSnapshotDependency) InternalReadTL2(r []byte) (_ []byte, err error) {
	return r, internal.ErrorTL2SerializersNotGenerated("vector")
}

func (item *VectorBarsicSnapshotDependency) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}

type VectorBarsicSnapshotDependencyBytes []tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes

func (VectorBarsicSnapshotDependencyBytes) TLName() string { return "vector" }
func (VectorBarsicSnapshotDependencyBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorBarsicSnapshotDependencyBytes) Reset() {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorBarsicSnapshotDependencyBytes) FillRandom(rg *basictl.RandGenerator) {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes)(item)
	tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyBytesFillRandom(rg, ptr)
}

func (item *VectorBarsicSnapshotDependencyBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes)(item)
	return tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyBytesRead(w, ptr)
}

func (item *VectorBarsicSnapshotDependencyBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorBarsicSnapshotDependencyBytes) Write(w []byte) []byte {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes)(item)
	return tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyBytesWrite(w, *ptr)
}

func (item *VectorBarsicSnapshotDependencyBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorBarsicSnapshotDependencyBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorBarsicSnapshotDependencyBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorBarsicSnapshotDependencyBytes) String() string {
	return string(item.WriteJSON(nil))
}
func (item *VectorBarsicSnapshotDependencyBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes)(item)
	if err := tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorBarsicSnapshotDependencyBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorBarsicSnapshotDependencyBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorBarsicSnapshotDependencyBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes)(item)
	w = tlBuiltinVectorBarsicSnapshotDependency.BuiltinVectorBarsicSnapshotDependencyBytesWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorBarsicSnapshotDependencyBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorBarsicSnapshotDependencyBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return internal.ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

func (item *VectorBarsicSnapshotDependencyBytes) WriteTL2(w []byte, ctx *basictl.TL2WriteContext) []byte {
	return w
}

func (item *VectorBarsicSnapshotDependencyBytes) InternalReadTL2(r []byte) (_ []byte, err error) {
	return r, internal.ErrorTL2SerializersNotGenerated("vector")
}

func (item *VectorBarsicSnapshotDependencyBytes) ReadTL2(r []byte, ctx *basictl.TL2ReadContext) (_ []byte, err error) {
	return item.InternalReadTL2(r)
}
