// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlBuiltinVectorBarsicSnapshotDependency

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/internal"
	"github.com/vkcom/statshouse/internal/vkgo/internal/tlbarsic/tlBarsicSnapshotDependency"
)

var _ = basictl.NatWrite
var _ = internal.ErrorInvalidEnumTag

func BuiltinVectorBarsicSnapshotDependencyRead(w []byte, vec *[]tlBarsicSnapshotDependency.BarsicSnapshotDependency) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]tlBarsicSnapshotDependency.BarsicSnapshotDependency, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorBarsicSnapshotDependencyWrite(w []byte, vec []tlBarsicSnapshotDependency.BarsicSnapshotDependency) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorBarsicSnapshotDependencyReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *[]tlBarsicSnapshotDependency.BarsicSnapshotDependency) error {
	l, _arr, err := internal.JsonReadArray("[]tlBarsicSnapshotDependency.BarsicSnapshotDependency", j)
	if err != nil {
		return err
	}
	if cap(*vec) < l {
		*vec = make([]tlBarsicSnapshotDependency.BarsicSnapshotDependency, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if err := (*vec)[i].ReadJSONLegacy(legacyTypeNames, _arr[i]); err != nil {
			return err
		}
	}
	return nil
}

func BuiltinVectorBarsicSnapshotDependencyWriteJSON(w []byte, vec []tlBarsicSnapshotDependency.BarsicSnapshotDependency) (_ []byte, err error) {
	return BuiltinVectorBarsicSnapshotDependencyWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorBarsicSnapshotDependencyWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []tlBarsicSnapshotDependency.BarsicSnapshotDependency) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

func BuiltinVectorBarsicSnapshotDependencyBytesRead(w []byte, vec *[]tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorBarsicSnapshotDependencyBytesWrite(w []byte, vec []tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorBarsicSnapshotDependencyBytesReadJSONLegacy(legacyTypeNames bool, j interface{}, vec *[]tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes) error {
	l, _arr, err := internal.JsonReadArray("[]tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes", j)
	if err != nil {
		return err
	}
	if cap(*vec) < l {
		*vec = make([]tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if err := (*vec)[i].ReadJSONLegacy(legacyTypeNames, _arr[i]); err != nil {
			return err
		}
	}
	return nil
}

func BuiltinVectorBarsicSnapshotDependencyBytesWriteJSON(w []byte, vec []tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes) (_ []byte, err error) {
	return BuiltinVectorBarsicSnapshotDependencyBytesWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorBarsicSnapshotDependencyBytesWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []tlBarsicSnapshotDependency.BarsicSnapshotDependencyBytes) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}
