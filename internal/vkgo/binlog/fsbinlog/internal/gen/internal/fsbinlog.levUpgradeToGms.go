// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type FsbinlogLevUpgradeToGms struct {
	FieldsMask    uint32
	PayloadOffset int64
	Crc           uint32
	Ts            uint32
}

func (FsbinlogLevUpgradeToGms) TLName() string { return "fsbinlog.levUpgradeToGms" }
func (FsbinlogLevUpgradeToGms) TLTag() uint32  { return 0xb75009a0 }

func (item *FsbinlogLevUpgradeToGms) Reset() {
	item.FieldsMask = 0
	item.PayloadOffset = 0
	item.Crc = 0
	item.Ts = 0
}

func (item *FsbinlogLevUpgradeToGms) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PayloadOffset); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.Crc); err != nil {
		return w, err
	}
	return basictl.NatRead(w, &item.Ts)
}

func (item *FsbinlogLevUpgradeToGms) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *FsbinlogLevUpgradeToGms) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.LongWrite(w, item.PayloadOffset)
	w = basictl.NatWrite(w, item.Crc)
	w = basictl.NatWrite(w, item.Ts)
	return w
}

func (item *FsbinlogLevUpgradeToGms) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xb75009a0); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *FsbinlogLevUpgradeToGms) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *FsbinlogLevUpgradeToGms) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xb75009a0)
	return item.Write(w)
}

func (item FsbinlogLevUpgradeToGms) String() string {
	return string(item.WriteJSON(nil))
}

func (item *FsbinlogLevUpgradeToGms) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propPayloadOffsetPresented bool
	var propCrcPresented bool
	var propTsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.levUpgradeToGms", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "PayloadOffset":
				if propPayloadOffsetPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.levUpgradeToGms", "PayloadOffset")
				}
				if err := Json2ReadInt64(in, &item.PayloadOffset); err != nil {
					return err
				}
				propPayloadOffsetPresented = true
			case "Crc":
				if propCrcPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.levUpgradeToGms", "Crc")
				}
				if err := Json2ReadUint32(in, &item.Crc); err != nil {
					return err
				}
				propCrcPresented = true
			case "Ts":
				if propTsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.levUpgradeToGms", "Ts")
				}
				if err := Json2ReadUint32(in, &item.Ts); err != nil {
					return err
				}
				propTsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("fsbinlog.levUpgradeToGms", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propPayloadOffsetPresented {
		item.PayloadOffset = 0
	}
	if !propCrcPresented {
		item.Crc = 0
	}
	if !propTsPresented {
		item.Ts = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *FsbinlogLevUpgradeToGms) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *FsbinlogLevUpgradeToGms) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *FsbinlogLevUpgradeToGms) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexPayloadOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"PayloadOffset":`...)
	w = basictl.JSONWriteInt64(w, item.PayloadOffset)
	if (item.PayloadOffset != 0) == false {
		w = w[:backupIndexPayloadOffset]
	}
	backupIndexCrc := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"Crc":`...)
	w = basictl.JSONWriteUint32(w, item.Crc)
	if (item.Crc != 0) == false {
		w = w[:backupIndexCrc]
	}
	backupIndexTs := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"Ts":`...)
	w = basictl.JSONWriteUint32(w, item.Ts)
	if (item.Ts != 0) == false {
		w = w[:backupIndexTs]
	}
	return append(w, '}')
}

func (item *FsbinlogLevUpgradeToGms) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *FsbinlogLevUpgradeToGms) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("fsbinlog.levUpgradeToGms", err.Error())
	}
	return nil
}
