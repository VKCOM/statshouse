// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type FsbinlogLevUpgradeToGms struct {
	FieldsMask    uint32
	PayloadOffset int64
	Crc           uint32
	Ts            uint32
}

func (FsbinlogLevUpgradeToGms) TLName() string { return "fsbinlog.levUpgradeToGms" }
func (FsbinlogLevUpgradeToGms) TLTag() uint32  { return 0xb75009a0 }

func (item *FsbinlogLevUpgradeToGms) Reset() {
	item.FieldsMask = 0
	item.PayloadOffset = 0
	item.Crc = 0
	item.Ts = 0
}

func (item *FsbinlogLevUpgradeToGms) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.PayloadOffset); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.Crc); err != nil {
		return w, err
	}
	return basictl.NatRead(w, &item.Ts)
}

func (item *FsbinlogLevUpgradeToGms) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.LongWrite(w, item.PayloadOffset)
	w = basictl.NatWrite(w, item.Crc)
	return basictl.NatWrite(w, item.Ts), nil
}

func (item *FsbinlogLevUpgradeToGms) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xb75009a0); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *FsbinlogLevUpgradeToGms) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0xb75009a0)
	return item.Write(w)
}

func (item FsbinlogLevUpgradeToGms) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func FsbinlogLevUpgradeToGms__ReadJSON(item *FsbinlogLevUpgradeToGms, j interface{}) error {
	return item.readJSON(j)
}
func (item *FsbinlogLevUpgradeToGms) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("fsbinlog.levUpgradeToGms", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jPayloadOffset := _jm["PayloadOffset"]
	delete(_jm, "PayloadOffset")
	if err := JsonReadInt64(_jPayloadOffset, &item.PayloadOffset); err != nil {
		return err
	}
	_jCrc := _jm["Crc"]
	delete(_jm, "Crc")
	if err := JsonReadUint32(_jCrc, &item.Crc); err != nil {
		return err
	}
	_jTs := _jm["Ts"]
	delete(_jm, "Ts")
	if err := JsonReadUint32(_jTs, &item.Ts); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("fsbinlog.levUpgradeToGms", k)
	}
	return nil
}

func (item *FsbinlogLevUpgradeToGms) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.PayloadOffset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"PayloadOffset":`...)
		w = basictl.JSONWriteInt64(w, item.PayloadOffset)
	}
	if item.Crc != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"Crc":`...)
		w = basictl.JSONWriteUint32(w, item.Crc)
	}
	if item.Ts != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"Ts":`...)
		w = basictl.JSONWriteUint32(w, item.Ts)
	}
	return append(w, '}'), nil
}

func (item *FsbinlogLevUpgradeToGms) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *FsbinlogLevUpgradeToGms) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("fsbinlog.levUpgradeToGms", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("fsbinlog.levUpgradeToGms", err.Error())
	}
	return nil
}
