// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type FsbinlogSnapshotMeta struct {
	FieldsMask     uint32
	CommitPosition int64
	CommitCrc      uint32
	CommitTs       uint32
}

func (FsbinlogSnapshotMeta) TLName() string { return "fsbinlog.snapshotMeta" }
func (FsbinlogSnapshotMeta) TLTag() uint32  { return 0x6b49d850 }

func (item *FsbinlogSnapshotMeta) Reset() {
	item.FieldsMask = 0
	item.CommitPosition = 0
	item.CommitCrc = 0
	item.CommitTs = 0
}

func (item *FsbinlogSnapshotMeta) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.CommitPosition); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.CommitCrc); err != nil {
		return w, err
	}
	return basictl.NatRead(w, &item.CommitTs)
}

// This method is general version of Write, use it instead!
func (item *FsbinlogSnapshotMeta) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *FsbinlogSnapshotMeta) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.LongWrite(w, item.CommitPosition)
	w = basictl.NatWrite(w, item.CommitCrc)
	w = basictl.NatWrite(w, item.CommitTs)
	return w
}

func (item *FsbinlogSnapshotMeta) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x6b49d850); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *FsbinlogSnapshotMeta) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *FsbinlogSnapshotMeta) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x6b49d850)
	return item.Write(w)
}

func (item FsbinlogSnapshotMeta) String() string {
	return string(item.WriteJSON(nil))
}

func (item *FsbinlogSnapshotMeta) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propCommitPositionPresented bool
	var propCommitCrcPresented bool
	var propCommitTsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.snapshotMeta", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "CommitPosition":
				if propCommitPositionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.snapshotMeta", "CommitPosition")
				}
				if err := Json2ReadInt64(in, &item.CommitPosition); err != nil {
					return err
				}
				propCommitPositionPresented = true
			case "CommitCrc":
				if propCommitCrcPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.snapshotMeta", "CommitCrc")
				}
				if err := Json2ReadUint32(in, &item.CommitCrc); err != nil {
					return err
				}
				propCommitCrcPresented = true
			case "CommitTs":
				if propCommitTsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.snapshotMeta", "CommitTs")
				}
				if err := Json2ReadUint32(in, &item.CommitTs); err != nil {
					return err
				}
				propCommitTsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("fsbinlog.snapshotMeta", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propCommitPositionPresented {
		item.CommitPosition = 0
	}
	if !propCommitCrcPresented {
		item.CommitCrc = 0
	}
	if !propCommitTsPresented {
		item.CommitTs = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *FsbinlogSnapshotMeta) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *FsbinlogSnapshotMeta) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *FsbinlogSnapshotMeta) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexCommitPosition := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"CommitPosition":`...)
	w = basictl.JSONWriteInt64(w, item.CommitPosition)
	if (item.CommitPosition != 0) == false {
		w = w[:backupIndexCommitPosition]
	}
	backupIndexCommitCrc := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"CommitCrc":`...)
	w = basictl.JSONWriteUint32(w, item.CommitCrc)
	if (item.CommitCrc != 0) == false {
		w = w[:backupIndexCommitCrc]
	}
	backupIndexCommitTs := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"CommitTs":`...)
	w = basictl.JSONWriteUint32(w, item.CommitTs)
	if (item.CommitTs != 0) == false {
		w = w[:backupIndexCommitTs]
	}
	return append(w, '}')
}

func (item *FsbinlogSnapshotMeta) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *FsbinlogSnapshotMeta) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("fsbinlog.snapshotMeta", err.Error())
	}
	return nil
}
