// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type FsbinlogLevStart struct {
	SchemaId   int32
	ExtraBytes int32
	SplitMod   int32
	SplitMin   int32
	SplitMax   int32
}

func (FsbinlogLevStart) TLName() string { return "fsbinlog.levStart" }
func (FsbinlogLevStart) TLTag() uint32  { return 0x44c644b }

func (item *FsbinlogLevStart) Reset() {
	item.SchemaId = 0
	item.ExtraBytes = 0
	item.SplitMod = 0
	item.SplitMin = 0
	item.SplitMax = 0
}

func (item *FsbinlogLevStart) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.SchemaId); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.ExtraBytes); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.SplitMod); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.SplitMin); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.SplitMax)
}

func (item *FsbinlogLevStart) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.SchemaId)
	w = basictl.IntWrite(w, item.ExtraBytes)
	w = basictl.IntWrite(w, item.SplitMod)
	w = basictl.IntWrite(w, item.SplitMin)
	return basictl.IntWrite(w, item.SplitMax), nil
}

func (item *FsbinlogLevStart) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x44c644b); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *FsbinlogLevStart) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x44c644b)
	return item.Write(w)
}

func (item FsbinlogLevStart) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *FsbinlogLevStart) ReadJSONLegacy(legacyTypeNames bool, j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("fsbinlog.levStart", "expected json object")
	}
	_jSchemaId := _jm["SchemaId"]
	delete(_jm, "SchemaId")
	if err := JsonReadInt32(_jSchemaId, &item.SchemaId); err != nil {
		return err
	}
	_jExtraBytes := _jm["ExtraBytes"]
	delete(_jm, "ExtraBytes")
	if err := JsonReadInt32(_jExtraBytes, &item.ExtraBytes); err != nil {
		return err
	}
	_jSplitMod := _jm["SplitMod"]
	delete(_jm, "SplitMod")
	if err := JsonReadInt32(_jSplitMod, &item.SplitMod); err != nil {
		return err
	}
	_jSplitMin := _jm["SplitMin"]
	delete(_jm, "SplitMin")
	if err := JsonReadInt32(_jSplitMin, &item.SplitMin); err != nil {
		return err
	}
	_jSplitMax := _jm["SplitMax"]
	delete(_jm, "SplitMax")
	if err := JsonReadInt32(_jSplitMax, &item.SplitMax); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("fsbinlog.levStart", k)
	}
	return nil
}

func (item *FsbinlogLevStart) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *FsbinlogLevStart) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.SchemaId != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"SchemaId":`...)
		w = basictl.JSONWriteInt32(w, item.SchemaId)
	}
	if item.ExtraBytes != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ExtraBytes":`...)
		w = basictl.JSONWriteInt32(w, item.ExtraBytes)
	}
	if item.SplitMod != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"SplitMod":`...)
		w = basictl.JSONWriteInt32(w, item.SplitMod)
	}
	if item.SplitMin != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"SplitMin":`...)
		w = basictl.JSONWriteInt32(w, item.SplitMin)
	}
	if item.SplitMax != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"SplitMax":`...)
		w = basictl.JSONWriteInt32(w, item.SplitMax)
	}
	return append(w, '}'), nil
}

func (item *FsbinlogLevStart) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *FsbinlogLevStart) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("fsbinlog.levStart", err.Error())
	}
	if err = item.ReadJSONLegacy(true, j); err != nil {
		return ErrorInvalidJSON("fsbinlog.levStart", err.Error())
	}
	return nil
}
