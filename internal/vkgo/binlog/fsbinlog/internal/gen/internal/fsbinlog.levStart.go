// Copyright 2024 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type FsbinlogLevStart struct {
	SchemaId   int32
	ExtraBytes int32
	SplitMod   int32
	SplitMin   int32
	SplitMax   int32
}

func (FsbinlogLevStart) TLName() string { return "fsbinlog.levStart" }
func (FsbinlogLevStart) TLTag() uint32  { return 0x44c644b }

func (item *FsbinlogLevStart) Reset() {
	item.SchemaId = 0
	item.ExtraBytes = 0
	item.SplitMod = 0
	item.SplitMin = 0
	item.SplitMax = 0
}

func (item *FsbinlogLevStart) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.SchemaId); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.ExtraBytes); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.SplitMod); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.SplitMin); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.SplitMax)
}

func (item *FsbinlogLevStart) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.SchemaId)
	w = basictl.IntWrite(w, item.ExtraBytes)
	w = basictl.IntWrite(w, item.SplitMod)
	w = basictl.IntWrite(w, item.SplitMin)
	return basictl.IntWrite(w, item.SplitMax), nil
}

func (item *FsbinlogLevStart) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x44c644b); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *FsbinlogLevStart) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x44c644b)
	return item.Write(w)
}

func (item FsbinlogLevStart) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *FsbinlogLevStart) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propSchemaIdPresented bool
	var propExtraBytesPresented bool
	var propSplitModPresented bool
	var propSplitMinPresented bool
	var propSplitMaxPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "SchemaId":
				if propSchemaIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.levStart", "SchemaId")
				}
				if err := Json2ReadInt32(in, &item.SchemaId); err != nil {
					return err
				}
				propSchemaIdPresented = true
			case "ExtraBytes":
				if propExtraBytesPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.levStart", "ExtraBytes")
				}
				if err := Json2ReadInt32(in, &item.ExtraBytes); err != nil {
					return err
				}
				propExtraBytesPresented = true
			case "SplitMod":
				if propSplitModPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.levStart", "SplitMod")
				}
				if err := Json2ReadInt32(in, &item.SplitMod); err != nil {
					return err
				}
				propSplitModPresented = true
			case "SplitMin":
				if propSplitMinPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.levStart", "SplitMin")
				}
				if err := Json2ReadInt32(in, &item.SplitMin); err != nil {
					return err
				}
				propSplitMinPresented = true
			case "SplitMax":
				if propSplitMaxPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("fsbinlog.levStart", "SplitMax")
				}
				if err := Json2ReadInt32(in, &item.SplitMax); err != nil {
					return err
				}
				propSplitMaxPresented = true
			default:
				return ErrorInvalidJSONExcessElement("fsbinlog.levStart", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propSchemaIdPresented {
		item.SchemaId = 0
	}
	if !propExtraBytesPresented {
		item.ExtraBytes = 0
	}
	if !propSplitModPresented {
		item.SplitMod = 0
	}
	if !propSplitMinPresented {
		item.SplitMin = 0
	}
	if !propSplitMaxPresented {
		item.SplitMax = 0
	}
	return nil
}

func (item *FsbinlogLevStart) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *FsbinlogLevStart) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexSchemaId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"SchemaId":`...)
	w = basictl.JSONWriteInt32(w, item.SchemaId)
	if (item.SchemaId != 0) == false {
		w = w[:backupIndexSchemaId]
	}
	backupIndexExtraBytes := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"ExtraBytes":`...)
	w = basictl.JSONWriteInt32(w, item.ExtraBytes)
	if (item.ExtraBytes != 0) == false {
		w = w[:backupIndexExtraBytes]
	}
	backupIndexSplitMod := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"SplitMod":`...)
	w = basictl.JSONWriteInt32(w, item.SplitMod)
	if (item.SplitMod != 0) == false {
		w = w[:backupIndexSplitMod]
	}
	backupIndexSplitMin := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"SplitMin":`...)
	w = basictl.JSONWriteInt32(w, item.SplitMin)
	if (item.SplitMin != 0) == false {
		w = w[:backupIndexSplitMin]
	}
	backupIndexSplitMax := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"SplitMax":`...)
	w = basictl.JSONWriteInt32(w, item.SplitMax)
	if (item.SplitMax != 0) == false {
		w = w[:backupIndexSplitMax]
	}
	return append(w, '}'), nil
}

func (item *FsbinlogLevStart) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *FsbinlogLevStart) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("fsbinlog.levStart", err.Error())
	}
	return nil
}
