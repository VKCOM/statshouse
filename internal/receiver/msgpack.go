// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

package receiver

// Code based on the one generated by github.com/tinylib/msgp.
// TODO: add safety checks for collection lengths

import (
	"github.com/tinylib/msgp/msgp"

	"github.com/vkcom/statshouse/internal/data_model/gen2/tl"
	"github.com/vkcom/statshouse/internal/data_model/gen2/tlstatshouse"
)

func msgpackUnmarshalStatshouseMetric(m *tlstatshouse.MetricBytes, buf []byte) ([]byte, error) {
	m.Reset()
	var err error
	var field []byte
	var numFields uint32
	numFields, buf, err = msgp.ReadMapHeaderBytes(buf)
	if err != nil {
		return nil, msgp.WrapError(err)
	}
	for numFields > 0 {
		numFields--
		field, buf, err = msgp.ReadMapKeyZC(buf)
		if err != nil {
			return nil, msgp.WrapError(err)
		}
		switch msgp.UnsafeString(field) {
		case "name":
			m.Name, buf, err = msgp.ReadStringAsBytes(buf, m.Name)
			if err != nil {
				return nil, msgp.WrapError(err, "Name")
			}
		case "tags":
			var numTags uint32
			numTags, buf, err = msgp.ReadMapHeaderBytes(buf)
			if err != nil {
				return nil, msgp.WrapError(err, "Tags")
			}
			if cap(m.Tags) >= int(numTags) {
				m.Tags = m.Tags[:numTags]
			} else {
				m.Tags = make([]tl.DictionaryFieldStringBytes, numTags)
			}
			for i := range m.Tags {
				m.Tags[i].Key, buf, err = msgp.ReadStringAsBytes(buf, m.Tags[i].Key)
				if err != nil {
					return nil, msgp.WrapError(err, "Tags")
				}
				m.Tags[i].Value, buf, err = msgp.ReadStringAsBytes(buf, m.Tags[i].Value)
				if err != nil {
					return nil, msgp.WrapError(err, "Tags", m.Tags[i].Key)
				}
			}
		case "counter":
			var value float64
			value, buf, err = msgp.ReadFloat64Bytes(buf)
			if err != nil {
				return nil, msgp.WrapError(err, "Counter")
			}
			m.SetCounter(value)
		case "t":
			var value int64
			value, buf, err = msgp.ReadInt64Bytes(buf)
			if err != nil {
				return nil, msgp.WrapError(err, "T")
			}
			m.SetT(value)
		case "ts":
			var value uint32
			value, buf, err = msgp.ReadUint32Bytes(buf)
			if err != nil {
				return nil, msgp.WrapError(err, "Ts")
			}
			m.SetTs(value)
		case "value":
			var numValues uint32
			numValues, buf, err = msgp.ReadArrayHeaderBytes(buf)
			if err != nil {
				return nil, msgp.WrapError(err, "Value")
			}
			value := m.Value
			if cap(value) >= int(numValues) {
				value = value[:numValues]
			} else {
				value = make([]float64, numValues)
			}
			for i := range value {
				value[i], buf, err = msgp.ReadFloat64Bytes(buf)
				if err != nil {
					return nil, msgp.WrapError(err, "Value", i)
				}
			}
			m.SetValue(value)
		case "unique":
			var numUnique uint32
			numUnique, buf, err = msgp.ReadArrayHeaderBytes(buf)
			if err != nil {
				return nil, msgp.WrapError(err, "Unique")
			}
			value := m.Unique
			if cap(value) >= int(numUnique) {
				value = value[:numUnique]
			} else {
				value = make([]int64, numUnique)
			}
			for i := range value {
				value[i], buf, err = msgp.ReadInt64Bytes(buf)
				if err != nil {
					return nil, msgp.WrapError(err, "Unique", i)
				}
			}
			m.SetUnique(value)
		default:
			buf, err = msgp.Skip(buf)
			if err != nil {
				return nil, msgp.WrapError(err)
			}
		}
	}
	return buf, nil
}

func msgpackUnmarshalStatshouseAddMetricBatch(mb *tlstatshouse.AddMetricsBatchBytes, buf []byte) ([]byte, error) {
	mb.Reset()
	var err error
	var field []byte
	var numFields uint32
	numFields, buf, err = msgp.ReadMapHeaderBytes(buf)
	if err != nil {
		return nil, msgp.WrapError(err)
	}
	for numFields > 0 {
		numFields--
		field, buf, err = msgp.ReadMapKeyZC(buf)
		if err != nil {
			return nil, msgp.WrapError(err)
		}
		switch msgp.UnsafeString(field) {
		case "metrics":
			var numMetrics uint32
			numMetrics, buf, err = msgp.ReadArrayHeaderBytes(buf)
			if err != nil {
				return nil, msgp.WrapError(err, "Metrics")
			}
			if cap(mb.Metrics) >= int(numMetrics) {
				mb.Metrics = mb.Metrics[:numMetrics]
			} else {
				mb.Metrics = make([]tlstatshouse.MetricBytes, numMetrics)
			}
			for i := range mb.Metrics {
				buf, err = msgpackUnmarshalStatshouseMetric(&mb.Metrics[i], buf)
				if err != nil {
					return nil, msgp.WrapError(err, "Metrics", i)
				}
			}
		default:
			buf, err = msgp.Skip(buf)
			if err != nil {
				return nil, msgp.WrapError(err)
			}
		}
	}
	return buf, nil
}

func msgpackLooksLikeMap(buf []byte) bool {
	_, _, err := msgp.ReadMapHeaderBytes(buf)
	return err == nil
}
