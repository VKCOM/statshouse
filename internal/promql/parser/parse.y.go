// Code generated by goyacc -o parse.y.go parse.y. DO NOT EDIT.

//line parse.y:17
package parser

import __yyfmt__ "fmt"

//line parse.y:17

import (
	"github.com/prometheus/prometheus/model/labels"
)

//line parse.y:24
type yySymType struct {
	yys      int
	node     Node
	item     Item
	matchers []*labels.Matcher
	matcher  *labels.Matcher
	strings  []string
	float    float64
	duration int64
	offsets  []int64
}

const EQL = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DOLLAR = 57351
const DURATION = 57352
const EOF = 57353
const ERROR = 57354
const IDENTIFIER = 57355
const LEFT_BRACE = 57356
const LEFT_BRACKET = 57357
const LEFT_PAREN = 57358
const METRIC_IDENTIFIER = 57359
const NUMBER = 57360
const RIGHT_BRACE = 57361
const RIGHT_BRACKET = 57362
const RIGHT_PAREN = 57363
const SEMICOLON = 57364
const SPACE = 57365
const STRING = 57366
const TIMES = 57367
const operatorsStart = 57368
const ADD = 57369
const BIND = 57370
const DIV = 57371
const EQLC = 57372
const EQL_REGEX = 57373
const GTE = 57374
const GTR = 57375
const LAND = 57376
const LDEFAULT = 57377
const LOR = 57378
const LSS = 57379
const LTE = 57380
const LUNLESS = 57381
const MOD = 57382
const MUL = 57383
const NEQ = 57384
const NEQ_REGEX = 57385
const POW = 57386
const SUB = 57387
const AT = 57388
const ATAN2 = 57389
const operatorsEnd = 57390
const aggregatorsStart = 57391
const AGGREGATE = 57392
const AVG = 57393
const BOTTOMK = 57394
const COUNT = 57395
const COUNT_VALUES = 57396
const DROP_EMPTY_SERIES = 57397
const GROUP = 57398
const MAX = 57399
const MIN = 57400
const QUANTILE = 57401
const STDDEV = 57402
const STDVAR = 57403
const SUM = 57404
const TOPK = 57405
const SORT = 57406
const SORT_DESC = 57407
const aggregatorsEnd = 57408
const keywordsStart = 57409
const BOOL = 57410
const BY = 57411
const GROUP_LEFT = 57412
const GROUP_RIGHT = 57413
const IGNORING = 57414
const OFFSET = 57415
const ON = 57416
const WITHOUT = 57417
const keywordsEnd = 57418
const preprocessorStart = 57419
const START = 57420
const END = 57421
const preprocessorEnd = 57422

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQL",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DOLLAR",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"operatorsStart",
	"ADD",
	"BIND",
	"DIV",
	"EQLC",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LDEFAULT",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"POW",
	"SUB",
	"AT",
	"ATAN2",
	"operatorsEnd",
	"aggregatorsStart",
	"AGGREGATE",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"DROP_EMPTY_SERIES",
	"GROUP",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"SORT",
	"SORT_DESC",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"keywordsEnd",
	"preprocessorStart",
	"START",
	"END",
	"preprocessorEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parse.y:630

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 1,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	2, 119,
	16, 119,
	69, 119,
	75, 119,
	-2, 93,
	-1, 26,
	2, 120,
	16, 120,
	69, 120,
	75, 120,
	-2, 94,
	-1, 27,
	2, 121,
	16, 121,
	69, 121,
	75, 121,
	-2, 96,
	-1, 28,
	2, 122,
	16, 122,
	69, 122,
	75, 122,
	-2, 97,
	-1, 29,
	2, 123,
	16, 123,
	69, 123,
	75, 123,
	-2, 98,
	-1, 30,
	2, 124,
	16, 124,
	69, 124,
	75, 124,
	-2, 99,
	-1, 31,
	2, 125,
	16, 125,
	69, 125,
	75, 125,
	-2, 104,
	-1, 32,
	2, 126,
	16, 126,
	69, 126,
	75, 126,
	-2, 106,
	-1, 33,
	2, 127,
	16, 127,
	69, 127,
	75, 127,
	-2, 108,
	-1, 34,
	2, 128,
	16, 128,
	69, 128,
	75, 128,
	-2, 109,
	-1, 35,
	2, 129,
	16, 129,
	69, 129,
	75, 129,
	-2, 110,
	-1, 36,
	2, 130,
	16, 130,
	69, 130,
	75, 130,
	-2, 111,
	-1, 37,
	2, 131,
	16, 131,
	69, 131,
	75, 131,
	-2, 112,
	-1, 38,
	2, 132,
	16, 132,
	69, 132,
	75, 132,
	-2, 113,
	-1, 39,
	2, 133,
	16, 133,
	69, 133,
	75, 133,
	-2, 114,
	-1, 150,
	13, 182,
	14, 182,
	17, 182,
	18, 182,
	24, 182,
	27, 182,
	34, 182,
	36, 182,
	39, 182,
	45, 182,
	50, 182,
	51, 182,
	52, 182,
	53, 182,
	54, 182,
	55, 182,
	56, 182,
	57, 182,
	58, 182,
	59, 182,
	60, 182,
	61, 182,
	62, 182,
	63, 182,
	64, 182,
	65, 182,
	69, 182,
	73, 182,
	75, 182,
	78, 182,
	79, 182,
	-2, 0,
	-1, 151,
	13, 182,
	14, 182,
	17, 182,
	18, 182,
	24, 182,
	27, 182,
	34, 182,
	36, 182,
	39, 182,
	45, 182,
	50, 182,
	51, 182,
	52, 182,
	53, 182,
	54, 182,
	55, 182,
	56, 182,
	57, 182,
	58, 182,
	59, 182,
	60, 182,
	61, 182,
	62, 182,
	63, 182,
	64, 182,
	65, 182,
	69, 182,
	73, 182,
	75, 182,
	78, 182,
	79, 182,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 642

var yyAct = [...]uint8{
	3, 178, 111, 112, 223, 222, 141, 85, 118, 73,
	93, 72, 17, 51, 234, 19, 46, 18, 75, 219,
	80, 76, 81, 20, 227, 55, 40, 77, 148, 232,
	149, 114, 78, 43, 231, 44, 64, 65, 45, 228,
	67, 218, 71, 54, 41, 150, 151, 74, 230, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 79, 113, 226, 42, 70,
	122, 23, 47, 213, 48, 88, 125, 49, 50, 134,
	225, 128, 131, 72, 127, 76, 87, 212, 114, 51,
	147, 77, 214, 110, 82, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 88, 67, 169, 71, 4, 171, 170, 117, 86,
	78, 126, 87, 113, 2, 235, 17, 51, 84, 19,
	46, 18, 172, 173, 122, 139, 130, 20, 52, 138,
	40, 70, 114, 123, 137, 215, 216, 43, 217, 44,
	129, 175, 45, 220, 221, 86, 136, 224, 41, 1,
	168, 124, 174, 24, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 39, 229,
	14, 13, 42, 12, 11, 180, 47, 142, 48, 143,
	92, 49, 50, 143, 120, 121, 191, 10, 9, 8,
	197, 211, 90, 132, 237, 7, 91, 6, 5, 15,
	115, 119, 176, 140, 233, 116, 145, 193, 21, 194,
	145, 22, 195, 179, 16, 83, 0, 144, 146, 236,
	210, 144, 146, 238, 181, 183, 185, 186, 187, 188,
	196, 198, 201, 202, 203, 204, 205, 206, 207, 180,
	0, 182, 184, 189, 190, 192, 199, 200, 0, 0,
	191, 208, 209, 0, 197, 211, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 193, 0, 194, 0, 0, 195, 0, 0, 0,
	0, 0, 0, 0, 210, 0, 0, 0, 181, 183,
	185, 186, 187, 188, 196, 198, 201, 202, 203, 204,
	205, 206, 207, 0, 0, 182, 184, 189, 190, 192,
	199, 200, 0, 0, 0, 208, 209, 17, 51, 0,
	19, 46, 18, 0, 0, 133, 0, 0, 20, 0,
	0, 40, 0, 0, 0, 0, 0, 0, 43, 0,
	44, 0, 0, 45, 0, 0, 0, 0, 0, 41,
	0, 0, 0, 0, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	0, 0, 72, 42, 0, 0, 0, 47, 135, 48,
	0, 0, 49, 50, 53, 0, 55, 56, 0, 57,
	58, 59, 69, 60, 61, 62, 63, 64, 65, 66,
	0, 67, 68, 71, 54, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 53, 0, 55, 56,
	70, 57, 58, 59, 69, 60, 61, 62, 63, 64,
	65, 66, 0, 67, 68, 71, 54, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 55, 56, 0, 57,
	58, 59, 70, 60, 61, 62, 63, 64, 65, 66,
	0, 67, 68, 71, 54, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 89, 55, 56, 0, 57, 58, 59, 0,
	70, 61, 62, 63, 64, 65, 66, 0, 67, 68,
	71, 54, 0, 72, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 55, 56, 0,
	57, 58, 0, 0, 0, 61, 62, 70, 64, 65,
	66, 0, 67, 68, 71, 54, 0, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 72, 0, 0, 0, 0, 0, 0,
	0, 70, 0, 0, 0, 53, 0, 55, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 64, 65,
	0, 0, 67, 68, 71, 54, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 70,
}

var yyPact = [...]int16{
	113, 127, -1000, 409, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 16, 104, -1000, -1,
	-1000, -1, 75, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 109, -1000, -58, -58, -58, -58, -58, -58, -58,
	-58, -58, -58, -58, -58, -58, -58, -58, -58, -58,
	78, 116, 132, 104, -48, -1000, 134, 134, 314, -1000,
	367, 68, -1000, 137, -1000, -1000, 122, 185, -1000, -1,
	-1000, -44, -25, -1000, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	21, -1000, -1000, 132, -1000, -1000, 100, -1000, -1000, -1000,
	-1000, -1000, -1000, 52, 52, 145, -1000, -1000, -1000, 247,
	-1000, -1000, 66, -1000, 409, -1000, -1000, 73, -1000, 189,
	139, 17, -1000, -1000, -1000, -1000, -1000, -4, 134, 134,
	134, 134, 68, 68, 568, 568, 568, 518, 484, 568,
	568, 518, 68, 68, 568, 68, -4, 447, 60, -1000,
	-1000, 3, -1000, -1000, 19, 132, 27, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1, -1000, -1000, -10, 112, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 21, -1000, -1000, -1000,
	-1000, 183, -1000, 409, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 225, 7, 224, 1, 6, 223, 221, 218, 215,
	212, 4, 5, 8, 211, 210, 209, 208, 9, 512,
	207, 206, 0, 205, 203, 47, 202, 71, 199, 198,
	197, 190, 184, 183, 181, 180, 3, 162, 2, 160,
	159,
}

var yyR1 = [...]int8{
	0, 40, 40, 40, 40, 40, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 17, 17, 17,
	17, 18, 18, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	19, 21, 21, 31, 31, 26, 26, 26, 26, 11,
	11, 11, 11, 10, 10, 10, 4, 4, 23, 25,
	25, 24, 24, 24, 32, 30, 30, 39, 39, 38,
	38, 16, 16, 16, 9, 9, 28, 34, 35, 35,
	35, 27, 27, 27, 1, 1, 1, 2, 2, 2,
	2, 2, 2, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 5, 5, 5,
	5, 29, 13, 14, 14, 15, 15, 36, 33, 37,
	37, 37, 12, 12,
}

var yyR2 = [...]int8{
	0, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 2,
	2, 2, 2, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	1, 0, 1, 3, 3, 1, 1, 3, 3, 3,
	4, 2, 1, 3, 1, 2, 1, 1, 2, 3,
	2, 3, 1, 2, 3, 5, 3, 3, 1, 1,
	2, 3, 5, 3, 1, 1, 5, 2, 2, 1,
	1, 3, 4, 2, 3, 1, 2, 4, 4, 3,
	3, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	1, 2, 0, 1,
}

var yyChk = [...]int16{
	-1000, -40, 11, -22, 2, -17, -20, -23, -28, -29,
	-30, -32, -33, -34, -35, -16, -3, 13, 18, 16,
	24, -8, -7, -27, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	27, 45, 69, 34, 36, 39, 17, 73, 75, 78,
	79, 14, 11, 27, 47, 29, 30, 32, 33, 34,
	36, 37, 38, 39, 40, 41, 42, 44, 45, 35,
	73, 46, 15, -18, -25, 2, 69, 75, 16, -25,
	-22, -22, -27, -1, 19, -2, 46, 13, 2, -19,
	-26, -21, -31, 68, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	15, -38, -36, 45, 10, -15, -9, 2, -13, -14,
	78, 79, 18, 27, 45, -36, -25, -18, -11, 16,
	2, -11, -24, 21, -22, 21, 19, 7, 2, 13,
	28, -5, 2, 4, 42, 31, 43, -22, 72, 74,
	70, 71, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -39, -38,
	-36, 16, -13, -13, -37, 6, -10, 21, -4, -6,
	2, 51, 68, 52, 69, 53, 54, 55, 56, 70,
	71, 13, 72, 34, 36, 39, 57, 17, 58, 73,
	74, 59, 60, 61, 62, 63, 64, 65, 78, 79,
	47, 18, 21, 7, 19, -2, -5, 9, 24, 2,
	-11, -11, -12, -11, -12, 20, 7, 21, 20, -36,
	21, 7, 2, -22, 24, 13, -38, 21, -4,
}

var yyDef = [...]int16{
	-2, -2, 2, 3, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 0, 100, 171, 0,
	178, 0, 79, 80, 118, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	165, 166, 95, 101, 102, 103, 105, 107, 115, 116,
	117, 0, 4, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	0, 0, 0, 0, 19, 20, 0, 0, 0, 58,
	0, 77, 78, 0, 83, 85, 0, 0, 92, 0,
	40, 45, 46, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 66, 69, 0, 177, 71, 0, 73, 175, 176,
	74, 75, 172, 0, 0, 179, 17, 18, 21, 0,
	52, 22, 0, 60, 62, 64, 81, 0, 86, 0,
	0, 0, 91, 167, 168, 169, 170, 23, 0, 0,
	-2, -2, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 0, 68,
	70, 0, 173, 174, 0, 180, 0, 51, 54, 56,
	57, 134, 135, 136, 137, 138, 139, 140, 141, 142,
	143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 59, 63, 82, 84, 0, 0, 89, 90,
	43, 44, 47, 183, 48, 65, 0, 72, 76, 181,
	49, 0, 55, 61, 87, 88, 67, 50, 53,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:162
		{
			yylex.(*parser).addParseErrf(PositionRange{}, "no expression found in input")
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:164
		{
			yylex.(*parser).generatedParserResult = yyDollar[1].node
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:167
		{
			yylex.(*parser).unexpected("", "")
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:189
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:191
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:193
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:195
		{
			yylex.(*parser).unexpected("aggregation", "")
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, Expressions{})
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:203
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:209
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:222
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:223
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:224
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:225
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:226
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:227
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:228
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:229
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:230
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:231
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:232
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:233
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:234
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:235
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:236
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:237
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:238
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse.y:246
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:251
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:259
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:264
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:274
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:280
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:289
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:291
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:293
		{
			yyVAL.strings = []string{}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:295
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
			yyVAL.strings = nil
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:301
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:303
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:305
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
			yyVAL.strings = yyDollar[1].strings
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:309
		{
			if !isLabel(yyDollar[1].item.Val) {
				yylex.(*parser).unexpected("grouping opts", "label")
			}
			yyVAL.item = yyDollar[1].item
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:316
		{
			yylex.(*parser).unexpected("grouping opts", "label")
			yyVAL.item = Item{}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:324
		{
			fn, exist := getFunction(yyDollar[1].item.Val)
			if !exist {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "unknown function with name %q", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
				PosRange: PositionRange{
					Start: yyDollar[1].item.Pos,
					End:   yylex.(*parser).lastClosing,
				},
			}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:341
		{
			yyVAL.node = yyDollar[2].node
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:343
		{
			yyVAL.node = Expressions{}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:347
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:349
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:351
		{
			yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "trailing commas not allowed in function call args")
			yyVAL.node = yyDollar[1].node
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:362
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr), PosRange: mergeRanges(&yyDollar[1].item, &yyDollar[3].item)}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.y:370
		{
			yylex.(*parser).addOffset(yyDollar[1].node, 0, yyDollar[4].offsets)
			yyVAL.node = yyDollar[1].node
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:375
		{
			yylex.(*parser).addOffset(yyDollar[1].node, yyDollar[3].duration, nil)
			yyVAL.node = yyDollar[1].node
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:382
		{
			yyVAL.offsets = append(yyVAL.offsets, yyDollar[3].duration)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:386
		{
			yyVAL.offsets = append(yyVAL.offsets, yyDollar[1].duration)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:392
		{
			yyVAL.duration = yyDollar[1].duration
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:396
		{
			yyVAL.duration = -yyDollar[2].duration
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:406
		{
			yylex.(*parser).setTimestamp(yyDollar[1].node, yyDollar[3].float)
			yyVAL.node = yyDollar[1].node
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.y:411
		{
			yylex.(*parser).setAtModifierPreprocessor(yyDollar[1].node, yyDollar[3].item)
			yyVAL.node = yyDollar[1].node
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:416
		{
			yylex.(*parser).unexpected("@", "timestamp")
			yyVAL.node = yyDollar[1].node
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.y:426
		{
			switch vs := yyDollar[1].node.(type) {
			case *VectorSelector:
				var errMsg string
				if vs.OriginalOffset != 0 || len(vs.OriginalOffsetEx) != 0 {
					errMsg = "no offset modifiers allowed before range"
				} else if vs.Timestamp != nil {
					errMsg = "no @ modifiers allowed before range"
				}
				if errMsg != "" {
					errRange := mergeRanges(&yyDollar[2].item, &yyDollar[5].item)
					yylex.(*parser).addParseErrf(errRange, errMsg)
				}
				yyVAL.node = &MatrixSelector{
					VectorSelector: yyDollar[1].node.(Expr),
					Range:          yyDollar[3].duration,
					EndPos:         yylex.(*parser).lastClosing,
				}
			default:
				yyVAL.node = &SubqueryExpr{
					Expr:   yyDollar[1].node.(Expr),
					Range:  yyDollar[3].duration,
					Step:   yyDollar[4].duration,
					EndPos: yylex.(*parser).lastClosing,
				}
			}
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:462
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				nl.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr), StartPos: yyDollar[1].item.Pos}
			}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:480
		{
			vs := yyDollar[2].node.(*VectorSelector)
			vs.PosRange = mergeRanges(&yyDollar[1].item, vs)
			vs.Name = yyDollar[1].item.Val
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:488
		{
			vs := &VectorSelector{
				Name:          yyDollar[1].item.Val,
				LabelMatchers: []*labels.Matcher{},
				PosRange:      yyDollar[1].item.PositionRange(),
			}
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:498
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:506
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[3].item),
			}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:513
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[4].item),
			}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:520
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: []*labels.Matcher{},
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[2].item),
			}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:529
		{
			if yyDollar[1].matchers != nil {
				yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
			} else {
				yyVAL.matchers = yyDollar[1].matchers
			}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:537
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:539
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
			yyVAL.matchers = yyDollar[1].matchers
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:543
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcherInternal(yyDollar[2].item, yyDollar[3].item, yyDollar[4].item)
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:545
		{
			yyVAL.matcher = yylex.(*parser).newVariableBinding(yyDollar[1].item, yyDollar[4].item)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:547
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:549
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:551
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
			yyVAL.matcher = nil
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:553
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
			yyVAL.matcher = nil
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:580
		{
			yyVAL.node = &NumberLiteral{
				Val:      yylex.(*parser).number(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:588
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:590
		{
			yyVAL.float = yyDollar[2].float
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:591
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:597
		{
			var err error
			yyVAL.duration, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:608
		{
			yyVAL.node = &StringLiteral{
				Val:      yylex.(*parser).unquoteString(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse.y:621
		{
			yyVAL.duration = 0
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:622
		{
			yyVAL.duration = 0
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:623
		{
			yyVAL.duration = 1
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse.y:626
		{
			yyVAL.strings = nil
		}
	}
	goto yystack /* stack new state and value */
}
