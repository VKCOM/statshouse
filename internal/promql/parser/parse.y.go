// Code generated by goyacc -o parse.y.go parse.y. DO NOT EDIT.

//line parse.y:17
package parser

import __yyfmt__ "fmt"

//line parse.y:17

import (
	"github.com/prometheus/prometheus/model/labels"
)

//line parse.y:24
type yySymType struct {
	yys      int
	node     Node
	item     Item
	matchers []*labels.Matcher
	matcher  *labels.Matcher
	strings  []string
	float    float64
	duration int64
}

const EQL = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DOLLAR = 57351
const DURATION = 57352
const EOF = 57353
const ERROR = 57354
const IDENTIFIER = 57355
const LEFT_BRACE = 57356
const LEFT_BRACKET = 57357
const LEFT_PAREN = 57358
const METRIC_IDENTIFIER = 57359
const NUMBER = 57360
const RIGHT_BRACE = 57361
const RIGHT_BRACKET = 57362
const RIGHT_PAREN = 57363
const SEMICOLON = 57364
const SPACE = 57365
const STRING = 57366
const TIMES = 57367
const operatorsStart = 57368
const ADD = 57369
const BIND = 57370
const DIV = 57371
const EQLC = 57372
const EQL_REGEX = 57373
const GTE = 57374
const GTR = 57375
const LAND = 57376
const LDEFAULT = 57377
const LOR = 57378
const LSS = 57379
const LTE = 57380
const LUNLESS = 57381
const MOD = 57382
const MUL = 57383
const NEQ = 57384
const NEQ_REGEX = 57385
const POW = 57386
const SUB = 57387
const AT = 57388
const ATAN2 = 57389
const operatorsEnd = 57390
const aggregatorsStart = 57391
const AVG = 57392
const BOTTOMK = 57393
const COUNT = 57394
const COUNT_VALUES = 57395
const GROUP = 57396
const MAX = 57397
const MIN = 57398
const QUANTILE = 57399
const STDDEV = 57400
const STDVAR = 57401
const SUM = 57402
const TOPK = 57403
const SORT = 57404
const SORT_DESC = 57405
const aggregatorsEnd = 57406
const keywordsStart = 57407
const BOOL = 57408
const BY = 57409
const GROUP_LEFT = 57410
const GROUP_RIGHT = 57411
const IGNORING = 57412
const OFFSET = 57413
const ON = 57414
const WITHOUT = 57415
const keywordsEnd = 57416
const preprocessorStart = 57417
const START = 57418
const END = 57419
const preprocessorEnd = 57420

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQL",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DOLLAR",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"operatorsStart",
	"ADD",
	"BIND",
	"DIV",
	"EQLC",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LDEFAULT",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"POW",
	"SUB",
	"AT",
	"ATAN2",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"GROUP",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"SORT",
	"SORT_DESC",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"keywordsEnd",
	"preprocessorStart",
	"START",
	"END",
	"preprocessorEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parse.y:622

//line yacctab:1
var yyExca = [...]int16{
	-1, 0,
	1, 1,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	2, 120,
	16, 120,
	67, 120,
	73, 120,
	-2, 96,
	-1, 26,
	2, 121,
	16, 121,
	67, 121,
	73, 121,
	-2, 97,
	-1, 27,
	2, 122,
	16, 122,
	67, 122,
	73, 122,
	-2, 99,
	-1, 28,
	2, 123,
	16, 123,
	67, 123,
	73, 123,
	-2, 100,
	-1, 29,
	2, 124,
	16, 124,
	67, 124,
	73, 124,
	-2, 101,
	-1, 30,
	2, 125,
	16, 125,
	67, 125,
	73, 125,
	-2, 106,
	-1, 31,
	2, 126,
	16, 126,
	67, 126,
	73, 126,
	-2, 108,
	-1, 32,
	2, 127,
	16, 127,
	67, 127,
	73, 127,
	-2, 110,
	-1, 33,
	2, 128,
	16, 128,
	67, 128,
	73, 128,
	-2, 111,
	-1, 34,
	2, 129,
	16, 129,
	67, 129,
	73, 129,
	-2, 112,
	-1, 35,
	2, 130,
	16, 130,
	67, 130,
	73, 130,
	-2, 113,
	-1, 36,
	2, 131,
	16, 131,
	67, 131,
	73, 131,
	-2, 114,
	-1, 37,
	2, 132,
	16, 132,
	67, 132,
	73, 132,
	-2, 115,
	-1, 38,
	2, 133,
	16, 133,
	67, 133,
	73, 133,
	-2, 116,
	-1, 149,
	13, 180,
	14, 180,
	17, 180,
	18, 180,
	24, 180,
	27, 180,
	34, 180,
	36, 180,
	39, 180,
	45, 180,
	50, 180,
	51, 180,
	52, 180,
	53, 180,
	54, 180,
	55, 180,
	56, 180,
	57, 180,
	58, 180,
	59, 180,
	60, 180,
	61, 180,
	62, 180,
	63, 180,
	67, 180,
	71, 180,
	73, 180,
	76, 180,
	77, 180,
	-2, 0,
	-1, 150,
	13, 180,
	14, 180,
	17, 180,
	18, 180,
	24, 180,
	27, 180,
	34, 180,
	36, 180,
	39, 180,
	45, 180,
	50, 180,
	51, 180,
	52, 180,
	53, 180,
	54, 180,
	55, 180,
	56, 180,
	57, 180,
	58, 180,
	59, 180,
	60, 180,
	61, 180,
	62, 180,
	63, 180,
	67, 180,
	71, 180,
	73, 180,
	76, 180,
	77, 180,
	-2, 0,
	-1, 172,
	20, 178,
	-2, 0,
	-1, 224,
	20, 179,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 629

var yyAct = [...]uint8{
	3, 176, 109, 220, 219, 84, 116, 71, 18, 50,
	74, 20, 45, 19, 75, 92, 132, 115, 111, 21,
	76, 79, 39, 80, 77, 147, 112, 148, 230, 42,
	222, 43, 232, 120, 44, 24, 66, 72, 70, 120,
	40, 168, 121, 149, 150, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 81,
	122, 110, 41, 69, 73, 137, 46, 77, 47, 50,
	136, 48, 49, 87, 123, 75, 87, 231, 133, 127,
	130, 76, 135, 78, 86, 138, 141, 86, 142, 146,
	211, 118, 119, 83, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	216, 126, 139, 167, 228, 144, 210, 85, 173, 227,
	85, 129, 172, 225, 51, 112, 143, 145, 169, 170,
	209, 112, 215, 226, 178, 128, 171, 125, 124, 214,
	233, 213, 212, 1, 223, 188, 112, 15, 14, 194,
	208, 217, 218, 234, 13, 221, 12, 11, 91, 10,
	9, 8, 89, 131, 7, 90, 190, 6, 191, 5,
	16, 192, 113, 117, 174, 224, 114, 22, 23, 207,
	177, 140, 179, 181, 183, 184, 185, 193, 195, 198,
	199, 200, 201, 202, 203, 204, 17, 82, 180, 182,
	186, 187, 189, 196, 197, 178, 0, 0, 205, 206,
	0, 229, 0, 0, 0, 0, 188, 0, 0, 0,
	194, 208, 0, 0, 175, 0, 0, 0, 0, 235,
	0, 0, 0, 0, 0, 0, 0, 190, 0, 191,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 0, 179, 181, 183, 184, 185, 193, 195,
	198, 199, 200, 201, 202, 203, 204, 0, 0, 180,
	182, 186, 187, 189, 196, 197, 4, 0, 0, 205,
	206, 0, 0, 0, 0, 2, 71, 18, 50, 0,
	20, 45, 19, 0, 0, 0, 0, 0, 21, 0,
	54, 39, 0, 0, 0, 0, 0, 0, 42, 0,
	43, 63, 64, 44, 0, 66, 0, 70, 53, 40,
	0, 0, 0, 0, 25, 26, 27, 28, 29, 30,
	31, 32, 33, 34, 35, 36, 37, 38, 0, 0,
	0, 41, 69, 0, 0, 46, 0, 47, 0, 0,
	48, 49, 18, 50, 0, 20, 45, 19, 0, 0,
	0, 0, 0, 21, 0, 0, 39, 0, 0, 0,
	0, 0, 0, 42, 0, 43, 0, 0, 44, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 0, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 0, 0, 71, 41, 0, 0, 0,
	46, 134, 47, 0, 0, 48, 49, 52, 0, 54,
	55, 0, 56, 57, 58, 68, 59, 60, 61, 62,
	63, 64, 65, 71, 66, 67, 70, 53, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 54, 55, 0,
	56, 57, 58, 68, 59, 60, 61, 62, 63, 64,
	65, 69, 66, 67, 70, 53, 0, 0, 0, 71,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 54, 55, 0, 56, 57, 58, 69,
	59, 60, 61, 62, 63, 64, 65, 71, 66, 67,
	70, 53, 88, 0, 0, 0, 0, 0, 0, 52,
	0, 54, 55, 0, 56, 57, 58, 0, 71, 60,
	61, 62, 63, 64, 65, 69, 66, 67, 70, 53,
	52, 0, 54, 55, 0, 56, 57, 0, 0, 0,
	60, 61, 0, 63, 64, 65, 0, 66, 67, 70,
	53, 0, 0, 69, 0, 0, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 71, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 0, 54, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 64, 0,
	0, 66, 67, 70, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69,
}

var yyPact = [...]int16{
	274, 113, -1000, 418, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8, 51, -1000,
	339, -1000, 339, 55, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	74, -1000, -51, -51, -51, -51, -51, -51, -51, -51,
	-51, -51, -51, -51, -51, -51, -51, -51, -51, 16,
	15, 136, 51, -53, -1000, 119, 119, -5, -1000, 390,
	-8, -1000, 63, -1000, -1000, 72, 84, -1000, 339, -1000,
	-45, -25, -1000, 339, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, -1000,
	115, -1000, -1000, -1000, 25, -1000, -1000, -1000, -1000, -1000,
	-1000, 21, 21, 116, -1000, -1000, -1000, -1000, 203, -1000,
	-1000, 109, -1000, 418, -1000, -1000, 71, -1000, 137, 130,
	108, -1000, -1000, -1000, -1000, -1000, 271, 119, 119, 119,
	119, -8, -8, 557, 557, 557, 503, 482, 557, 557,
	503, -8, -8, 557, -8, 271, 454, -1000, 9, -1000,
	-1000, -1000, 121, -1000, 112, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	339, -1000, -1000, 4, 64, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12, 138, -1000, -1000, 132, -1000, 418,
	-1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 197, 5, 196, 1, 181, 180, 178, 177, 176,
	174, 3, 4, 6, 173, 172, 170, 169, 37, 502,
	167, 165, 0, 164, 163, 64, 162, 35, 161, 160,
	159, 158, 157, 156, 154, 148, 147, 2, 144, 143,
}

var yyR1 = [...]int8{
	0, 39, 39, 39, 39, 39, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 17, 17,
	17, 17, 18, 18, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 19, 21, 21, 31, 31, 26, 26, 26, 26,
	11, 11, 11, 11, 10, 10, 10, 4, 4, 23,
	25, 25, 24, 24, 24, 32, 30, 30, 30, 16,
	16, 16, 9, 9, 28, 34, 34, 34, 34, 34,
	35, 36, 36, 36, 27, 27, 27, 1, 1, 1,
	2, 2, 2, 2, 2, 2, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 5, 5, 5, 5,
	29, 13, 14, 14, 15, 15, 37, 33, 38, 38,
	12, 12,
}

var yyR2 = [...]int8{
	0, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	2, 2, 2, 2, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 1, 0, 1, 3, 3, 1, 1, 3, 3,
	3, 4, 2, 1, 3, 1, 2, 1, 1, 2,
	3, 2, 3, 1, 2, 3, 3, 4, 3, 3,
	5, 3, 1, 1, 4, 6, 6, 5, 4, 3,
	2, 2, 1, 1, 3, 4, 2, 3, 1, 2,
	4, 4, 3, 3, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 1,
	0, 1,
}

var yyChk = [...]int16{
	-1000, -39, 11, -22, 2, -17, -20, -23, -28, -29,
	-30, -32, -33, -34, -35, -36, -16, -3, 13, 18,
	16, 24, -8, -7, -27, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 27,
	45, 67, 34, 36, 39, 17, 71, 73, 76, 77,
	14, 11, 27, 47, 29, 30, 32, 33, 34, 36,
	37, 38, 39, 40, 41, 42, 44, 45, 35, 71,
	46, 15, -18, -25, 2, 67, 73, 16, -25, -22,
	-22, -27, -1, 19, -2, 46, 13, 2, -19, -26,
	-21, -31, 66, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -37,
	45, 2, 10, -15, -9, 2, -13, -14, 76, 77,
	18, 27, 45, -37, 2, -25, -18, -11, 16, 2,
	-11, -24, 21, -22, 21, 19, 7, 2, 13, 28,
	-5, 2, 4, 42, 31, 43, -22, 70, 72, 68,
	69, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -37, 16, -13,
	-13, 20, 6, 2, -10, 21, -4, -6, 2, 50,
	66, 51, 67, 52, 53, 54, 68, 69, 13, 70,
	34, 36, 39, 55, 17, 56, 71, 72, 57, 58,
	59, 60, 61, 62, 63, 76, 77, 47, 18, 21,
	7, 19, -2, 4, 9, 24, 2, -11, -11, -12,
	-11, -12, 21, -38, -37, 2, 21, 7, 2, -22,
	24, 13, 20, 2, 21, -4,
}

var yyDef = [...]int16{
	-2, -2, 2, 3, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 0, 102, 170,
	0, 177, 0, 82, 83, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 164,
	165, 98, 103, 104, 105, 107, 109, 117, 118, 119,
	0, 4, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 0,
	0, 0, 0, 20, 21, 0, 0, 0, 59, 0,
	80, 81, 0, 86, 88, 0, 0, 95, 0, 41,
	46, 47, 43, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 66,
	0, 68, 176, 69, 0, 71, 174, 175, 72, 73,
	171, 0, 0, 0, 79, 18, 19, 22, 0, 53,
	23, 0, 61, 63, 65, 84, 0, 89, 0, 0,
	0, 94, 166, 167, 168, 169, 24, 0, 0, -2,
	-2, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 67, 0, 172,
	173, 74, -2, 78, 0, 52, 55, 57, 58, 134,
	135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 60,
	64, 85, 87, 0, 0, 92, 93, 44, 45, 48,
	181, 49, 70, 0, -2, 77, 50, 0, 56, 62,
	90, 91, 75, 76, 51, 54,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:158
		{
			yylex.(*parser).addParseErrf(PositionRange{}, "no expression found in input")
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:160
		{
			yylex.(*parser).generatedParserResult = yyDollar[1].node
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:163
		{
			yylex.(*parser).unexpected("", "")
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:186
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:188
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:190
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:192
		{
			yylex.(*parser).unexpected("aggregation", "")
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, Expressions{})
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:200
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:206
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:219
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:220
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:221
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:222
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:223
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:224
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:225
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:226
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:227
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:228
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:229
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:230
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:231
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:232
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:233
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:234
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:235
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse.y:243
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:248
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:256
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:261
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:271
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:277
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:286
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:288
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:290
		{
			yyVAL.strings = []string{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:292
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
			yyVAL.strings = nil
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:298
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:300
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:302
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
			yyVAL.strings = yyDollar[1].strings
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:306
		{
			if !isLabel(yyDollar[1].item.Val) {
				yylex.(*parser).unexpected("grouping opts", "label")
			}
			yyVAL.item = yyDollar[1].item
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:313
		{
			yylex.(*parser).unexpected("grouping opts", "label")
			yyVAL.item = Item{}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:321
		{
			fn, exist := getFunction(yyDollar[1].item.Val)
			if !exist {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "unknown function with name %q", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
				PosRange: PositionRange{
					Start: yyDollar[1].item.Pos,
					End:   yylex.(*parser).lastClosing,
				},
			}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:338
		{
			yyVAL.node = yyDollar[2].node
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:340
		{
			yyVAL.node = Expressions{}
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:344
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:346
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:348
		{
			yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "trailing commas not allowed in function call args")
			yyVAL.node = yyDollar[1].node
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:359
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr), PosRange: mergeRanges(&yyDollar[1].item, &yyDollar[3].item)}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:367
		{
			yylex.(*parser).addOffset(yyDollar[1].node, yyDollar[3].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:372
		{
			yylex.(*parser).addOffset(yyDollar[1].node, -yyDollar[4].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:377
		{
			yylex.(*parser).unexpected("offset", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:384
		{
			yylex.(*parser).setTimestamp(yyDollar[1].node, yyDollar[3].float)
			yyVAL.node = yyDollar[1].node
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.y:389
		{
			yylex.(*parser).setAtModifierPreprocessor(yyDollar[1].node, yyDollar[3].item)
			yyVAL.node = yyDollar[1].node
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:394
		{
			yylex.(*parser).unexpected("@", "timestamp")
			yyVAL.node = yyDollar[1].node
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:404
		{
			var errMsg string
			vs, ok := yyDollar[1].node.(*VectorSelector)
			if !ok {
				errMsg = "ranges only allowed for vector selectors"
			} else if vs.OriginalOffset != 0 {
				errMsg = "no offset modifiers allowed before range"
			} else if vs.Timestamp != nil {
				errMsg = "no @ modifiers allowed before range"
			}

			if errMsg != "" {
				errRange := mergeRanges(&yyDollar[2].item, &yyDollar[4].item)
				yylex.(*parser).addParseErrf(errRange, errMsg)
			}

			yyVAL.node = &MatrixSelector{
				VectorSelector: yyDollar[1].node.(Expr),
				Range:          yyDollar[3].duration,
				EndPos:         yylex.(*parser).lastClosing,
			}
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parse.y:429
		{
			yyVAL.node = &SubqueryExpr{
				Expr:  yyDollar[1].node.(Expr),
				Range: yyDollar[3].duration,
				Step:  yyDollar[5].duration,

				EndPos: yyDollar[6].item.Pos + 1,
			}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parse.y:439
		{
			yylex.(*parser).unexpected("subquery selector", "\"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parse.y:441
		{
			yylex.(*parser).unexpected("subquery selector", "duration or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:443
		{
			yylex.(*parser).unexpected("subquery or range", "\":\" or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:445
		{
			yylex.(*parser).unexpected("subquery selector", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:455
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				nl.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr), StartPos: yyDollar[1].item.Pos}
			}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:473
		{
			vs := yyDollar[2].node.(*VectorSelector)
			vs.PosRange = mergeRanges(&yyDollar[1].item, vs)
			vs.Name = yyDollar[1].item.Val
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:481
		{
			vs := &VectorSelector{
				Name:          yyDollar[1].item.Val,
				LabelMatchers: []*labels.Matcher{},
				PosRange:      yyDollar[1].item.PositionRange(),
			}
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:491
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:499
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[3].item),
			}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:506
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[4].item),
			}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:513
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: []*labels.Matcher{},
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[2].item),
			}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:522
		{
			if yyDollar[1].matchers != nil {
				yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
			} else {
				yyVAL.matchers = yyDollar[1].matchers
			}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:530
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:532
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
			yyVAL.matchers = yyDollar[1].matchers
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:536
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcherInternal(yyDollar[2].item, yyDollar[4].item)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parse.y:538
		{
			yyVAL.matcher = yylex.(*parser).newVariableBinding(yyDollar[1].item, yyDollar[4].item)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:540
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parse.y:542
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:544
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
			yyVAL.matcher = nil
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:546
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
			yyVAL.matcher = nil
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:573
		{
			yyVAL.node = &NumberLiteral{
				Val:      yylex.(*parser).number(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:581
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:583
		{
			yyVAL.float = yyDollar[2].float
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parse.y:584
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:590
		{
			var err error
			yyVAL.duration, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parse.y:601
		{
			yyVAL.node = &StringLiteral{
				Val:      yylex.(*parser).unquoteString(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse.y:614
		{
			yyVAL.duration = 0
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parse.y:618
		{
			yyVAL.strings = nil
		}
	}
	goto yystack /* stack new state and value */
}
