// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlengine

import (
	"context"
	"time"

	"github.com/VKCOM/statshouse/internal/data_model/gen2/internal"
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
	"github.com/VKCOM/statshouse/internal/vkgo/rpc"
)

type (
	AlreadyInMasterMode                           = internal.EngineAlreadyInMasterMode
	AlreadyInReplicaMode                          = internal.EngineAlreadyInReplicaMode
	AsyncSleep                                    = internal.EngineAsyncSleep
	BinlogPrefix                                  = internal.EngineBinlogPrefix
	Count                                         = internal.EngineCount
	DictionaryEngineMetafilesStatBoxed            = internal.DictionaryEngineMetafilesStatBoxed
	DictionaryFieldEngineMetafilesStatBoxed       = internal.DictionaryFieldEngineMetafilesStatBoxed
	DumpForceQueries                              = internal.EngineDumpForceQueries
	DumpLastQueries                               = internal.EngineDumpLastQueries
	DumpNextQueries                               = internal.EngineDumpNextQueries
	EnableMetafilesAnalyzer                       = internal.EngineEnableMetafilesAnalyzer
	FailedToSwitchMode                            = internal.EngineFailedToSwitchMode
	FilteredStat                                  = internal.EngineFilteredStat
	GetBinlogPrefixes                             = internal.EngineGetBinlogPrefixes
	GetExpectedMetafilesStats                     = internal.EngineGetExpectedMetafilesStats
	GetReadWriteMode                              = internal.EngineGetReadWriteMode
	GetReindexStatus                              = internal.EngineGetReindexStatus
	HttpQuery                                     = internal.EngineHttpQuery
	HttpQueryResponse                             = internal.EngineHttpQueryResponse
	InvokeHttpQuery                               = internal.EngineInvokeHttpQuery
	IsProduction                                  = internal.EngineIsProduction
	MetafilesOneMemoryStat                        = internal.EngineMetafilesOneMemoryStat
	MetafilesStat                                 = internal.EngineMetafilesStat
	Nop                                           = internal.EngineNop
	Pid                                           = internal.EnginePid
	PushStat                                      = internal.EnginePushStat
	QueryResult                                   = internal.EngineQueryResult
	QueryResult0                                  = internal.EngineQueryResult0
	QueryResultAio                                = internal.EngineQueryResultAio
	QueryResultError                              = internal.EngineQueryResultError
	ReadNop                                       = internal.EngineReadNop
	ReadWriteMode                                 = internal.EngineReadWriteMode
	RecordNextQueries                             = internal.EngineRecordNextQueries
	RegisterDynamicLib                            = internal.EngineRegisterDynamicLib
	ReindexStatus                                 = internal.EngineReindexStatus
	ReindexStatusDone                             = internal.EngineReindexStatusDone
	ReindexStatusDoneOld                          = internal.EngineReindexStatusDoneOld
	ReindexStatusFailed                           = internal.EngineReindexStatusFailed
	ReindexStatusNever                            = internal.EngineReindexStatusNever
	ReindexStatusRunning                          = internal.EngineReindexStatusRunning
	ReindexStatusRunningOld                       = internal.EngineReindexStatusRunningOld
	ReindexStatusSignaled                         = internal.EngineReindexStatusSignaled
	ReloadDynamicLib                              = internal.EngineReloadDynamicLib
	ReloadDynamicLibOptions                       = internal.EngineReloadDynamicLibOptions
	ReplaceConfigServer                           = internal.EngineReplaceConfigServer
	SendSignal                                    = internal.EngineSendSignal
	SetFsyncInterval                              = internal.EngineSetFsyncInterval
	SetMetafileMemory                             = internal.EngineSetMetafileMemory
	SetNoPersistentConfigArray                    = internal.EngineSetNoPersistentConfigArray
	SetNoPersistentConfigValue                    = internal.EngineSetNoPersistentConfigValue
	SetPersistentConfigArray                      = internal.EngineSetPersistentConfigArray
	SetPersistentConfigValue                      = internal.EngineSetPersistentConfigValue
	SetVerbosity                                  = internal.EngineSetVerbosity
	SetVerbosityType                              = internal.EngineSetVerbosityType
	Sleep                                         = internal.EngineSleep
	Stat                                          = internal.EngineStat
	SwitchMasterReplicaModeResult                 = internal.EngineSwitchMasterReplicaModeResult
	SwitchToMasterMode                            = internal.EngineSwitchToMasterMode
	SwitchToMasterModeForcefully                  = internal.EngineSwitchToMasterModeForcefully
	SwitchToReplicaMode                           = internal.EngineSwitchToReplicaMode
	SwitchedToMasterMode                          = internal.EngineSwitchedToMasterMode
	SwitchedToMasterModeForcefully                = internal.EngineSwitchedToMasterModeForcefully
	SwitchedToReplicaMode                         = internal.EngineSwitchedToReplicaMode
	UnregisterDynamicLib                          = internal.EngineUnregisterDynamicLib
	VectorDictionaryFieldEngineMetafilesStatBoxed = internal.VectorDictionaryFieldEngineMetafilesStatBoxed
	VectorEngineBinlogPrefix                      = internal.VectorEngineBinlogPrefix
	VectorEngineMetafilesOneMemoryStat            = internal.VectorEngineMetafilesOneMemoryStat
	Version                                       = internal.EngineVersion
	WriteNop                                      = internal.EngineWriteNop

	Count__Result                      = internal.BoolStat
	DumpForceQueries__Result           = internal.True
	DumpLastQueries__Result            = internal.True
	DumpNextQueries__Result            = internal.True
	FilteredStat__Result               = internal.Stat
	GetBinlogPrefixes__Result          = []internal.EngineBinlogPrefix
	GetExpectedMetafilesStats__Result  = map[string]internal.EngineMetafilesStat
	Nop__Result                        = internal.True
	Pid__Result                        = internal.NetPid
	ReadNop__Result                    = internal.True
	RegisterDynamicLib__Result         = internal.BoolStat
	ReloadDynamicLib__Result           = internal.BoolStat
	ReplaceConfigServer__Result        = internal.True
	SendSignal__Result                 = internal.True
	SetFsyncInterval__Result           = internal.BoolStat
	SetMetafileMemory__Result          = internal.BoolStat
	SetNoPersistentConfigArray__Result = internal.True
	SetNoPersistentConfigValue__Result = internal.True
	SetPersistentConfigArray__Result   = internal.True
	SetPersistentConfigValue__Result   = internal.True
	SetVerbosity__Result               = internal.True
	SetVerbosityType__Result           = internal.True
	Stat__Result                       = internal.Stat
	UnregisterDynamicLib__Result       = internal.BoolStat
	WriteNop__Result                   = internal.True
)

type Client struct {
	Client  rpc.Client
	Network string // should be either "tcp4" or "unix"
	Address string
	ActorID int64         // should be >0 for routing via rpc-proxy
	Timeout time.Duration // set to extra.CustomTimeoutMs, if not already set
}

func (c *Client) AsyncSleep(ctx context.Context, args AsyncSleep, extra *rpc.InvokeReqExtra, ret *bool) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.asyncSleep"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.asyncSleep", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.asyncSleep", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.asyncSleep", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) Count(ctx context.Context, args Count, extra *rpc.InvokeReqExtra, ret *Count__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.count"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.count", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.count", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.count", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) DumpForceQueries(ctx context.Context, args DumpForceQueries, extra *rpc.InvokeReqExtra, ret *DumpForceQueries__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.dumpForceQueries"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.dumpForceQueries", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.dumpForceQueries", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.dumpForceQueries", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) DumpLastQueries(ctx context.Context, args DumpLastQueries, extra *rpc.InvokeReqExtra, ret *DumpLastQueries__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.dumpLastQueries"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.dumpLastQueries", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.dumpLastQueries", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.dumpLastQueries", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) DumpNextQueries(ctx context.Context, args DumpNextQueries, extra *rpc.InvokeReqExtra, ret *DumpNextQueries__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.dumpNextQueries"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.dumpNextQueries", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.dumpNextQueries", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.dumpNextQueries", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) EnableMetafilesAnalyzer(ctx context.Context, args EnableMetafilesAnalyzer, extra *rpc.InvokeReqExtra, ret *bool) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.enableMetafilesAnalyzer"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.enableMetafilesAnalyzer", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.enableMetafilesAnalyzer", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.enableMetafilesAnalyzer", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) FilteredStat(ctx context.Context, args FilteredStat, extra *rpc.InvokeReqExtra, ret *FilteredStat__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.filteredStat"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.filteredStat", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.filteredStat", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.filteredStat", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) GetBinlogPrefixes(ctx context.Context, args GetBinlogPrefixes, extra *rpc.InvokeReqExtra, ret *GetBinlogPrefixes__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.getBinlogPrefixes"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.getBinlogPrefixes", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.getBinlogPrefixes", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.getBinlogPrefixes", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) GetExpectedMetafilesStats(ctx context.Context, args GetExpectedMetafilesStats, extra *rpc.InvokeReqExtra, ret *GetExpectedMetafilesStats__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.getExpectedMetafilesStats"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.getExpectedMetafilesStats", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.getExpectedMetafilesStats", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.getExpectedMetafilesStats", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) GetReadWriteMode(ctx context.Context, args GetReadWriteMode, extra *rpc.InvokeReqExtra, ret *ReadWriteMode) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.getReadWriteMode"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.getReadWriteMode", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.getReadWriteMode", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.getReadWriteMode", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) GetReindexStatus(ctx context.Context, args GetReindexStatus, extra *rpc.InvokeReqExtra, ret *ReindexStatus) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.getReindexStatus"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.getReindexStatus", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.getReindexStatus", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.getReindexStatus", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) InvokeHttpQuery(ctx context.Context, args InvokeHttpQuery, extra *rpc.InvokeReqExtra, ret *HttpQueryResponse) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.invokeHttpQuery"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.invokeHttpQuery", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.invokeHttpQuery", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.invokeHttpQuery", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) IsProduction(ctx context.Context, args IsProduction, extra *rpc.InvokeReqExtra, ret *bool) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.isProduction"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.isProduction", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.isProduction", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.isProduction", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) Nop(ctx context.Context, args Nop, extra *rpc.InvokeReqExtra, ret *Nop__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.nop"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.nop", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.nop", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.nop", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) Pid(ctx context.Context, args Pid, extra *rpc.InvokeReqExtra, ret *Pid__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.pid"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.pid", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.pid", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.pid", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) PushStat(ctx context.Context, args PushStat, extra *rpc.InvokeReqExtra, ret *bool) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.pushStat"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.pushStat", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.pushStat", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.pushStat", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) ReadNop(ctx context.Context, args ReadNop, extra *rpc.InvokeReqExtra, ret *ReadNop__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.ReadOnly = true
	req.FunctionName = "engine.readNop"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.readNop", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.readNop", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.readNop", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) RecordNextQueries(ctx context.Context, args RecordNextQueries, extra *rpc.InvokeReqExtra, ret *bool) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.recordNextQueries"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.recordNextQueries", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.recordNextQueries", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.recordNextQueries", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) RegisterDynamicLib(ctx context.Context, args RegisterDynamicLib, extra *rpc.InvokeReqExtra, ret *RegisterDynamicLib__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.registerDynamicLib"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.registerDynamicLib", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.registerDynamicLib", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.registerDynamicLib", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) ReloadDynamicLib(ctx context.Context, args ReloadDynamicLib, extra *rpc.InvokeReqExtra, ret *ReloadDynamicLib__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.reloadDynamicLib"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.reloadDynamicLib", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.reloadDynamicLib", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.reloadDynamicLib", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) ReplaceConfigServer(ctx context.Context, args ReplaceConfigServer, extra *rpc.InvokeReqExtra, ret *ReplaceConfigServer__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.replaceConfigServer"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.replaceConfigServer", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.replaceConfigServer", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.replaceConfigServer", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SendSignal(ctx context.Context, args SendSignal, extra *rpc.InvokeReqExtra, ret *SendSignal__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.sendSignal"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.sendSignal", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.sendSignal", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.sendSignal", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SetFsyncInterval(ctx context.Context, args SetFsyncInterval, extra *rpc.InvokeReqExtra, ret *SetFsyncInterval__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.setFsyncInterval"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.setFsyncInterval", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.setFsyncInterval", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.setFsyncInterval", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SetMetafileMemory(ctx context.Context, args SetMetafileMemory, extra *rpc.InvokeReqExtra, ret *SetMetafileMemory__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.ReadOnly = true
	req.FunctionName = "engine.setMetafileMemory"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.setMetafileMemory", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.setMetafileMemory", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.setMetafileMemory", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SetNoPersistentConfigArray(ctx context.Context, args SetNoPersistentConfigArray, extra *rpc.InvokeReqExtra, ret *SetNoPersistentConfigArray__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.setNoPersistentConfigArray"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.setNoPersistentConfigArray", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.setNoPersistentConfigArray", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.setNoPersistentConfigArray", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SetNoPersistentConfigValue(ctx context.Context, args SetNoPersistentConfigValue, extra *rpc.InvokeReqExtra, ret *SetNoPersistentConfigValue__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.setNoPersistentConfigValue"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.setNoPersistentConfigValue", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.setNoPersistentConfigValue", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.setNoPersistentConfigValue", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SetPersistentConfigArray(ctx context.Context, args SetPersistentConfigArray, extra *rpc.InvokeReqExtra, ret *SetPersistentConfigArray__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.setPersistentConfigArray"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.setPersistentConfigArray", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.setPersistentConfigArray", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.setPersistentConfigArray", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SetPersistentConfigValue(ctx context.Context, args SetPersistentConfigValue, extra *rpc.InvokeReqExtra, ret *SetPersistentConfigValue__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.setPersistentConfigValue"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.setPersistentConfigValue", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.setPersistentConfigValue", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.setPersistentConfigValue", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SetVerbosity(ctx context.Context, args SetVerbosity, extra *rpc.InvokeReqExtra, ret *SetVerbosity__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.setVerbosity"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.setVerbosity", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.setVerbosity", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.setVerbosity", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SetVerbosityType(ctx context.Context, args SetVerbosityType, extra *rpc.InvokeReqExtra, ret *SetVerbosityType__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.setVerbosityType"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.setVerbosityType", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.setVerbosityType", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.setVerbosityType", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) Sleep(ctx context.Context, args Sleep, extra *rpc.InvokeReqExtra, ret *bool) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.sleep"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.sleep", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.sleep", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.sleep", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) Stat(ctx context.Context, args Stat, extra *rpc.InvokeReqExtra, ret *Stat__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.stat"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.stat", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.stat", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.stat", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SwitchToMasterMode(ctx context.Context, args SwitchToMasterMode, extra *rpc.InvokeReqExtra, ret *SwitchMasterReplicaModeResult) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.switchToMasterMode"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.switchToMasterMode", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.switchToMasterMode", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.switchToMasterMode", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SwitchToMasterModeForcefully(ctx context.Context, args SwitchToMasterModeForcefully, extra *rpc.InvokeReqExtra, ret *SwitchMasterReplicaModeResult) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.switchToMasterModeForcefully"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.switchToMasterModeForcefully", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.switchToMasterModeForcefully", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.switchToMasterModeForcefully", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) SwitchToReplicaMode(ctx context.Context, args SwitchToReplicaMode, extra *rpc.InvokeReqExtra, ret *SwitchMasterReplicaModeResult) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.switchToReplicaMode"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.switchToReplicaMode", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.switchToReplicaMode", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.switchToReplicaMode", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) UnregisterDynamicLib(ctx context.Context, args UnregisterDynamicLib, extra *rpc.InvokeReqExtra, ret *UnregisterDynamicLib__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.unregisterDynamicLib"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.unregisterDynamicLib", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.unregisterDynamicLib", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.unregisterDynamicLib", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) Version(ctx context.Context, args Version, extra *rpc.InvokeReqExtra, ret *string) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.version"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.version", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.version", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.version", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) WriteNop(ctx context.Context, args WriteNop, extra *rpc.InvokeReqExtra, ret *WriteNop__Result) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "engine.writeNop"
	if extra != nil {
		req.Extra = extra.RequestExtra
		req.FailIfNoConnection = extra.FailIfNoConnection
	}
	rpc.UpdateExtraTimeout(&req.Extra, c.Timeout)
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("engine.writeNop", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	if extra != nil && resp != nil {
		extra.ResponseExtra = resp.Extra
	}
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("engine.writeNop", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		resp.Body, err = args.ReadResult(resp.Body, ret)
		if err != nil {
			return internal.ErrorClientReadResult("engine.writeNop", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

type Handler struct {
	AsyncSleep                   func(ctx context.Context, args AsyncSleep) (bool, error)                                               // engine.asyncSleep
	Count                        func(ctx context.Context, args Count) (Count__Result, error)                                           // engine.count
	DumpForceQueries             func(ctx context.Context, args DumpForceQueries) (DumpForceQueries__Result, error)                     // engine.dumpForceQueries
	DumpLastQueries              func(ctx context.Context, args DumpLastQueries) (DumpLastQueries__Result, error)                       // engine.dumpLastQueries
	DumpNextQueries              func(ctx context.Context, args DumpNextQueries) (DumpNextQueries__Result, error)                       // engine.dumpNextQueries
	EnableMetafilesAnalyzer      func(ctx context.Context, args EnableMetafilesAnalyzer) (bool, error)                                  // engine.enableMetafilesAnalyzer
	FilteredStat                 func(ctx context.Context, args FilteredStat) (FilteredStat__Result, error)                             // engine.filteredStat
	GetBinlogPrefixes            func(ctx context.Context, args GetBinlogPrefixes) (GetBinlogPrefixes__Result, error)                   // engine.getBinlogPrefixes
	GetExpectedMetafilesStats    func(ctx context.Context, args GetExpectedMetafilesStats) (GetExpectedMetafilesStats__Result, error)   // engine.getExpectedMetafilesStats
	GetReadWriteMode             func(ctx context.Context, args GetReadWriteMode) (ReadWriteMode, error)                                // engine.getReadWriteMode
	GetReindexStatus             func(ctx context.Context, args GetReindexStatus) (ReindexStatus, error)                                // engine.getReindexStatus
	InvokeHttpQuery              func(ctx context.Context, args InvokeHttpQuery) (HttpQueryResponse, error)                             // engine.invokeHttpQuery
	IsProduction                 func(ctx context.Context, args IsProduction) (bool, error)                                             // engine.isProduction
	Nop                          func(ctx context.Context, args Nop) (Nop__Result, error)                                               // engine.nop
	Pid                          func(ctx context.Context, args Pid) (Pid__Result, error)                                               // engine.pid
	PushStat                     func(ctx context.Context, args PushStat) (bool, error)                                                 // engine.pushStat
	ReadNop                      func(ctx context.Context, args ReadNop) (ReadNop__Result, error)                                       // engine.readNop
	RecordNextQueries            func(ctx context.Context, args RecordNextQueries) (bool, error)                                        // engine.recordNextQueries
	RegisterDynamicLib           func(ctx context.Context, args RegisterDynamicLib) (RegisterDynamicLib__Result, error)                 // engine.registerDynamicLib
	ReloadDynamicLib             func(ctx context.Context, args ReloadDynamicLib) (ReloadDynamicLib__Result, error)                     // engine.reloadDynamicLib
	ReplaceConfigServer          func(ctx context.Context, args ReplaceConfigServer) (ReplaceConfigServer__Result, error)               // engine.replaceConfigServer
	SendSignal                   func(ctx context.Context, args SendSignal) (SendSignal__Result, error)                                 // engine.sendSignal
	SetFsyncInterval             func(ctx context.Context, args SetFsyncInterval) (SetFsyncInterval__Result, error)                     // engine.setFsyncInterval
	SetMetafileMemory            func(ctx context.Context, args SetMetafileMemory) (SetMetafileMemory__Result, error)                   // engine.setMetafileMemory
	SetNoPersistentConfigArray   func(ctx context.Context, args SetNoPersistentConfigArray) (SetNoPersistentConfigArray__Result, error) // engine.setNoPersistentConfigArray
	SetNoPersistentConfigValue   func(ctx context.Context, args SetNoPersistentConfigValue) (SetNoPersistentConfigValue__Result, error) // engine.setNoPersistentConfigValue
	SetPersistentConfigArray     func(ctx context.Context, args SetPersistentConfigArray) (SetPersistentConfigArray__Result, error)     // engine.setPersistentConfigArray
	SetPersistentConfigValue     func(ctx context.Context, args SetPersistentConfigValue) (SetPersistentConfigValue__Result, error)     // engine.setPersistentConfigValue
	SetVerbosity                 func(ctx context.Context, args SetVerbosity) (SetVerbosity__Result, error)                             // engine.setVerbosity
	SetVerbosityType             func(ctx context.Context, args SetVerbosityType) (SetVerbosityType__Result, error)                     // engine.setVerbosityType
	Sleep                        func(ctx context.Context, args Sleep) (bool, error)                                                    // engine.sleep
	Stat                         func(ctx context.Context, args Stat) (Stat__Result, error)                                             // engine.stat
	SwitchToMasterMode           func(ctx context.Context, args SwitchToMasterMode) (SwitchMasterReplicaModeResult, error)              // engine.switchToMasterMode
	SwitchToMasterModeForcefully func(ctx context.Context, args SwitchToMasterModeForcefully) (SwitchMasterReplicaModeResult, error)    // engine.switchToMasterModeForcefully
	SwitchToReplicaMode          func(ctx context.Context, args SwitchToReplicaMode) (SwitchMasterReplicaModeResult, error)             // engine.switchToReplicaMode
	UnregisterDynamicLib         func(ctx context.Context, args UnregisterDynamicLib) (UnregisterDynamicLib__Result, error)             // engine.unregisterDynamicLib
	Version                      func(ctx context.Context, args Version) (string, error)                                                // engine.version
	WriteNop                     func(ctx context.Context, args WriteNop) (WriteNop__Result, error)                                     // engine.writeNop

}

func (h *Handler) Handle(ctx context.Context, hctx *rpc.HandlerContext) (err error) {
	tag, r, _ := basictl.NatReadTag(hctx.Request) // keep hctx.Request intact for handler chaining
	switch tag {
	case 0x60e50d3d: // engine.asyncSleep
		hctx.SetRequestFunctionName("engine.asyncSleep")
		if h.AsyncSleep != nil {
			var args AsyncSleep
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.asyncSleep", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.AsyncSleep(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.asyncSleep", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.asyncSleep", err)
			}
			return nil
		}
	case 0x19d0f020: // engine.count
		hctx.SetRequestFunctionName("engine.count")
		if h.Count != nil {
			var args Count
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.count", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Count(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.count", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.count", err)
			}
			return nil
		}
	case 0xf1f90880: // engine.dumpForceQueries
		hctx.SetRequestFunctionName("engine.dumpForceQueries")
		if h.DumpForceQueries != nil {
			var args DumpForceQueries
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.dumpForceQueries", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.DumpForceQueries(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.dumpForceQueries", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.dumpForceQueries", err)
			}
			return nil
		}
	case 0xc060a29f: // engine.dumpLastQueries
		hctx.SetRequestFunctionName("engine.dumpLastQueries")
		if h.DumpLastQueries != nil {
			var args DumpLastQueries
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.dumpLastQueries", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.DumpLastQueries(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.dumpLastQueries", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.dumpLastQueries", err)
			}
			return nil
		}
	case 0xe65872ad: // engine.dumpNextQueries
		hctx.SetRequestFunctionName("engine.dumpNextQueries")
		if h.DumpNextQueries != nil {
			var args DumpNextQueries
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.dumpNextQueries", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.DumpNextQueries(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.dumpNextQueries", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.dumpNextQueries", err)
			}
			return nil
		}
	case 0x88836cdc: // engine.enableMetafilesAnalyzer
		hctx.SetRequestFunctionName("engine.enableMetafilesAnalyzer")
		if h.EnableMetafilesAnalyzer != nil {
			var args EnableMetafilesAnalyzer
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.enableMetafilesAnalyzer", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.EnableMetafilesAnalyzer(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.enableMetafilesAnalyzer", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.enableMetafilesAnalyzer", err)
			}
			return nil
		}
	case 0x594870d6: // engine.filteredStat
		hctx.SetRequestFunctionName("engine.filteredStat")
		if h.FilteredStat != nil {
			var args FilteredStat
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.filteredStat", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.FilteredStat(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.filteredStat", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.filteredStat", err)
			}
			return nil
		}
	case 0xef14db93: // engine.getBinlogPrefixes
		hctx.SetRequestFunctionName("engine.getBinlogPrefixes")
		if h.GetBinlogPrefixes != nil {
			var args GetBinlogPrefixes
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.getBinlogPrefixes", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.GetBinlogPrefixes(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.getBinlogPrefixes", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.getBinlogPrefixes", err)
			}
			return nil
		}
	case 0x0342f391: // engine.getExpectedMetafilesStats
		hctx.SetRequestFunctionName("engine.getExpectedMetafilesStats")
		if h.GetExpectedMetafilesStats != nil {
			var args GetExpectedMetafilesStats
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.getExpectedMetafilesStats", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.GetExpectedMetafilesStats(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.getExpectedMetafilesStats", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.getExpectedMetafilesStats", err)
			}
			return nil
		}
	case 0x61b3f593: // engine.getReadWriteMode
		hctx.SetRequestFunctionName("engine.getReadWriteMode")
		if h.GetReadWriteMode != nil {
			var args GetReadWriteMode
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.getReadWriteMode", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.GetReadWriteMode(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.getReadWriteMode", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.getReadWriteMode", err)
			}
			return nil
		}
	case 0xf492042e: // engine.getReindexStatus
		hctx.SetRequestFunctionName("engine.getReindexStatus")
		if h.GetReindexStatus != nil {
			var args GetReindexStatus
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.getReindexStatus", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.GetReindexStatus(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.getReindexStatus", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.getReindexStatus", err)
			}
			return nil
		}
	case 0xf4c73c0b: // engine.invokeHttpQuery
		hctx.SetRequestFunctionName("engine.invokeHttpQuery")
		if h.InvokeHttpQuery != nil {
			var args InvokeHttpQuery
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.invokeHttpQuery", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.InvokeHttpQuery(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.invokeHttpQuery", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.invokeHttpQuery", err)
			}
			return nil
		}
	case 0xccdea0ac: // engine.isProduction
		hctx.SetRequestFunctionName("engine.isProduction")
		if h.IsProduction != nil {
			var args IsProduction
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.isProduction", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.IsProduction(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.isProduction", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.isProduction", err)
			}
			return nil
		}
	case 0x166bb7c6: // engine.nop
		hctx.SetRequestFunctionName("engine.nop")
		if h.Nop != nil {
			var args Nop
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.nop", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Nop(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.nop", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.nop", err)
			}
			return nil
		}
	case 0x559d6e36: // engine.pid
		hctx.SetRequestFunctionName("engine.pid")
		if h.Pid != nil {
			var args Pid
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.pid", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Pid(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.pid", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.pid", err)
			}
			return nil
		}
	case 0xf4b19fa2: // engine.pushStat
		hctx.SetRequestFunctionName("engine.pushStat")
		if h.PushStat != nil {
			var args PushStat
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.pushStat", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.PushStat(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.pushStat", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.pushStat", err)
			}
			return nil
		}
	case 0x9d2b841f: // engine.readNop
		hctx.SetRequestFunctionName("engine.readNop")
		if h.ReadNop != nil {
			var args ReadNop
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.readNop", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.ReadNop(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.readNop", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.readNop", err)
			}
			return nil
		}
	case 0x0001e9d6: // engine.recordNextQueries
		hctx.SetRequestFunctionName("engine.recordNextQueries")
		if h.RecordNextQueries != nil {
			var args RecordNextQueries
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.recordNextQueries", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.RecordNextQueries(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.recordNextQueries", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.recordNextQueries", err)
			}
			return nil
		}
	case 0x2f86f276: // engine.registerDynamicLib
		hctx.SetRequestFunctionName("engine.registerDynamicLib")
		if h.RegisterDynamicLib != nil {
			var args RegisterDynamicLib
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.registerDynamicLib", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.RegisterDynamicLib(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.registerDynamicLib", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.registerDynamicLib", err)
			}
			return nil
		}
	case 0x602d62c1: // engine.reloadDynamicLib
		hctx.SetRequestFunctionName("engine.reloadDynamicLib")
		if h.ReloadDynamicLib != nil {
			var args ReloadDynamicLib
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.reloadDynamicLib", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.ReloadDynamicLib(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.reloadDynamicLib", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.reloadDynamicLib", err)
			}
			return nil
		}
	case 0x5fcd8e77: // engine.replaceConfigServer
		hctx.SetRequestFunctionName("engine.replaceConfigServer")
		if h.ReplaceConfigServer != nil {
			var args ReplaceConfigServer
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.replaceConfigServer", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.ReplaceConfigServer(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.replaceConfigServer", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.replaceConfigServer", err)
			}
			return nil
		}
	case 0x1a7708a3: // engine.sendSignal
		hctx.SetRequestFunctionName("engine.sendSignal")
		if h.SendSignal != nil {
			var args SendSignal
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.sendSignal", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SendSignal(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.sendSignal", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.sendSignal", err)
			}
			return nil
		}
	case 0x665d2ab7: // engine.setFsyncInterval
		hctx.SetRequestFunctionName("engine.setFsyncInterval")
		if h.SetFsyncInterval != nil {
			var args SetFsyncInterval
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.setFsyncInterval", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SetFsyncInterval(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.setFsyncInterval", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.setFsyncInterval", err)
			}
			return nil
		}
	case 0x7bdcf404: // engine.setMetafileMemory
		hctx.SetRequestFunctionName("engine.setMetafileMemory")
		if h.SetMetafileMemory != nil {
			var args SetMetafileMemory
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.setMetafileMemory", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SetMetafileMemory(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.setMetafileMemory", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.setMetafileMemory", err)
			}
			return nil
		}
	case 0x5806a520: // engine.setNoPersistentConfigArray
		hctx.SetRequestFunctionName("engine.setNoPersistentConfigArray")
		if h.SetNoPersistentConfigArray != nil {
			var args SetNoPersistentConfigArray
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.setNoPersistentConfigArray", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SetNoPersistentConfigArray(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.setNoPersistentConfigArray", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.setNoPersistentConfigArray", err)
			}
			return nil
		}
	case 0x92aaa5b9: // engine.setNoPersistentConfigValue
		hctx.SetRequestFunctionName("engine.setNoPersistentConfigValue")
		if h.SetNoPersistentConfigValue != nil {
			var args SetNoPersistentConfigValue
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.setNoPersistentConfigValue", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SetNoPersistentConfigValue(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.setNoPersistentConfigValue", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.setNoPersistentConfigValue", err)
			}
			return nil
		}
	case 0xfc99af0b: // engine.setPersistentConfigArray
		hctx.SetRequestFunctionName("engine.setPersistentConfigArray")
		if h.SetPersistentConfigArray != nil {
			var args SetPersistentConfigArray
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.setPersistentConfigArray", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SetPersistentConfigArray(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.setPersistentConfigArray", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.setPersistentConfigArray", err)
			}
			return nil
		}
	case 0x4cc8953f: // engine.setPersistentConfigValue
		hctx.SetRequestFunctionName("engine.setPersistentConfigValue")
		if h.SetPersistentConfigValue != nil {
			var args SetPersistentConfigValue
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.setPersistentConfigValue", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SetPersistentConfigValue(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.setPersistentConfigValue", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.setPersistentConfigValue", err)
			}
			return nil
		}
	case 0x9d980926: // engine.setVerbosity
		hctx.SetRequestFunctionName("engine.setVerbosity")
		if h.SetVerbosity != nil {
			var args SetVerbosity
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.setVerbosity", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SetVerbosity(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.setVerbosity", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.setVerbosity", err)
			}
			return nil
		}
	case 0x5388c0ae: // engine.setVerbosityType
		hctx.SetRequestFunctionName("engine.setVerbosityType")
		if h.SetVerbosityType != nil {
			var args SetVerbosityType
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.setVerbosityType", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SetVerbosityType(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.setVerbosityType", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.setVerbosityType", err)
			}
			return nil
		}
	case 0x3d3bcd48: // engine.sleep
		hctx.SetRequestFunctionName("engine.sleep")
		if h.Sleep != nil {
			var args Sleep
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.sleep", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Sleep(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.sleep", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.sleep", err)
			}
			return nil
		}
	case 0xefb3c36b: // engine.stat
		hctx.SetRequestFunctionName("engine.stat")
		if h.Stat != nil {
			var args Stat
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.stat", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Stat(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.stat", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.stat", err)
			}
			return nil
		}
	case 0x8cdcb5f9: // engine.switchToMasterMode
		hctx.SetRequestFunctionName("engine.switchToMasterMode")
		if h.SwitchToMasterMode != nil {
			var args SwitchToMasterMode
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.switchToMasterMode", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SwitchToMasterMode(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.switchToMasterMode", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.switchToMasterMode", err)
			}
			return nil
		}
	case 0x1973fa8f: // engine.switchToMasterModeForcefully
		hctx.SetRequestFunctionName("engine.switchToMasterModeForcefully")
		if h.SwitchToMasterModeForcefully != nil {
			var args SwitchToMasterModeForcefully
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.switchToMasterModeForcefully", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SwitchToMasterModeForcefully(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.switchToMasterModeForcefully", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.switchToMasterModeForcefully", err)
			}
			return nil
		}
	case 0x23c3a87e: // engine.switchToReplicaMode
		hctx.SetRequestFunctionName("engine.switchToReplicaMode")
		if h.SwitchToReplicaMode != nil {
			var args SwitchToReplicaMode
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.switchToReplicaMode", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.SwitchToReplicaMode(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.switchToReplicaMode", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.switchToReplicaMode", err)
			}
			return nil
		}
	case 0x84d5fcb9: // engine.unregisterDynamicLib
		hctx.SetRequestFunctionName("engine.unregisterDynamicLib")
		if h.UnregisterDynamicLib != nil {
			var args UnregisterDynamicLib
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.unregisterDynamicLib", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.UnregisterDynamicLib(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.unregisterDynamicLib", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.unregisterDynamicLib", err)
			}
			return nil
		}
	case 0x1a2e06fa: // engine.version
		hctx.SetRequestFunctionName("engine.version")
		if h.Version != nil {
			var args Version
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.version", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Version(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.version", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.version", err)
			}
			return nil
		}
	case 0x58160af4: // engine.writeNop
		hctx.SetRequestFunctionName("engine.writeNop")
		if h.WriteNop != nil {
			var args WriteNop
			_, err = args.Read(r)
			if err != nil {
				return internal.ErrorServerRead("engine.writeNop", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.WriteNop(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("engine.writeNop", err)
			}
			hctx.Response, err = args.WriteResult(hctx.Response, ret)
			if err != nil {
				return internal.ErrorServerWriteResult("engine.writeNop", err)
			}
			return nil
		}
	}
	return rpc.ErrNoHandler
}
