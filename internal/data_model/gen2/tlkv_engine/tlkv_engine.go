// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package tlkv_engine

import (
	"context"

	"github.com/vkcom/statshouse/internal/data_model/gen2/internal"
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
	"github.com/vkcom/statshouse/internal/vkgo/rpc"
)

type (
	Backup         = internal.KvEngineBackup
	BackupResponse = internal.KvEngineBackupResponse
	ChangeResponse = internal.KvEngineChangeResponse
	Check          = internal.KvEngineCheck
	Get            = internal.KvEngineGet
	GetResponse    = internal.KvEngineGetResponse
	Healthcheck    = internal.KvEngineHealthcheck
	Inc            = internal.KvEngineInc
	Kv             = internal.KvEngineKv
	MetaInfo       = internal.KvEngineMetaInfo
	Put            = internal.KvEnginePut
)

type Client struct {
	Client  *rpc.Client
	Network string // should be either "tcp4" or "unix"
	Address string
	ActorID int64 // should be non-zero when using rpc-proxy
}

func (c *Client) Backup(ctx context.Context, args Backup, extra *rpc.InvokeReqExtra, ret *BackupResponse) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "kv_engine.backup"
	if extra != nil {
		req.Extra = *extra
	}
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("kv_engine.backup", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("kv_engine.backup", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		if _, err = args.ReadResult(resp.Body, ret); err != nil {
			return internal.ErrorClientReadResult("kv_engine.backup", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) Check(ctx context.Context, args Check, extra *rpc.InvokeReqExtra, ret *bool) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "kv_engine.check"
	if extra != nil {
		req.Extra = *extra
	}
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("kv_engine.check", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("kv_engine.check", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		if _, err = args.ReadResult(resp.Body, ret); err != nil {
			return internal.ErrorClientReadResult("kv_engine.check", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) Get(ctx context.Context, args Get, extra *rpc.InvokeReqExtra, ret *GetResponse) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.ReadOnly = true
	req.FunctionName = "kv_engine.get"
	if extra != nil {
		req.Extra = *extra
	}
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("kv_engine.get", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("kv_engine.get", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		if _, err = args.ReadResult(resp.Body, ret); err != nil {
			return internal.ErrorClientReadResult("kv_engine.get", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) Healthcheck(ctx context.Context, args Healthcheck, extra *rpc.InvokeReqExtra, ret *bool) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.ReadOnly = true
	req.FunctionName = "kv_engine.healthcheck"
	if extra != nil {
		req.Extra = *extra
	}
	req.Body, err = args.WriteBoxed(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("kv_engine.healthcheck", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("kv_engine.healthcheck", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		if _, err = args.ReadResult(resp.Body, ret); err != nil {
			return internal.ErrorClientReadResult("kv_engine.healthcheck", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) Inc(ctx context.Context, args Inc, extra *rpc.InvokeReqExtra, ret *ChangeResponse) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "kv_engine.inc"
	if extra != nil {
		req.Extra = *extra
	}
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("kv_engine.inc", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("kv_engine.inc", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		if _, err = args.ReadResult(resp.Body, ret); err != nil {
			return internal.ErrorClientReadResult("kv_engine.inc", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

func (c *Client) Put(ctx context.Context, args Put, extra *rpc.InvokeReqExtra, ret *ChangeResponse) (err error) {
	req := c.Client.GetRequest()
	req.ActorID = c.ActorID
	req.FunctionName = "kv_engine.put"
	if extra != nil {
		req.Extra = *extra
	}
	req.Body, err = args.WriteBoxedGeneral(req.Body)
	if err != nil {
		return internal.ErrorClientWrite("kv_engine.put", err)
	}
	resp, err := c.Client.Do(ctx, c.Network, c.Address, req)
	defer c.Client.PutResponse(resp)
	if err != nil {
		return internal.ErrorClientDo("kv_engine.put", c.Network, c.ActorID, c.Address, err)
	}
	if ret != nil {
		if _, err = args.ReadResult(resp.Body, ret); err != nil {
			return internal.ErrorClientReadResult("kv_engine.put", c.Network, c.ActorID, c.Address, err)
		}
	}
	return nil
}

type Handler struct {
	Backup      func(ctx context.Context, args Backup) (BackupResponse, error) // kv_engine.backup
	Check       func(ctx context.Context, args Check) (bool, error)            // kv_engine.check
	Get         func(ctx context.Context, args Get) (GetResponse, error)       // kv_engine.get
	Healthcheck func(ctx context.Context, args Healthcheck) (bool, error)      // kv_engine.healthcheck
	Inc         func(ctx context.Context, args Inc) (ChangeResponse, error)    // kv_engine.inc
	Put         func(ctx context.Context, args Put) (ChangeResponse, error)    // kv_engine.put

	RawBackup      func(ctx context.Context, hctx *rpc.HandlerContext) error // kv_engine.backup
	RawCheck       func(ctx context.Context, hctx *rpc.HandlerContext) error // kv_engine.check
	RawGet         func(ctx context.Context, hctx *rpc.HandlerContext) error // kv_engine.get
	RawHealthcheck func(ctx context.Context, hctx *rpc.HandlerContext) error // kv_engine.healthcheck
	RawInc         func(ctx context.Context, hctx *rpc.HandlerContext) error // kv_engine.inc
	RawPut         func(ctx context.Context, hctx *rpc.HandlerContext) error // kv_engine.put
}

func (h *Handler) Handle(ctx context.Context, hctx *rpc.HandlerContext) (err error) {
	tag, r, _ := basictl.NatReadTag(hctx.Request) // keep hctx.Request intact for handler chaining
	switch tag {
	case 0x3c7231b2: // kv_engine.backup
		hctx.RequestFunctionName = "kv_engine.backup"
		if h.RawBackup != nil {
			hctx.Request = r
			err = h.RawBackup(ctx, hctx)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.backup", err)
			}
			return nil
		}
		if h.Backup != nil {
			var args Backup
			if _, err = args.Read(r); err != nil {
				return internal.ErrorServerRead("kv_engine.backup", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Backup(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.backup", err)
			}
			if hctx.Response, err = args.WriteResult(hctx.Response, ret); err != nil {
				return internal.ErrorServerWriteResult("kv_engine.backup", err)
			}
			return nil
		}
	case 0x2c3239ba: // kv_engine.check
		hctx.RequestFunctionName = "kv_engine.check"
		if h.RawCheck != nil {
			hctx.Request = r
			err = h.RawCheck(ctx, hctx)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.check", err)
			}
			return nil
		}
		if h.Check != nil {
			var args Check
			if _, err = args.Read(r); err != nil {
				return internal.ErrorServerRead("kv_engine.check", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Check(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.check", err)
			}
			if hctx.Response, err = args.WriteResult(hctx.Response, ret); err != nil {
				return internal.ErrorServerWriteResult("kv_engine.check", err)
			}
			return nil
		}
	case 0x1c7349bb: // kv_engine.get
		hctx.RequestFunctionName = "kv_engine.get"
		if h.RawGet != nil {
			hctx.Request = r
			err = h.RawGet(ctx, hctx)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.get", err)
			}
			return nil
		}
		if h.Get != nil {
			var args Get
			if _, err = args.Read(r); err != nil {
				return internal.ErrorServerRead("kv_engine.get", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Get(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.get", err)
			}
			if hctx.Response, err = args.WriteResult(hctx.Response, ret); err != nil {
				return internal.ErrorServerWriteResult("kv_engine.get", err)
			}
			return nil
		}
	case 0x2c1259aa: // kv_engine.healthcheck
		hctx.RequestFunctionName = "kv_engine.healthcheck"
		if h.RawHealthcheck != nil {
			hctx.Request = r
			err = h.RawHealthcheck(ctx, hctx)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.healthcheck", err)
			}
			return nil
		}
		if h.Healthcheck != nil {
			var args Healthcheck
			if _, err = args.Read(r); err != nil {
				return internal.ErrorServerRead("kv_engine.healthcheck", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Healthcheck(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.healthcheck", err)
			}
			if hctx.Response, err = args.WriteResult(hctx.Response, ret); err != nil {
				return internal.ErrorServerWriteResult("kv_engine.healthcheck", err)
			}
			return nil
		}
	case 0x3c7239bb: // kv_engine.inc
		hctx.RequestFunctionName = "kv_engine.inc"
		if h.RawInc != nil {
			hctx.Request = r
			err = h.RawInc(ctx, hctx)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.inc", err)
			}
			return nil
		}
		if h.Inc != nil {
			var args Inc
			if _, err = args.Read(r); err != nil {
				return internal.ErrorServerRead("kv_engine.inc", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Inc(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.inc", err)
			}
			if hctx.Response, err = args.WriteResult(hctx.Response, ret); err != nil {
				return internal.ErrorServerWriteResult("kv_engine.inc", err)
			}
			return nil
		}
	case 0x2c7349ba: // kv_engine.put
		hctx.RequestFunctionName = "kv_engine.put"
		if h.RawPut != nil {
			hctx.Request = r
			err = h.RawPut(ctx, hctx)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.put", err)
			}
			return nil
		}
		if h.Put != nil {
			var args Put
			if _, err = args.Read(r); err != nil {
				return internal.ErrorServerRead("kv_engine.put", err)
			}
			ctx = hctx.WithContext(ctx)
			ret, err := h.Put(ctx, args)
			if rpc.IsHijackedResponse(err) {
				return err
			}
			if err != nil {
				return internal.ErrorServerHandle("kv_engine.put", err)
			}
			if hctx.Response, err = args.WriteResult(hctx.Response, ret); err != nil {
				return internal.ErrorServerWriteResult("kv_engine.put", err)
			}
			return nil
		}
	}
	return rpc.ErrNoHandler
}
