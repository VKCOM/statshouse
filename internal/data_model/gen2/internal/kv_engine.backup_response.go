// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type KvEngineBackupResponse struct {
	Path   string
	Offset int64
}

func (KvEngineBackupResponse) TLName() string { return "kv_engine.backup_response" }
func (KvEngineBackupResponse) TLTag() uint32  { return 0x732a1764 }

func (item *KvEngineBackupResponse) Reset() {
	item.Path = ""
	item.Offset = 0
}

func (item *KvEngineBackupResponse) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.Path); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.Offset)
}

func (item *KvEngineBackupResponse) Write(w []byte) (_ []byte, err error) {
	w = basictl.StringWrite(w, item.Path)
	return basictl.LongWrite(w, item.Offset), nil
}

func (item *KvEngineBackupResponse) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x732a1764); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *KvEngineBackupResponse) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x732a1764)
	return item.Write(w)
}

func (item KvEngineBackupResponse) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func KvEngineBackupResponse__ReadJSON(item *KvEngineBackupResponse, j interface{}) error {
	return item.readJSON(j)
}
func (item *KvEngineBackupResponse) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("kv_engine.backup_response", "expected json object")
	}
	_jPath := _jm["path"]
	delete(_jm, "path")
	if err := JsonReadString(_jPath, &item.Path); err != nil {
		return err
	}
	_jOffset := _jm["offset"]
	delete(_jm, "offset")
	if err := JsonReadInt64(_jOffset, &item.Offset); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("kv_engine.backup_response", k)
	}
	return nil
}

func (item *KvEngineBackupResponse) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *KvEngineBackupResponse) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.Path) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"path":`...)
		w = basictl.JSONWriteString(w, item.Path)
	}
	if item.Offset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"offset":`...)
		w = basictl.JSONWriteInt64(w, item.Offset)
	}
	return append(w, '}'), nil
}

func (item *KvEngineBackupResponse) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *KvEngineBackupResponse) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("kv_engine.backup_response", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("kv_engine.backup_response", err.Error())
	}
	return nil
}
