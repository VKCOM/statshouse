// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

var _ = True{}

type StatshouseGetTagMapping struct {
	FieldsMask        uint32
	ShardReplica      int32 // Conditional: item.FieldsMask.5
	ShardReplicaTotal int32 // Conditional: item.FieldsMask.5
	// IngressProxy True // Conditional: item.FieldsMask.6
	Metric string
	Key    string
	// Create True // Conditional: item.FieldsMask.0
	TagIdKey  int32  // Conditional: item.FieldsMask.2
	ClientEnv int32  // Conditional: item.FieldsMask.2
	HostName  string // Conditional: item.FieldsMask.2
	SourceEnv int32  // Conditional: item.FieldsMask.2
	BuildArch int32  // Conditional: item.FieldsMask.3
	// CanonicalMetricName True // Conditional: item.FieldsMask.1
}

func (StatshouseGetTagMapping) TLName() string { return "statshouse.getTagMapping" }
func (StatshouseGetTagMapping) TLTag() uint32  { return 0x3285ff56 }

func (item *StatshouseGetTagMapping) SetShardReplica(v int32) {
	item.ShardReplica = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseGetTagMapping) ClearShardReplica() {
	item.ShardReplica = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseGetTagMapping) IsSetShardReplica() bool { return item.FieldsMask&(1<<5) != 0 }

func (item *StatshouseGetTagMapping) SetShardReplicaTotal(v int32) {
	item.ShardReplicaTotal = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseGetTagMapping) ClearShardReplicaTotal() {
	item.ShardReplicaTotal = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseGetTagMapping) IsSetShardReplicaTotal() bool {
	return item.FieldsMask&(1<<5) != 0
}

func (item *StatshouseGetTagMapping) SetIngressProxy(v bool) {
	if v {
		item.FieldsMask |= 1 << 6
	} else {
		item.FieldsMask &^= 1 << 6
	}
}
func (item *StatshouseGetTagMapping) IsSetIngressProxy() bool { return item.FieldsMask&(1<<6) != 0 }

func (item *StatshouseGetTagMapping) SetCreate(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item *StatshouseGetTagMapping) IsSetCreate() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTagMapping) SetTagIdKey(v int32) {
	item.TagIdKey = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseGetTagMapping) ClearTagIdKey() {
	item.TagIdKey = 0
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseGetTagMapping) IsSetTagIdKey() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseGetTagMapping) SetClientEnv(v int32) {
	item.ClientEnv = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseGetTagMapping) ClearClientEnv() {
	item.ClientEnv = 0
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseGetTagMapping) IsSetClientEnv() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseGetTagMapping) SetHostName(v string) {
	item.HostName = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseGetTagMapping) ClearHostName() {
	item.HostName = ""
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseGetTagMapping) IsSetHostName() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseGetTagMapping) SetSourceEnv(v int32) {
	item.SourceEnv = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseGetTagMapping) ClearSourceEnv() {
	item.SourceEnv = 0
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseGetTagMapping) IsSetSourceEnv() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseGetTagMapping) SetBuildArch(v int32) {
	item.BuildArch = v
	item.FieldsMask |= 1 << 3
}
func (item *StatshouseGetTagMapping) ClearBuildArch() {
	item.BuildArch = 0
	item.FieldsMask &^= 1 << 3
}
func (item *StatshouseGetTagMapping) IsSetBuildArch() bool { return item.FieldsMask&(1<<3) != 0 }

func (item *StatshouseGetTagMapping) SetCanonicalMetricName(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item *StatshouseGetTagMapping) IsSetCanonicalMetricName() bool {
	return item.FieldsMask&(1<<1) != 0
}

func (item *StatshouseGetTagMapping) Reset() {
	item.FieldsMask = 0
	item.ShardReplica = 0
	item.ShardReplicaTotal = 0
	item.Metric = ""
	item.Key = ""
	item.TagIdKey = 0
	item.ClientEnv = 0
	item.HostName = ""
	item.SourceEnv = 0
	item.BuildArch = 0
}

func (item *StatshouseGetTagMapping) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplica); err != nil {
			return w, err
		}
	} else {
		item.ShardReplica = 0
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplicaTotal); err != nil {
			return w, err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if w, err = basictl.StringRead(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Key); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.TagIdKey); err != nil {
			return w, err
		}
	} else {
		item.TagIdKey = 0
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.ClientEnv); err != nil {
			return w, err
		}
	} else {
		item.ClientEnv = 0
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.StringRead(w, &item.HostName); err != nil {
			return w, err
		}
	} else {
		item.HostName = ""
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.SourceEnv); err != nil {
			return w, err
		}
	} else {
		item.SourceEnv = 0
	}
	if item.FieldsMask&(1<<3) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildArch); err != nil {
			return w, err
		}
	} else {
		item.BuildArch = 0
	}
	return w, nil
}

func (item *StatshouseGetTagMapping) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplica)
	}
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplicaTotal)
	}
	if w, err = basictl.StringWrite(w, item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringWrite(w, item.Key); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.TagIdKey)
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.ClientEnv)
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.StringWrite(w, item.HostName); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.SourceEnv)
	}
	if item.FieldsMask&(1<<3) != 0 {
		w = basictl.IntWrite(w, item.BuildArch)
	}
	return w, nil
}

func (item *StatshouseGetTagMapping) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3285ff56); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTagMapping) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x3285ff56)
	return item.Write(w)
}

func (item *StatshouseGetTagMapping) ReadResult(w []byte, ret *StatshouseGetTagMappingResult) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseGetTagMapping) WriteResult(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *StatshouseGetTagMapping) ReadResultJSON(j interface{}, ret *StatshouseGetTagMappingResult) error {
	if err := StatshouseGetTagMappingResult__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTagMapping) WriteResultJSON(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseGetTagMapping) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTagMappingResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTagMapping) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.getTagMapping", err.Error())
	}
	var ret StatshouseGetTagMappingResult
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTagMapping) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetTagMapping__ReadJSON(item *StatshouseGetTagMapping, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetTagMapping) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getTagMapping", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jShardReplica := _jm["shard_replica"]
	delete(_jm, "shard_replica")
	_jShardReplicaTotal := _jm["shard_replica_total"]
	delete(_jm, "shard_replica_total")
	_jIngressProxy := _jm["ingress_proxy"]
	delete(_jm, "ingress_proxy")
	_jMetric := _jm["metric"]
	delete(_jm, "metric")
	if err := JsonReadString(_jMetric, &item.Metric); err != nil {
		return err
	}
	_jKey := _jm["key"]
	delete(_jm, "key")
	if err := JsonReadString(_jKey, &item.Key); err != nil {
		return err
	}
	_jCreate := _jm["create"]
	delete(_jm, "create")
	_jTagIdKey := _jm["tag_id_key"]
	delete(_jm, "tag_id_key")
	_jClientEnv := _jm["client_env"]
	delete(_jm, "client_env")
	_jHostName := _jm["host_name"]
	delete(_jm, "host_name")
	_jSourceEnv := _jm["source_env"]
	delete(_jm, "source_env")
	_jBuildArch := _jm["build_arch"]
	delete(_jm, "build_arch")
	_jCanonicalMetricName := _jm["canonical_metric_name"]
	delete(_jm, "canonical_metric_name")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getTagMapping", k)
	}
	if _jShardReplica != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jShardReplicaTotal != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jIngressProxy != nil {
		_bit := false
		if err := JsonReadBool(_jIngressProxy, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 6
		} else {
			item.FieldsMask &^= 1 << 6
		}
	}
	if _jCreate != nil {
		_bit := false
		if err := JsonReadBool(_jCreate, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if _jTagIdKey != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jClientEnv != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jHostName != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jSourceEnv != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jBuildArch != nil {
		item.FieldsMask |= 1 << 3
	}
	if _jCanonicalMetricName != nil {
		_bit := false
		if err := JsonReadBool(_jCanonicalMetricName, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 1
		} else {
			item.FieldsMask &^= 1 << 1
		}
	}
	if _jShardReplica != nil {
		if err := JsonReadInt32(_jShardReplica, &item.ShardReplica); err != nil {
			return err
		}
	} else {
		item.ShardReplica = 0
	}
	if _jShardReplicaTotal != nil {
		if err := JsonReadInt32(_jShardReplicaTotal, &item.ShardReplicaTotal); err != nil {
			return err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if _jTagIdKey != nil {
		if err := JsonReadInt32(_jTagIdKey, &item.TagIdKey); err != nil {
			return err
		}
	} else {
		item.TagIdKey = 0
	}
	if _jClientEnv != nil {
		if err := JsonReadInt32(_jClientEnv, &item.ClientEnv); err != nil {
			return err
		}
	} else {
		item.ClientEnv = 0
	}
	if _jHostName != nil {
		if err := JsonReadString(_jHostName, &item.HostName); err != nil {
			return err
		}
	} else {
		item.HostName = ""
	}
	if _jSourceEnv != nil {
		if err := JsonReadInt32(_jSourceEnv, &item.SourceEnv); err != nil {
			return err
		}
	} else {
		item.SourceEnv = 0
	}
	if _jBuildArch != nil {
		if err := JsonReadInt32(_jBuildArch, &item.BuildArch); err != nil {
			return err
		}
	} else {
		item.BuildArch = 0
	}
	return nil
}

func (item *StatshouseGetTagMapping) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplica != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplica)
		}
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplicaTotal != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica_total":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplicaTotal)
		}
	}
	if item.FieldsMask&(1<<6) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ingress_proxy":true`...)
	}
	if len(item.Metric) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric":`...)
		w = basictl.JSONWriteString(w, item.Metric)
	}
	if len(item.Key) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"key":`...)
		w = basictl.JSONWriteString(w, item.Key)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"create":true`...)
	}
	if item.FieldsMask&(1<<2) != 0 {
		if item.TagIdKey != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"tag_id_key":`...)
			w = basictl.JSONWriteInt32(w, item.TagIdKey)
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if item.ClientEnv != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"client_env":`...)
			w = basictl.JSONWriteInt32(w, item.ClientEnv)
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if len(item.HostName) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"host_name":`...)
			w = basictl.JSONWriteString(w, item.HostName)
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if item.SourceEnv != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"source_env":`...)
			w = basictl.JSONWriteInt32(w, item.SourceEnv)
		}
	}
	if item.FieldsMask&(1<<3) != 0 {
		if item.BuildArch != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_arch":`...)
			w = basictl.JSONWriteInt32(w, item.BuildArch)
		}
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"canonical_metric_name":true`...)
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTagMapping) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTagMapping) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getTagMapping", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMapping", err.Error())
	}
	return nil
}

var _ = True{}

type StatshouseGetTagMappingBytes struct {
	FieldsMask        uint32
	ShardReplica      int32 // Conditional: item.FieldsMask.5
	ShardReplicaTotal int32 // Conditional: item.FieldsMask.5
	// IngressProxy True // Conditional: item.FieldsMask.6
	Metric []byte
	Key    []byte
	// Create True // Conditional: item.FieldsMask.0
	TagIdKey  int32  // Conditional: item.FieldsMask.2
	ClientEnv int32  // Conditional: item.FieldsMask.2
	HostName  []byte // Conditional: item.FieldsMask.2
	SourceEnv int32  // Conditional: item.FieldsMask.2
	BuildArch int32  // Conditional: item.FieldsMask.3
	// CanonicalMetricName True // Conditional: item.FieldsMask.1
}

func (StatshouseGetTagMappingBytes) TLName() string { return "statshouse.getTagMapping" }
func (StatshouseGetTagMappingBytes) TLTag() uint32  { return 0x3285ff56 }

func (item *StatshouseGetTagMappingBytes) SetShardReplica(v int32) {
	item.ShardReplica = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseGetTagMappingBytes) ClearShardReplica() {
	item.ShardReplica = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseGetTagMappingBytes) IsSetShardReplica() bool {
	return item.FieldsMask&(1<<5) != 0
}

func (item *StatshouseGetTagMappingBytes) SetShardReplicaTotal(v int32) {
	item.ShardReplicaTotal = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseGetTagMappingBytes) ClearShardReplicaTotal() {
	item.ShardReplicaTotal = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseGetTagMappingBytes) IsSetShardReplicaTotal() bool {
	return item.FieldsMask&(1<<5) != 0
}

func (item *StatshouseGetTagMappingBytes) SetIngressProxy(v bool) {
	if v {
		item.FieldsMask |= 1 << 6
	} else {
		item.FieldsMask &^= 1 << 6
	}
}
func (item *StatshouseGetTagMappingBytes) IsSetIngressProxy() bool {
	return item.FieldsMask&(1<<6) != 0
}

func (item *StatshouseGetTagMappingBytes) SetCreate(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item *StatshouseGetTagMappingBytes) IsSetCreate() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTagMappingBytes) SetTagIdKey(v int32) {
	item.TagIdKey = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseGetTagMappingBytes) ClearTagIdKey() {
	item.TagIdKey = 0
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseGetTagMappingBytes) IsSetTagIdKey() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseGetTagMappingBytes) SetClientEnv(v int32) {
	item.ClientEnv = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseGetTagMappingBytes) ClearClientEnv() {
	item.ClientEnv = 0
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseGetTagMappingBytes) IsSetClientEnv() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseGetTagMappingBytes) SetHostName(v []byte) {
	item.HostName = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseGetTagMappingBytes) ClearHostName() {
	item.HostName = item.HostName[:0]
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseGetTagMappingBytes) IsSetHostName() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseGetTagMappingBytes) SetSourceEnv(v int32) {
	item.SourceEnv = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseGetTagMappingBytes) ClearSourceEnv() {
	item.SourceEnv = 0
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseGetTagMappingBytes) IsSetSourceEnv() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseGetTagMappingBytes) SetBuildArch(v int32) {
	item.BuildArch = v
	item.FieldsMask |= 1 << 3
}
func (item *StatshouseGetTagMappingBytes) ClearBuildArch() {
	item.BuildArch = 0
	item.FieldsMask &^= 1 << 3
}
func (item *StatshouseGetTagMappingBytes) IsSetBuildArch() bool { return item.FieldsMask&(1<<3) != 0 }

func (item *StatshouseGetTagMappingBytes) SetCanonicalMetricName(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item *StatshouseGetTagMappingBytes) IsSetCanonicalMetricName() bool {
	return item.FieldsMask&(1<<1) != 0
}

func (item *StatshouseGetTagMappingBytes) Reset() {
	item.FieldsMask = 0
	item.ShardReplica = 0
	item.ShardReplicaTotal = 0
	item.Metric = item.Metric[:0]
	item.Key = item.Key[:0]
	item.TagIdKey = 0
	item.ClientEnv = 0
	item.HostName = item.HostName[:0]
	item.SourceEnv = 0
	item.BuildArch = 0
}

func (item *StatshouseGetTagMappingBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplica); err != nil {
			return w, err
		}
	} else {
		item.ShardReplica = 0
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplicaTotal); err != nil {
			return w, err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if w, err = basictl.StringReadBytes(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Key); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.TagIdKey); err != nil {
			return w, err
		}
	} else {
		item.TagIdKey = 0
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.ClientEnv); err != nil {
			return w, err
		}
	} else {
		item.ClientEnv = 0
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.StringReadBytes(w, &item.HostName); err != nil {
			return w, err
		}
	} else {
		item.HostName = item.HostName[:0]
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.SourceEnv); err != nil {
			return w, err
		}
	} else {
		item.SourceEnv = 0
	}
	if item.FieldsMask&(1<<3) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildArch); err != nil {
			return w, err
		}
	} else {
		item.BuildArch = 0
	}
	return w, nil
}

func (item *StatshouseGetTagMappingBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplica)
	}
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplicaTotal)
	}
	if w, err = basictl.StringWriteBytes(w, item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringWriteBytes(w, item.Key); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.TagIdKey)
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.ClientEnv)
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.StringWriteBytes(w, item.HostName); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.SourceEnv)
	}
	if item.FieldsMask&(1<<3) != 0 {
		w = basictl.IntWrite(w, item.BuildArch)
	}
	return w, nil
}

func (item *StatshouseGetTagMappingBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3285ff56); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTagMappingBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x3285ff56)
	return item.Write(w)
}

func (item *StatshouseGetTagMappingBytes) ReadResult(w []byte, ret *StatshouseGetTagMappingResult) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseGetTagMappingBytes) WriteResult(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *StatshouseGetTagMappingBytes) ReadResultJSON(j interface{}, ret *StatshouseGetTagMappingResult) error {
	if err := StatshouseGetTagMappingResult__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTagMappingBytes) WriteResultJSON(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseGetTagMappingBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTagMappingResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTagMappingBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.getTagMapping", err.Error())
	}
	var ret StatshouseGetTagMappingResult
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTagMappingBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetTagMappingBytes__ReadJSON(item *StatshouseGetTagMappingBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetTagMappingBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getTagMapping", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jShardReplica := _jm["shard_replica"]
	delete(_jm, "shard_replica")
	_jShardReplicaTotal := _jm["shard_replica_total"]
	delete(_jm, "shard_replica_total")
	_jIngressProxy := _jm["ingress_proxy"]
	delete(_jm, "ingress_proxy")
	_jMetric := _jm["metric"]
	delete(_jm, "metric")
	if err := JsonReadStringBytes(_jMetric, &item.Metric); err != nil {
		return err
	}
	_jKey := _jm["key"]
	delete(_jm, "key")
	if err := JsonReadStringBytes(_jKey, &item.Key); err != nil {
		return err
	}
	_jCreate := _jm["create"]
	delete(_jm, "create")
	_jTagIdKey := _jm["tag_id_key"]
	delete(_jm, "tag_id_key")
	_jClientEnv := _jm["client_env"]
	delete(_jm, "client_env")
	_jHostName := _jm["host_name"]
	delete(_jm, "host_name")
	_jSourceEnv := _jm["source_env"]
	delete(_jm, "source_env")
	_jBuildArch := _jm["build_arch"]
	delete(_jm, "build_arch")
	_jCanonicalMetricName := _jm["canonical_metric_name"]
	delete(_jm, "canonical_metric_name")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getTagMapping", k)
	}
	if _jShardReplica != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jShardReplicaTotal != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jIngressProxy != nil {
		_bit := false
		if err := JsonReadBool(_jIngressProxy, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 6
		} else {
			item.FieldsMask &^= 1 << 6
		}
	}
	if _jCreate != nil {
		_bit := false
		if err := JsonReadBool(_jCreate, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if _jTagIdKey != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jClientEnv != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jHostName != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jSourceEnv != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jBuildArch != nil {
		item.FieldsMask |= 1 << 3
	}
	if _jCanonicalMetricName != nil {
		_bit := false
		if err := JsonReadBool(_jCanonicalMetricName, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 1
		} else {
			item.FieldsMask &^= 1 << 1
		}
	}
	if _jShardReplica != nil {
		if err := JsonReadInt32(_jShardReplica, &item.ShardReplica); err != nil {
			return err
		}
	} else {
		item.ShardReplica = 0
	}
	if _jShardReplicaTotal != nil {
		if err := JsonReadInt32(_jShardReplicaTotal, &item.ShardReplicaTotal); err != nil {
			return err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if _jTagIdKey != nil {
		if err := JsonReadInt32(_jTagIdKey, &item.TagIdKey); err != nil {
			return err
		}
	} else {
		item.TagIdKey = 0
	}
	if _jClientEnv != nil {
		if err := JsonReadInt32(_jClientEnv, &item.ClientEnv); err != nil {
			return err
		}
	} else {
		item.ClientEnv = 0
	}
	if _jHostName != nil {
		if err := JsonReadStringBytes(_jHostName, &item.HostName); err != nil {
			return err
		}
	} else {
		item.HostName = item.HostName[:0]
	}
	if _jSourceEnv != nil {
		if err := JsonReadInt32(_jSourceEnv, &item.SourceEnv); err != nil {
			return err
		}
	} else {
		item.SourceEnv = 0
	}
	if _jBuildArch != nil {
		if err := JsonReadInt32(_jBuildArch, &item.BuildArch); err != nil {
			return err
		}
	} else {
		item.BuildArch = 0
	}
	return nil
}

func (item *StatshouseGetTagMappingBytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplica != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplica)
		}
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplicaTotal != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica_total":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplicaTotal)
		}
	}
	if item.FieldsMask&(1<<6) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ingress_proxy":true`...)
	}
	if len(item.Metric) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric":`...)
		w = basictl.JSONWriteStringBytes(w, item.Metric)
	}
	if len(item.Key) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"key":`...)
		w = basictl.JSONWriteStringBytes(w, item.Key)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"create":true`...)
	}
	if item.FieldsMask&(1<<2) != 0 {
		if item.TagIdKey != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"tag_id_key":`...)
			w = basictl.JSONWriteInt32(w, item.TagIdKey)
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if item.ClientEnv != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"client_env":`...)
			w = basictl.JSONWriteInt32(w, item.ClientEnv)
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if len(item.HostName) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"host_name":`...)
			w = basictl.JSONWriteStringBytes(w, item.HostName)
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if item.SourceEnv != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"source_env":`...)
			w = basictl.JSONWriteInt32(w, item.SourceEnv)
		}
	}
	if item.FieldsMask&(1<<3) != 0 {
		if item.BuildArch != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_arch":`...)
			w = basictl.JSONWriteInt32(w, item.BuildArch)
		}
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"canonical_metric_name":true`...)
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTagMappingBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTagMappingBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getTagMapping", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMapping", err.Error())
	}
	return nil
}
