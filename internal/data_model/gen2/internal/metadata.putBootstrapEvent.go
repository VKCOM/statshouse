// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataPutBootstrapEvent struct {
	FieldsMask uint32
	Mappings   []StatshouseMapping
}

func (MetadataPutBootstrapEvent) TLName() string { return "metadata.putBootstrapEvent" }
func (MetadataPutBootstrapEvent) TLTag() uint32  { return 0x5854dfaf }

func (item *MetadataPutBootstrapEvent) Reset() {
	item.FieldsMask = 0
	item.Mappings = item.Mappings[:0]
}

func (item *MetadataPutBootstrapEvent) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	return BuiltinVectorStatshouseMappingRead(w, &item.Mappings)
}

// This method is general version of Write, use it instead!
func (item *MetadataPutBootstrapEvent) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MetadataPutBootstrapEvent) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = BuiltinVectorStatshouseMappingWrite(w, item.Mappings)
	return w
}

func (item *MetadataPutBootstrapEvent) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5854dfaf); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MetadataPutBootstrapEvent) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MetadataPutBootstrapEvent) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x5854dfaf)
	return item.Write(w)
}

func (item MetadataPutBootstrapEvent) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MetadataPutBootstrapEvent) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propMappingsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.putBootstrapEvent", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "mappings":
				if propMappingsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.putBootstrapEvent", "mappings")
				}
				if err := BuiltinVectorStatshouseMappingReadJSON(legacyTypeNames, in, &item.Mappings); err != nil {
					return err
				}
				propMappingsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("metadata.putBootstrapEvent", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propMappingsPresented {
		item.Mappings = item.Mappings[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataPutBootstrapEvent) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *MetadataPutBootstrapEvent) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *MetadataPutBootstrapEvent) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexMappings := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"mappings":`...)
	w = BuiltinVectorStatshouseMappingWriteJSONOpt(newTypeNames, short, w, item.Mappings)
	if (len(item.Mappings) != 0) == false {
		w = w[:backupIndexMappings]
	}
	return append(w, '}')
}

func (item *MetadataPutBootstrapEvent) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MetadataPutBootstrapEvent) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("metadata.putBootstrapEvent", err.Error())
	}
	return nil
}
