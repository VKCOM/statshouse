// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataPutBootstrapEvent struct {
	FieldsMask uint32
	Mappings   []StatshouseMapping
}

func (MetadataPutBootstrapEvent) TLName() string { return "metadata.putBootstrapEvent" }
func (MetadataPutBootstrapEvent) TLTag() uint32  { return 0x5854dfaf }

func (item *MetadataPutBootstrapEvent) Reset() {
	item.FieldsMask = 0
	item.Mappings = item.Mappings[:0]
}

func (item *MetadataPutBootstrapEvent) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	return VectorStatshouseMapping0Read(w, &item.Mappings)
}

func (item *MetadataPutBootstrapEvent) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	return VectorStatshouseMapping0Write(w, item.Mappings)
}

func (item *MetadataPutBootstrapEvent) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5854dfaf); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MetadataPutBootstrapEvent) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x5854dfaf)
	return item.Write(w)
}

func (item MetadataPutBootstrapEvent) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func MetadataPutBootstrapEvent__ReadJSON(item *MetadataPutBootstrapEvent, j interface{}) error {
	return item.readJSON(j)
}
func (item *MetadataPutBootstrapEvent) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("metadata.putBootstrapEvent", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jMappings := _jm["mappings"]
	delete(_jm, "mappings")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.putBootstrapEvent", k)
	}
	if err := VectorStatshouseMapping0ReadJSON(_jMappings, &item.Mappings); err != nil {
		return err
	}
	return nil
}

func (item *MetadataPutBootstrapEvent) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.Mappings) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"mappings":`...)
		if w, err = VectorStatshouseMapping0WriteJSON(w, item.Mappings); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *MetadataPutBootstrapEvent) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *MetadataPutBootstrapEvent) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("metadata.putBootstrapEvent", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("metadata.putBootstrapEvent", err.Error())
	}
	return nil
}
