// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

var _ = True{}

type StatshouseSendSourceBucket struct {
	FieldsMask        uint32
	ShardReplica      int32 // Conditional: item.FieldsMask.5
	ShardReplicaTotal int32 // Conditional: item.FieldsMask.5
	// IngressProxy True // Conditional: item.FieldsMask.6
	HostName       string
	SourceEnv      int32 // Conditional: item.FieldsMask.9
	BuildArch      int32 // Conditional: item.FieldsMask.9
	LegacySourceIp string
	Time           uint32
	// Historic True // Conditional: item.FieldsMask.0
	// Spare True // Conditional: item.FieldsMask.1
	ShardReplicaLegacy      int32  // Conditional: item.FieldsMask.2
	ShardReplicaLegacyTotal int32  // Conditional: item.FieldsMask.2
	BuildCommit             string // Conditional: item.FieldsMask.3
	BuildCommitDate         int32  // Conditional: item.FieldsMask.7
	BuildCommitTs           int32  // Conditional: item.FieldsMask.8
	QueueSizeDisk           int32  // Conditional: item.FieldsMask.4
	QueueSizeMemory         int32  // Conditional: item.FieldsMask.4
	OriginalSize            int32
	CompressedData          string
}

func (StatshouseSendSourceBucket) TLName() string { return "statshouse.sendSourceBucket" }
func (StatshouseSendSourceBucket) TLTag() uint32  { return 0x94575940 }

func (item *StatshouseSendSourceBucket) SetShardReplica(v int32) {
	item.ShardReplica = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseSendSourceBucket) ClearShardReplica() {
	item.ShardReplica = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseSendSourceBucket) IsSetShardReplica() bool { return item.FieldsMask&(1<<5) != 0 }

func (item *StatshouseSendSourceBucket) SetShardReplicaTotal(v int32) {
	item.ShardReplicaTotal = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseSendSourceBucket) ClearShardReplicaTotal() {
	item.ShardReplicaTotal = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseSendSourceBucket) IsSetShardReplicaTotal() bool {
	return item.FieldsMask&(1<<5) != 0
}

func (item *StatshouseSendSourceBucket) SetIngressProxy(v bool) {
	if v {
		item.FieldsMask |= 1 << 6
	} else {
		item.FieldsMask &^= 1 << 6
	}
}
func (item *StatshouseSendSourceBucket) IsSetIngressProxy() bool { return item.FieldsMask&(1<<6) != 0 }

func (item *StatshouseSendSourceBucket) SetSourceEnv(v int32) {
	item.SourceEnv = v
	item.FieldsMask |= 1 << 9
}
func (item *StatshouseSendSourceBucket) ClearSourceEnv() {
	item.SourceEnv = 0
	item.FieldsMask &^= 1 << 9
}
func (item *StatshouseSendSourceBucket) IsSetSourceEnv() bool { return item.FieldsMask&(1<<9) != 0 }

func (item *StatshouseSendSourceBucket) SetBuildArch(v int32) {
	item.BuildArch = v
	item.FieldsMask |= 1 << 9
}
func (item *StatshouseSendSourceBucket) ClearBuildArch() {
	item.BuildArch = 0
	item.FieldsMask &^= 1 << 9
}
func (item *StatshouseSendSourceBucket) IsSetBuildArch() bool { return item.FieldsMask&(1<<9) != 0 }

func (item *StatshouseSendSourceBucket) SetHistoric(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item *StatshouseSendSourceBucket) IsSetHistoric() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseSendSourceBucket) SetSpare(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item *StatshouseSendSourceBucket) IsSetSpare() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseSendSourceBucket) SetShardReplicaLegacy(v int32) {
	item.ShardReplicaLegacy = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseSendSourceBucket) ClearShardReplicaLegacy() {
	item.ShardReplicaLegacy = 0
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseSendSourceBucket) IsSetShardReplicaLegacy() bool {
	return item.FieldsMask&(1<<2) != 0
}

func (item *StatshouseSendSourceBucket) SetShardReplicaLegacyTotal(v int32) {
	item.ShardReplicaLegacyTotal = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseSendSourceBucket) ClearShardReplicaLegacyTotal() {
	item.ShardReplicaLegacyTotal = 0
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseSendSourceBucket) IsSetShardReplicaLegacyTotal() bool {
	return item.FieldsMask&(1<<2) != 0
}

func (item *StatshouseSendSourceBucket) SetBuildCommit(v string) {
	item.BuildCommit = v
	item.FieldsMask |= 1 << 3
}
func (item *StatshouseSendSourceBucket) ClearBuildCommit() {
	item.BuildCommit = ""
	item.FieldsMask &^= 1 << 3
}
func (item *StatshouseSendSourceBucket) IsSetBuildCommit() bool { return item.FieldsMask&(1<<3) != 0 }

func (item *StatshouseSendSourceBucket) SetBuildCommitDate(v int32) {
	item.BuildCommitDate = v
	item.FieldsMask |= 1 << 7
}
func (item *StatshouseSendSourceBucket) ClearBuildCommitDate() {
	item.BuildCommitDate = 0
	item.FieldsMask &^= 1 << 7
}
func (item *StatshouseSendSourceBucket) IsSetBuildCommitDate() bool {
	return item.FieldsMask&(1<<7) != 0
}

func (item *StatshouseSendSourceBucket) SetBuildCommitTs(v int32) {
	item.BuildCommitTs = v
	item.FieldsMask |= 1 << 8
}
func (item *StatshouseSendSourceBucket) ClearBuildCommitTs() {
	item.BuildCommitTs = 0
	item.FieldsMask &^= 1 << 8
}
func (item *StatshouseSendSourceBucket) IsSetBuildCommitTs() bool { return item.FieldsMask&(1<<8) != 0 }

func (item *StatshouseSendSourceBucket) SetQueueSizeDisk(v int32) {
	item.QueueSizeDisk = v
	item.FieldsMask |= 1 << 4
}
func (item *StatshouseSendSourceBucket) ClearQueueSizeDisk() {
	item.QueueSizeDisk = 0
	item.FieldsMask &^= 1 << 4
}
func (item *StatshouseSendSourceBucket) IsSetQueueSizeDisk() bool { return item.FieldsMask&(1<<4) != 0 }

func (item *StatshouseSendSourceBucket) SetQueueSizeMemory(v int32) {
	item.QueueSizeMemory = v
	item.FieldsMask |= 1 << 4
}
func (item *StatshouseSendSourceBucket) ClearQueueSizeMemory() {
	item.QueueSizeMemory = 0
	item.FieldsMask &^= 1 << 4
}
func (item *StatshouseSendSourceBucket) IsSetQueueSizeMemory() bool {
	return item.FieldsMask&(1<<4) != 0
}

func (item *StatshouseSendSourceBucket) Reset() {
	item.FieldsMask = 0
	item.ShardReplica = 0
	item.ShardReplicaTotal = 0
	item.HostName = ""
	item.SourceEnv = 0
	item.BuildArch = 0
	item.LegacySourceIp = ""
	item.Time = 0
	item.ShardReplicaLegacy = 0
	item.ShardReplicaLegacyTotal = 0
	item.BuildCommit = ""
	item.BuildCommitDate = 0
	item.BuildCommitTs = 0
	item.QueueSizeDisk = 0
	item.QueueSizeMemory = 0
	item.OriginalSize = 0
	item.CompressedData = ""
}

func (item *StatshouseSendSourceBucket) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplica); err != nil {
			return w, err
		}
	} else {
		item.ShardReplica = 0
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplicaTotal); err != nil {
			return w, err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if w, err = basictl.StringRead(w, &item.HostName); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<9) != 0 {
		if w, err = basictl.IntRead(w, &item.SourceEnv); err != nil {
			return w, err
		}
	} else {
		item.SourceEnv = 0
	}
	if item.FieldsMask&(1<<9) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildArch); err != nil {
			return w, err
		}
	} else {
		item.BuildArch = 0
	}
	if w, err = basictl.StringRead(w, &item.LegacySourceIp); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.Time); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplicaLegacy); err != nil {
			return w, err
		}
	} else {
		item.ShardReplicaLegacy = 0
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplicaLegacyTotal); err != nil {
			return w, err
		}
	} else {
		item.ShardReplicaLegacyTotal = 0
	}
	if item.FieldsMask&(1<<3) != 0 {
		if w, err = basictl.StringRead(w, &item.BuildCommit); err != nil {
			return w, err
		}
	} else {
		item.BuildCommit = ""
	}
	if item.FieldsMask&(1<<7) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildCommitDate); err != nil {
			return w, err
		}
	} else {
		item.BuildCommitDate = 0
	}
	if item.FieldsMask&(1<<8) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildCommitTs); err != nil {
			return w, err
		}
	} else {
		item.BuildCommitTs = 0
	}
	if item.FieldsMask&(1<<4) != 0 {
		if w, err = basictl.IntRead(w, &item.QueueSizeDisk); err != nil {
			return w, err
		}
	} else {
		item.QueueSizeDisk = 0
	}
	if item.FieldsMask&(1<<4) != 0 {
		if w, err = basictl.IntRead(w, &item.QueueSizeMemory); err != nil {
			return w, err
		}
	} else {
		item.QueueSizeMemory = 0
	}
	if w, err = basictl.IntRead(w, &item.OriginalSize); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.CompressedData)
}

func (item *StatshouseSendSourceBucket) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplica)
	}
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplicaTotal)
	}
	if w, err = basictl.StringWrite(w, item.HostName); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<9) != 0 {
		w = basictl.IntWrite(w, item.SourceEnv)
	}
	if item.FieldsMask&(1<<9) != 0 {
		w = basictl.IntWrite(w, item.BuildArch)
	}
	if w, err = basictl.StringWrite(w, item.LegacySourceIp); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.Time)
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.ShardReplicaLegacy)
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.ShardReplicaLegacyTotal)
	}
	if item.FieldsMask&(1<<3) != 0 {
		if w, err = basictl.StringWrite(w, item.BuildCommit); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<7) != 0 {
		w = basictl.IntWrite(w, item.BuildCommitDate)
	}
	if item.FieldsMask&(1<<8) != 0 {
		w = basictl.IntWrite(w, item.BuildCommitTs)
	}
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.IntWrite(w, item.QueueSizeDisk)
	}
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.IntWrite(w, item.QueueSizeMemory)
	}
	w = basictl.IntWrite(w, item.OriginalSize)
	return basictl.StringWrite(w, item.CompressedData)
}

func (item *StatshouseSendSourceBucket) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x94575940); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseSendSourceBucket) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x94575940)
	return item.Write(w)
}

func (item *StatshouseSendSourceBucket) ReadResult(w []byte, ret *string) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xb5286e24); err != nil {
		return w, err
	}
	return basictl.StringRead(w, ret)
}

func (item *StatshouseSendSourceBucket) WriteResult(w []byte, ret string) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xb5286e24)
	return basictl.StringWrite(w, ret)
}

func (item *StatshouseSendSourceBucket) ReadResultJSON(j interface{}, ret *string) error {
	if err := JsonReadString(j, ret); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseSendSourceBucket) WriteResultJSON(w []byte, ret string) (_ []byte, err error) {
	w = basictl.JSONWriteString(w, ret)
	return w, nil
}

func (item *StatshouseSendSourceBucket) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret string
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseSendSourceBucket) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.sendSourceBucket", err.Error())
	}
	var ret string
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseSendSourceBucket) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseSendSourceBucket__ReadJSON(item *StatshouseSendSourceBucket, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseSendSourceBucket) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.sendSourceBucket", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jShardReplica := _jm["shard_replica"]
	delete(_jm, "shard_replica")
	_jShardReplicaTotal := _jm["shard_replica_total"]
	delete(_jm, "shard_replica_total")
	_jIngressProxy := _jm["ingress_proxy"]
	delete(_jm, "ingress_proxy")
	_jHostName := _jm["host_name"]
	delete(_jm, "host_name")
	if err := JsonReadString(_jHostName, &item.HostName); err != nil {
		return err
	}
	_jSourceEnv := _jm["source_env"]
	delete(_jm, "source_env")
	_jBuildArch := _jm["build_arch"]
	delete(_jm, "build_arch")
	_jLegacySourceIp := _jm["legacy_source_ip"]
	delete(_jm, "legacy_source_ip")
	if err := JsonReadString(_jLegacySourceIp, &item.LegacySourceIp); err != nil {
		return err
	}
	_jTime := _jm["time"]
	delete(_jm, "time")
	if err := JsonReadUint32(_jTime, &item.Time); err != nil {
		return err
	}
	_jHistoric := _jm["historic"]
	delete(_jm, "historic")
	_jSpare := _jm["spare"]
	delete(_jm, "spare")
	_jShardReplicaLegacy := _jm["shard_replica_legacy"]
	delete(_jm, "shard_replica_legacy")
	_jShardReplicaLegacyTotal := _jm["shard_replica_legacy_total"]
	delete(_jm, "shard_replica_legacy_total")
	_jBuildCommit := _jm["build_commit"]
	delete(_jm, "build_commit")
	_jBuildCommitDate := _jm["build_commit_date"]
	delete(_jm, "build_commit_date")
	_jBuildCommitTs := _jm["build_commit_ts"]
	delete(_jm, "build_commit_ts")
	_jQueueSizeDisk := _jm["queue_size_disk"]
	delete(_jm, "queue_size_disk")
	_jQueueSizeMemory := _jm["queue_size_memory"]
	delete(_jm, "queue_size_memory")
	_jOriginalSize := _jm["original_size"]
	delete(_jm, "original_size")
	if err := JsonReadInt32(_jOriginalSize, &item.OriginalSize); err != nil {
		return err
	}
	_jCompressedData := _jm["compressed_data"]
	delete(_jm, "compressed_data")
	if err := JsonReadString(_jCompressedData, &item.CompressedData); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.sendSourceBucket", k)
	}
	if _jShardReplica != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jShardReplicaTotal != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jIngressProxy != nil {
		_bit := false
		if err := JsonReadBool(_jIngressProxy, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 6
		} else {
			item.FieldsMask &^= 1 << 6
		}
	}
	if _jSourceEnv != nil {
		item.FieldsMask |= 1 << 9
	}
	if _jBuildArch != nil {
		item.FieldsMask |= 1 << 9
	}
	if _jHistoric != nil {
		_bit := false
		if err := JsonReadBool(_jHistoric, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if _jSpare != nil {
		_bit := false
		if err := JsonReadBool(_jSpare, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 1
		} else {
			item.FieldsMask &^= 1 << 1
		}
	}
	if _jShardReplicaLegacy != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jShardReplicaLegacyTotal != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jBuildCommit != nil {
		item.FieldsMask |= 1 << 3
	}
	if _jBuildCommitDate != nil {
		item.FieldsMask |= 1 << 7
	}
	if _jBuildCommitTs != nil {
		item.FieldsMask |= 1 << 8
	}
	if _jQueueSizeDisk != nil {
		item.FieldsMask |= 1 << 4
	}
	if _jQueueSizeMemory != nil {
		item.FieldsMask |= 1 << 4
	}
	if _jShardReplica != nil {
		if err := JsonReadInt32(_jShardReplica, &item.ShardReplica); err != nil {
			return err
		}
	} else {
		item.ShardReplica = 0
	}
	if _jShardReplicaTotal != nil {
		if err := JsonReadInt32(_jShardReplicaTotal, &item.ShardReplicaTotal); err != nil {
			return err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if _jSourceEnv != nil {
		if err := JsonReadInt32(_jSourceEnv, &item.SourceEnv); err != nil {
			return err
		}
	} else {
		item.SourceEnv = 0
	}
	if _jBuildArch != nil {
		if err := JsonReadInt32(_jBuildArch, &item.BuildArch); err != nil {
			return err
		}
	} else {
		item.BuildArch = 0
	}
	if _jShardReplicaLegacy != nil {
		if err := JsonReadInt32(_jShardReplicaLegacy, &item.ShardReplicaLegacy); err != nil {
			return err
		}
	} else {
		item.ShardReplicaLegacy = 0
	}
	if _jShardReplicaLegacyTotal != nil {
		if err := JsonReadInt32(_jShardReplicaLegacyTotal, &item.ShardReplicaLegacyTotal); err != nil {
			return err
		}
	} else {
		item.ShardReplicaLegacyTotal = 0
	}
	if _jBuildCommit != nil {
		if err := JsonReadString(_jBuildCommit, &item.BuildCommit); err != nil {
			return err
		}
	} else {
		item.BuildCommit = ""
	}
	if _jBuildCommitDate != nil {
		if err := JsonReadInt32(_jBuildCommitDate, &item.BuildCommitDate); err != nil {
			return err
		}
	} else {
		item.BuildCommitDate = 0
	}
	if _jBuildCommitTs != nil {
		if err := JsonReadInt32(_jBuildCommitTs, &item.BuildCommitTs); err != nil {
			return err
		}
	} else {
		item.BuildCommitTs = 0
	}
	if _jQueueSizeDisk != nil {
		if err := JsonReadInt32(_jQueueSizeDisk, &item.QueueSizeDisk); err != nil {
			return err
		}
	} else {
		item.QueueSizeDisk = 0
	}
	if _jQueueSizeMemory != nil {
		if err := JsonReadInt32(_jQueueSizeMemory, &item.QueueSizeMemory); err != nil {
			return err
		}
	} else {
		item.QueueSizeMemory = 0
	}
	return nil
}

func (item *StatshouseSendSourceBucket) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplica != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplica)
		}
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplicaTotal != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica_total":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplicaTotal)
		}
	}
	if item.FieldsMask&(1<<6) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ingress_proxy":true`...)
	}
	if len(item.HostName) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"host_name":`...)
		w = basictl.JSONWriteString(w, item.HostName)
	}
	if item.FieldsMask&(1<<9) != 0 {
		if item.SourceEnv != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"source_env":`...)
			w = basictl.JSONWriteInt32(w, item.SourceEnv)
		}
	}
	if item.FieldsMask&(1<<9) != 0 {
		if item.BuildArch != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_arch":`...)
			w = basictl.JSONWriteInt32(w, item.BuildArch)
		}
	}
	if len(item.LegacySourceIp) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"legacy_source_ip":`...)
		w = basictl.JSONWriteString(w, item.LegacySourceIp)
	}
	if item.Time != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"time":`...)
		w = basictl.JSONWriteUint32(w, item.Time)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"historic":true`...)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"spare":true`...)
	}
	if item.FieldsMask&(1<<2) != 0 {
		if item.ShardReplicaLegacy != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica_legacy":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplicaLegacy)
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if item.ShardReplicaLegacyTotal != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica_legacy_total":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplicaLegacyTotal)
		}
	}
	if item.FieldsMask&(1<<3) != 0 {
		if len(item.BuildCommit) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_commit":`...)
			w = basictl.JSONWriteString(w, item.BuildCommit)
		}
	}
	if item.FieldsMask&(1<<7) != 0 {
		if item.BuildCommitDate != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_commit_date":`...)
			w = basictl.JSONWriteInt32(w, item.BuildCommitDate)
		}
	}
	if item.FieldsMask&(1<<8) != 0 {
		if item.BuildCommitTs != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_commit_ts":`...)
			w = basictl.JSONWriteInt32(w, item.BuildCommitTs)
		}
	}
	if item.FieldsMask&(1<<4) != 0 {
		if item.QueueSizeDisk != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"queue_size_disk":`...)
			w = basictl.JSONWriteInt32(w, item.QueueSizeDisk)
		}
	}
	if item.FieldsMask&(1<<4) != 0 {
		if item.QueueSizeMemory != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"queue_size_memory":`...)
			w = basictl.JSONWriteInt32(w, item.QueueSizeMemory)
		}
	}
	if item.OriginalSize != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"original_size":`...)
		w = basictl.JSONWriteInt32(w, item.OriginalSize)
	}
	if len(item.CompressedData) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"compressed_data":`...)
		w = basictl.JSONWriteString(w, item.CompressedData)
	}
	return append(w, '}'), nil
}

func (item *StatshouseSendSourceBucket) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseSendSourceBucket) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.sendSourceBucket", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.sendSourceBucket", err.Error())
	}
	return nil
}

var _ = True{}

type StatshouseSendSourceBucketBytes struct {
	FieldsMask        uint32
	ShardReplica      int32 // Conditional: item.FieldsMask.5
	ShardReplicaTotal int32 // Conditional: item.FieldsMask.5
	// IngressProxy True // Conditional: item.FieldsMask.6
	HostName       []byte
	SourceEnv      int32 // Conditional: item.FieldsMask.9
	BuildArch      int32 // Conditional: item.FieldsMask.9
	LegacySourceIp []byte
	Time           uint32
	// Historic True // Conditional: item.FieldsMask.0
	// Spare True // Conditional: item.FieldsMask.1
	ShardReplicaLegacy      int32  // Conditional: item.FieldsMask.2
	ShardReplicaLegacyTotal int32  // Conditional: item.FieldsMask.2
	BuildCommit             []byte // Conditional: item.FieldsMask.3
	BuildCommitDate         int32  // Conditional: item.FieldsMask.7
	BuildCommitTs           int32  // Conditional: item.FieldsMask.8
	QueueSizeDisk           int32  // Conditional: item.FieldsMask.4
	QueueSizeMemory         int32  // Conditional: item.FieldsMask.4
	OriginalSize            int32
	CompressedData          []byte
}

func (StatshouseSendSourceBucketBytes) TLName() string { return "statshouse.sendSourceBucket" }
func (StatshouseSendSourceBucketBytes) TLTag() uint32  { return 0x94575940 }

func (item *StatshouseSendSourceBucketBytes) SetShardReplica(v int32) {
	item.ShardReplica = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseSendSourceBucketBytes) ClearShardReplica() {
	item.ShardReplica = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseSendSourceBucketBytes) IsSetShardReplica() bool {
	return item.FieldsMask&(1<<5) != 0
}

func (item *StatshouseSendSourceBucketBytes) SetShardReplicaTotal(v int32) {
	item.ShardReplicaTotal = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseSendSourceBucketBytes) ClearShardReplicaTotal() {
	item.ShardReplicaTotal = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseSendSourceBucketBytes) IsSetShardReplicaTotal() bool {
	return item.FieldsMask&(1<<5) != 0
}

func (item *StatshouseSendSourceBucketBytes) SetIngressProxy(v bool) {
	if v {
		item.FieldsMask |= 1 << 6
	} else {
		item.FieldsMask &^= 1 << 6
	}
}
func (item *StatshouseSendSourceBucketBytes) IsSetIngressProxy() bool {
	return item.FieldsMask&(1<<6) != 0
}

func (item *StatshouseSendSourceBucketBytes) SetSourceEnv(v int32) {
	item.SourceEnv = v
	item.FieldsMask |= 1 << 9
}
func (item *StatshouseSendSourceBucketBytes) ClearSourceEnv() {
	item.SourceEnv = 0
	item.FieldsMask &^= 1 << 9
}
func (item *StatshouseSendSourceBucketBytes) IsSetSourceEnv() bool {
	return item.FieldsMask&(1<<9) != 0
}

func (item *StatshouseSendSourceBucketBytes) SetBuildArch(v int32) {
	item.BuildArch = v
	item.FieldsMask |= 1 << 9
}
func (item *StatshouseSendSourceBucketBytes) ClearBuildArch() {
	item.BuildArch = 0
	item.FieldsMask &^= 1 << 9
}
func (item *StatshouseSendSourceBucketBytes) IsSetBuildArch() bool {
	return item.FieldsMask&(1<<9) != 0
}

func (item *StatshouseSendSourceBucketBytes) SetHistoric(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item *StatshouseSendSourceBucketBytes) IsSetHistoric() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseSendSourceBucketBytes) SetSpare(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item *StatshouseSendSourceBucketBytes) IsSetSpare() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseSendSourceBucketBytes) SetShardReplicaLegacy(v int32) {
	item.ShardReplicaLegacy = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseSendSourceBucketBytes) ClearShardReplicaLegacy() {
	item.ShardReplicaLegacy = 0
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseSendSourceBucketBytes) IsSetShardReplicaLegacy() bool {
	return item.FieldsMask&(1<<2) != 0
}

func (item *StatshouseSendSourceBucketBytes) SetShardReplicaLegacyTotal(v int32) {
	item.ShardReplicaLegacyTotal = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseSendSourceBucketBytes) ClearShardReplicaLegacyTotal() {
	item.ShardReplicaLegacyTotal = 0
	item.FieldsMask &^= 1 << 2
}
func (item *StatshouseSendSourceBucketBytes) IsSetShardReplicaLegacyTotal() bool {
	return item.FieldsMask&(1<<2) != 0
}

func (item *StatshouseSendSourceBucketBytes) SetBuildCommit(v []byte) {
	item.BuildCommit = v
	item.FieldsMask |= 1 << 3
}
func (item *StatshouseSendSourceBucketBytes) ClearBuildCommit() {
	item.BuildCommit = item.BuildCommit[:0]
	item.FieldsMask &^= 1 << 3
}
func (item *StatshouseSendSourceBucketBytes) IsSetBuildCommit() bool {
	return item.FieldsMask&(1<<3) != 0
}

func (item *StatshouseSendSourceBucketBytes) SetBuildCommitDate(v int32) {
	item.BuildCommitDate = v
	item.FieldsMask |= 1 << 7
}
func (item *StatshouseSendSourceBucketBytes) ClearBuildCommitDate() {
	item.BuildCommitDate = 0
	item.FieldsMask &^= 1 << 7
}
func (item *StatshouseSendSourceBucketBytes) IsSetBuildCommitDate() bool {
	return item.FieldsMask&(1<<7) != 0
}

func (item *StatshouseSendSourceBucketBytes) SetBuildCommitTs(v int32) {
	item.BuildCommitTs = v
	item.FieldsMask |= 1 << 8
}
func (item *StatshouseSendSourceBucketBytes) ClearBuildCommitTs() {
	item.BuildCommitTs = 0
	item.FieldsMask &^= 1 << 8
}
func (item *StatshouseSendSourceBucketBytes) IsSetBuildCommitTs() bool {
	return item.FieldsMask&(1<<8) != 0
}

func (item *StatshouseSendSourceBucketBytes) SetQueueSizeDisk(v int32) {
	item.QueueSizeDisk = v
	item.FieldsMask |= 1 << 4
}
func (item *StatshouseSendSourceBucketBytes) ClearQueueSizeDisk() {
	item.QueueSizeDisk = 0
	item.FieldsMask &^= 1 << 4
}
func (item *StatshouseSendSourceBucketBytes) IsSetQueueSizeDisk() bool {
	return item.FieldsMask&(1<<4) != 0
}

func (item *StatshouseSendSourceBucketBytes) SetQueueSizeMemory(v int32) {
	item.QueueSizeMemory = v
	item.FieldsMask |= 1 << 4
}
func (item *StatshouseSendSourceBucketBytes) ClearQueueSizeMemory() {
	item.QueueSizeMemory = 0
	item.FieldsMask &^= 1 << 4
}
func (item *StatshouseSendSourceBucketBytes) IsSetQueueSizeMemory() bool {
	return item.FieldsMask&(1<<4) != 0
}

func (item *StatshouseSendSourceBucketBytes) Reset() {
	item.FieldsMask = 0
	item.ShardReplica = 0
	item.ShardReplicaTotal = 0
	item.HostName = item.HostName[:0]
	item.SourceEnv = 0
	item.BuildArch = 0
	item.LegacySourceIp = item.LegacySourceIp[:0]
	item.Time = 0
	item.ShardReplicaLegacy = 0
	item.ShardReplicaLegacyTotal = 0
	item.BuildCommit = item.BuildCommit[:0]
	item.BuildCommitDate = 0
	item.BuildCommitTs = 0
	item.QueueSizeDisk = 0
	item.QueueSizeMemory = 0
	item.OriginalSize = 0
	item.CompressedData = item.CompressedData[:0]
}

func (item *StatshouseSendSourceBucketBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplica); err != nil {
			return w, err
		}
	} else {
		item.ShardReplica = 0
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplicaTotal); err != nil {
			return w, err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if w, err = basictl.StringReadBytes(w, &item.HostName); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<9) != 0 {
		if w, err = basictl.IntRead(w, &item.SourceEnv); err != nil {
			return w, err
		}
	} else {
		item.SourceEnv = 0
	}
	if item.FieldsMask&(1<<9) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildArch); err != nil {
			return w, err
		}
	} else {
		item.BuildArch = 0
	}
	if w, err = basictl.StringReadBytes(w, &item.LegacySourceIp); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.Time); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplicaLegacy); err != nil {
			return w, err
		}
	} else {
		item.ShardReplicaLegacy = 0
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplicaLegacyTotal); err != nil {
			return w, err
		}
	} else {
		item.ShardReplicaLegacyTotal = 0
	}
	if item.FieldsMask&(1<<3) != 0 {
		if w, err = basictl.StringReadBytes(w, &item.BuildCommit); err != nil {
			return w, err
		}
	} else {
		item.BuildCommit = item.BuildCommit[:0]
	}
	if item.FieldsMask&(1<<7) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildCommitDate); err != nil {
			return w, err
		}
	} else {
		item.BuildCommitDate = 0
	}
	if item.FieldsMask&(1<<8) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildCommitTs); err != nil {
			return w, err
		}
	} else {
		item.BuildCommitTs = 0
	}
	if item.FieldsMask&(1<<4) != 0 {
		if w, err = basictl.IntRead(w, &item.QueueSizeDisk); err != nil {
			return w, err
		}
	} else {
		item.QueueSizeDisk = 0
	}
	if item.FieldsMask&(1<<4) != 0 {
		if w, err = basictl.IntRead(w, &item.QueueSizeMemory); err != nil {
			return w, err
		}
	} else {
		item.QueueSizeMemory = 0
	}
	if w, err = basictl.IntRead(w, &item.OriginalSize); err != nil {
		return w, err
	}
	return basictl.StringReadBytes(w, &item.CompressedData)
}

func (item *StatshouseSendSourceBucketBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplica)
	}
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplicaTotal)
	}
	if w, err = basictl.StringWriteBytes(w, item.HostName); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<9) != 0 {
		w = basictl.IntWrite(w, item.SourceEnv)
	}
	if item.FieldsMask&(1<<9) != 0 {
		w = basictl.IntWrite(w, item.BuildArch)
	}
	if w, err = basictl.StringWriteBytes(w, item.LegacySourceIp); err != nil {
		return w, err
	}
	w = basictl.NatWrite(w, item.Time)
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.ShardReplicaLegacy)
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.IntWrite(w, item.ShardReplicaLegacyTotal)
	}
	if item.FieldsMask&(1<<3) != 0 {
		if w, err = basictl.StringWriteBytes(w, item.BuildCommit); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<7) != 0 {
		w = basictl.IntWrite(w, item.BuildCommitDate)
	}
	if item.FieldsMask&(1<<8) != 0 {
		w = basictl.IntWrite(w, item.BuildCommitTs)
	}
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.IntWrite(w, item.QueueSizeDisk)
	}
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.IntWrite(w, item.QueueSizeMemory)
	}
	w = basictl.IntWrite(w, item.OriginalSize)
	return basictl.StringWriteBytes(w, item.CompressedData)
}

func (item *StatshouseSendSourceBucketBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x94575940); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseSendSourceBucketBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x94575940)
	return item.Write(w)
}

func (item *StatshouseSendSourceBucketBytes) ReadResult(w []byte, ret *[]byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xb5286e24); err != nil {
		return w, err
	}
	return basictl.StringReadBytes(w, ret)
}

func (item *StatshouseSendSourceBucketBytes) WriteResult(w []byte, ret []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0xb5286e24)
	return basictl.StringWriteBytes(w, ret)
}

func (item *StatshouseSendSourceBucketBytes) ReadResultJSON(j interface{}, ret *[]byte) error {
	if err := JsonReadStringBytes(j, ret); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseSendSourceBucketBytes) WriteResultJSON(w []byte, ret []byte) (_ []byte, err error) {
	w = basictl.JSONWriteStringBytes(w, ret)
	return w, nil
}

func (item *StatshouseSendSourceBucketBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret []byte
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseSendSourceBucketBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.sendSourceBucket", err.Error())
	}
	var ret []byte
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseSendSourceBucketBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseSendSourceBucketBytes__ReadJSON(item *StatshouseSendSourceBucketBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseSendSourceBucketBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.sendSourceBucket", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jShardReplica := _jm["shard_replica"]
	delete(_jm, "shard_replica")
	_jShardReplicaTotal := _jm["shard_replica_total"]
	delete(_jm, "shard_replica_total")
	_jIngressProxy := _jm["ingress_proxy"]
	delete(_jm, "ingress_proxy")
	_jHostName := _jm["host_name"]
	delete(_jm, "host_name")
	if err := JsonReadStringBytes(_jHostName, &item.HostName); err != nil {
		return err
	}
	_jSourceEnv := _jm["source_env"]
	delete(_jm, "source_env")
	_jBuildArch := _jm["build_arch"]
	delete(_jm, "build_arch")
	_jLegacySourceIp := _jm["legacy_source_ip"]
	delete(_jm, "legacy_source_ip")
	if err := JsonReadStringBytes(_jLegacySourceIp, &item.LegacySourceIp); err != nil {
		return err
	}
	_jTime := _jm["time"]
	delete(_jm, "time")
	if err := JsonReadUint32(_jTime, &item.Time); err != nil {
		return err
	}
	_jHistoric := _jm["historic"]
	delete(_jm, "historic")
	_jSpare := _jm["spare"]
	delete(_jm, "spare")
	_jShardReplicaLegacy := _jm["shard_replica_legacy"]
	delete(_jm, "shard_replica_legacy")
	_jShardReplicaLegacyTotal := _jm["shard_replica_legacy_total"]
	delete(_jm, "shard_replica_legacy_total")
	_jBuildCommit := _jm["build_commit"]
	delete(_jm, "build_commit")
	_jBuildCommitDate := _jm["build_commit_date"]
	delete(_jm, "build_commit_date")
	_jBuildCommitTs := _jm["build_commit_ts"]
	delete(_jm, "build_commit_ts")
	_jQueueSizeDisk := _jm["queue_size_disk"]
	delete(_jm, "queue_size_disk")
	_jQueueSizeMemory := _jm["queue_size_memory"]
	delete(_jm, "queue_size_memory")
	_jOriginalSize := _jm["original_size"]
	delete(_jm, "original_size")
	if err := JsonReadInt32(_jOriginalSize, &item.OriginalSize); err != nil {
		return err
	}
	_jCompressedData := _jm["compressed_data"]
	delete(_jm, "compressed_data")
	if err := JsonReadStringBytes(_jCompressedData, &item.CompressedData); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.sendSourceBucket", k)
	}
	if _jShardReplica != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jShardReplicaTotal != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jIngressProxy != nil {
		_bit := false
		if err := JsonReadBool(_jIngressProxy, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 6
		} else {
			item.FieldsMask &^= 1 << 6
		}
	}
	if _jSourceEnv != nil {
		item.FieldsMask |= 1 << 9
	}
	if _jBuildArch != nil {
		item.FieldsMask |= 1 << 9
	}
	if _jHistoric != nil {
		_bit := false
		if err := JsonReadBool(_jHistoric, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if _jSpare != nil {
		_bit := false
		if err := JsonReadBool(_jSpare, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 1
		} else {
			item.FieldsMask &^= 1 << 1
		}
	}
	if _jShardReplicaLegacy != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jShardReplicaLegacyTotal != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jBuildCommit != nil {
		item.FieldsMask |= 1 << 3
	}
	if _jBuildCommitDate != nil {
		item.FieldsMask |= 1 << 7
	}
	if _jBuildCommitTs != nil {
		item.FieldsMask |= 1 << 8
	}
	if _jQueueSizeDisk != nil {
		item.FieldsMask |= 1 << 4
	}
	if _jQueueSizeMemory != nil {
		item.FieldsMask |= 1 << 4
	}
	if _jShardReplica != nil {
		if err := JsonReadInt32(_jShardReplica, &item.ShardReplica); err != nil {
			return err
		}
	} else {
		item.ShardReplica = 0
	}
	if _jShardReplicaTotal != nil {
		if err := JsonReadInt32(_jShardReplicaTotal, &item.ShardReplicaTotal); err != nil {
			return err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if _jSourceEnv != nil {
		if err := JsonReadInt32(_jSourceEnv, &item.SourceEnv); err != nil {
			return err
		}
	} else {
		item.SourceEnv = 0
	}
	if _jBuildArch != nil {
		if err := JsonReadInt32(_jBuildArch, &item.BuildArch); err != nil {
			return err
		}
	} else {
		item.BuildArch = 0
	}
	if _jShardReplicaLegacy != nil {
		if err := JsonReadInt32(_jShardReplicaLegacy, &item.ShardReplicaLegacy); err != nil {
			return err
		}
	} else {
		item.ShardReplicaLegacy = 0
	}
	if _jShardReplicaLegacyTotal != nil {
		if err := JsonReadInt32(_jShardReplicaLegacyTotal, &item.ShardReplicaLegacyTotal); err != nil {
			return err
		}
	} else {
		item.ShardReplicaLegacyTotal = 0
	}
	if _jBuildCommit != nil {
		if err := JsonReadStringBytes(_jBuildCommit, &item.BuildCommit); err != nil {
			return err
		}
	} else {
		item.BuildCommit = item.BuildCommit[:0]
	}
	if _jBuildCommitDate != nil {
		if err := JsonReadInt32(_jBuildCommitDate, &item.BuildCommitDate); err != nil {
			return err
		}
	} else {
		item.BuildCommitDate = 0
	}
	if _jBuildCommitTs != nil {
		if err := JsonReadInt32(_jBuildCommitTs, &item.BuildCommitTs); err != nil {
			return err
		}
	} else {
		item.BuildCommitTs = 0
	}
	if _jQueueSizeDisk != nil {
		if err := JsonReadInt32(_jQueueSizeDisk, &item.QueueSizeDisk); err != nil {
			return err
		}
	} else {
		item.QueueSizeDisk = 0
	}
	if _jQueueSizeMemory != nil {
		if err := JsonReadInt32(_jQueueSizeMemory, &item.QueueSizeMemory); err != nil {
			return err
		}
	} else {
		item.QueueSizeMemory = 0
	}
	return nil
}

func (item *StatshouseSendSourceBucketBytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplica != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplica)
		}
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplicaTotal != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica_total":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplicaTotal)
		}
	}
	if item.FieldsMask&(1<<6) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ingress_proxy":true`...)
	}
	if len(item.HostName) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"host_name":`...)
		w = basictl.JSONWriteStringBytes(w, item.HostName)
	}
	if item.FieldsMask&(1<<9) != 0 {
		if item.SourceEnv != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"source_env":`...)
			w = basictl.JSONWriteInt32(w, item.SourceEnv)
		}
	}
	if item.FieldsMask&(1<<9) != 0 {
		if item.BuildArch != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_arch":`...)
			w = basictl.JSONWriteInt32(w, item.BuildArch)
		}
	}
	if len(item.LegacySourceIp) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"legacy_source_ip":`...)
		w = basictl.JSONWriteStringBytes(w, item.LegacySourceIp)
	}
	if item.Time != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"time":`...)
		w = basictl.JSONWriteUint32(w, item.Time)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"historic":true`...)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"spare":true`...)
	}
	if item.FieldsMask&(1<<2) != 0 {
		if item.ShardReplicaLegacy != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica_legacy":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplicaLegacy)
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if item.ShardReplicaLegacyTotal != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica_legacy_total":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplicaLegacyTotal)
		}
	}
	if item.FieldsMask&(1<<3) != 0 {
		if len(item.BuildCommit) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_commit":`...)
			w = basictl.JSONWriteStringBytes(w, item.BuildCommit)
		}
	}
	if item.FieldsMask&(1<<7) != 0 {
		if item.BuildCommitDate != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_commit_date":`...)
			w = basictl.JSONWriteInt32(w, item.BuildCommitDate)
		}
	}
	if item.FieldsMask&(1<<8) != 0 {
		if item.BuildCommitTs != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_commit_ts":`...)
			w = basictl.JSONWriteInt32(w, item.BuildCommitTs)
		}
	}
	if item.FieldsMask&(1<<4) != 0 {
		if item.QueueSizeDisk != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"queue_size_disk":`...)
			w = basictl.JSONWriteInt32(w, item.QueueSizeDisk)
		}
	}
	if item.FieldsMask&(1<<4) != 0 {
		if item.QueueSizeMemory != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"queue_size_memory":`...)
			w = basictl.JSONWriteInt32(w, item.QueueSizeMemory)
		}
	}
	if item.OriginalSize != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"original_size":`...)
		w = basictl.JSONWriteInt32(w, item.OriginalSize)
	}
	if len(item.CompressedData) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"compressed_data":`...)
		w = basictl.JSONWriteStringBytes(w, item.CompressedData)
	}
	return append(w, '}'), nil
}

func (item *StatshouseSendSourceBucketBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseSendSourceBucketBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.sendSourceBucket", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.sendSourceBucket", err.Error())
	}
	return nil
}
