// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EngineReloadDynamicLib struct {
	Options EngineReloadDynamicLibOptions
}

func (EngineReloadDynamicLib) TLName() string { return "engine.reloadDynamicLib" }
func (EngineReloadDynamicLib) TLTag() uint32  { return 0x602d62c1 }

func (item *EngineReloadDynamicLib) Reset() {
	item.Options.Reset()
}

func (item *EngineReloadDynamicLib) Read(w []byte) (_ []byte, err error) {
	return item.Options.Read(w)
}

func (item *EngineReloadDynamicLib) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *EngineReloadDynamicLib) Write(w []byte) []byte {
	w = item.Options.Write(w)
	return w
}

func (item *EngineReloadDynamicLib) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x602d62c1); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *EngineReloadDynamicLib) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *EngineReloadDynamicLib) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x602d62c1)
	return item.Write(w)
}

func (item *EngineReloadDynamicLib) ReadResult(w []byte, ret *BoolStat) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *EngineReloadDynamicLib) WriteResult(w []byte, ret BoolStat) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *EngineReloadDynamicLib) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *BoolStat) error {
	tctx := &basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	if err := ret.ReadJSONGeneral(tctx, in); err != nil {
		return err
	}
	return nil
}

func (item *EngineReloadDynamicLib) WriteResultJSON(w []byte, ret BoolStat) (_ []byte, err error) {
	tctx := basictl.JSONWriteContext{}
	return item.writeResultJSON(&tctx, w, ret)
}

func (item *EngineReloadDynamicLib) writeResultJSON(tctx *basictl.JSONWriteContext, w []byte, ret BoolStat) (_ []byte, err error) {
	w = ret.WriteJSONOpt(tctx, w)
	return w, nil
}

func (item *EngineReloadDynamicLib) ReadResultWriteResultJSON(tctx *basictl.JSONWriteContext, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret BoolStat
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(tctx, w, ret)
	return r, w, err
}

func (item *EngineReloadDynamicLib) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret BoolStat
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item EngineReloadDynamicLib) String() string {
	return string(item.WriteJSON(nil))
}

func (item *EngineReloadDynamicLib) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *EngineReloadDynamicLib) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propOptionsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "options":
				if propOptionsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.reloadDynamicLib", "options")
				}
				if err := item.Options.ReadJSONGeneral(tctx, in); err != nil {
					return err
				}
				propOptionsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("engine.reloadDynamicLib", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propOptionsPresented {
		item.Options.Reset()
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *EngineReloadDynamicLib) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *EngineReloadDynamicLib) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *EngineReloadDynamicLib) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"options":`...)
	w = item.Options.WriteJSONOpt(tctx, w)
	return append(w, '}')
}

func (item *EngineReloadDynamicLib) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *EngineReloadDynamicLib) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("engine.reloadDynamicLib", err.Error())
	}
	return nil
}
