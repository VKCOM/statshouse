// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type KvEngineBackup struct {
	Prefix string
}

func (KvEngineBackup) TLName() string { return "kv_engine.backup" }
func (KvEngineBackup) TLTag() uint32  { return 0x3c7231b2 }

func (item *KvEngineBackup) Reset() {
	item.Prefix = ""
}

func (item *KvEngineBackup) Read(w []byte) (_ []byte, err error) {
	return basictl.StringRead(w, &item.Prefix)
}

func (item *KvEngineBackup) Write(w []byte) (_ []byte, err error) {
	return basictl.StringWrite(w, item.Prefix), nil
}

func (item *KvEngineBackup) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3c7231b2); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *KvEngineBackup) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x3c7231b2)
	return item.Write(w)
}

func (item *KvEngineBackup) ReadResult(w []byte, ret *KvEngineBackupResponse) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *KvEngineBackup) WriteResult(w []byte, ret KvEngineBackupResponse) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *KvEngineBackup) ReadResultJSON(j interface{}, ret *KvEngineBackupResponse) error {
	if err := KvEngineBackupResponse__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *KvEngineBackup) WriteResultJSON(w []byte, ret KvEngineBackupResponse) (_ []byte, err error) {
	return item.writeResultJSON(false, w, ret)
}

func (item *KvEngineBackup) writeResultJSON(short bool, w []byte, ret KvEngineBackupResponse) (_ []byte, err error) {
	if w, err = ret.WriteJSONOpt(short, w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *KvEngineBackup) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret KvEngineBackupResponse
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *KvEngineBackup) ReadResultWriteResultJSONShort(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret KvEngineBackupResponse
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(true, w, ret)
	return r, w, err
}

func (item *KvEngineBackup) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("kv_engine.backup", err.Error())
	}
	var ret KvEngineBackupResponse
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item KvEngineBackup) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func KvEngineBackup__ReadJSON(item *KvEngineBackup, j interface{}) error { return item.readJSON(j) }
func (item *KvEngineBackup) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("kv_engine.backup", "expected json object")
	}
	_jPrefix := _jm["prefix"]
	delete(_jm, "prefix")
	if err := JsonReadString(_jPrefix, &item.Prefix); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("kv_engine.backup", k)
	}
	return nil
}

func (item *KvEngineBackup) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *KvEngineBackup) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.Prefix) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"prefix":`...)
		w = basictl.JSONWriteString(w, item.Prefix)
	}
	return append(w, '}'), nil
}

func (item *KvEngineBackup) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *KvEngineBackup) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("kv_engine.backup", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("kv_engine.backup", err.Error())
	}
	return nil
}
