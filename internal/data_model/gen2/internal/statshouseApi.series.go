// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseApiSeries struct {
	FieldsMask uint32
	SeriesData [][]float64
	Time       []int64
}

func (StatshouseApiSeries) TLName() string { return "statshouseApi.series" }
func (StatshouseApiSeries) TLTag() uint32  { return 0x7a3e919 }

func (item *StatshouseApiSeries) Reset() {
	item.FieldsMask = 0
	item.SeriesData = item.SeriesData[:0]
	item.Time = item.Time[:0]
}

func (item *StatshouseApiSeries) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorVectorDoubleRead(w, &item.SeriesData); err != nil {
		return w, err
	}
	return BuiltinVectorLongRead(w, &item.Time)
}

func (item *StatshouseApiSeries) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = BuiltinVectorVectorDoubleWrite(w, item.SeriesData); err != nil {
		return w, err
	}
	return BuiltinVectorLongWrite(w, item.Time)
}

func (item *StatshouseApiSeries) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x7a3e919); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseApiSeries) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x7a3e919)
	return item.Write(w)
}

func (item StatshouseApiSeries) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *StatshouseApiSeries) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propSeriesDataPresented bool
	var propTimePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.series", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "series_data":
				if propSeriesDataPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.series", "series_data")
				}
				if err := BuiltinVectorVectorDoubleReadJSON(legacyTypeNames, in, &item.SeriesData); err != nil {
					return err
				}
				propSeriesDataPresented = true
			case "time":
				if propTimePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.series", "time")
				}
				if err := BuiltinVectorLongReadJSON(legacyTypeNames, in, &item.Time); err != nil {
					return err
				}
				propTimePresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouseApi.series", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propSeriesDataPresented {
		item.SeriesData = item.SeriesData[:0]
	}
	if !propTimePresented {
		item.Time = item.Time[:0]
	}
	return nil
}

func (item *StatshouseApiSeries) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseApiSeries) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexSeriesData := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"series_data":`...)
	if w, err = BuiltinVectorVectorDoubleWriteJSONOpt(newTypeNames, short, w, item.SeriesData); err != nil {
		return w, err
	}
	if (len(item.SeriesData) != 0) == false {
		w = w[:backupIndexSeriesData]
	}
	backupIndexTime := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"time":`...)
	if w, err = BuiltinVectorLongWriteJSONOpt(newTypeNames, short, w, item.Time); err != nil {
		return w, err
	}
	if (len(item.Time) != 0) == false {
		w = w[:backupIndexTime]
	}
	return append(w, '}'), nil
}

func (item *StatshouseApiSeries) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseApiSeries) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouseApi.series", err.Error())
	}
	return nil
}
