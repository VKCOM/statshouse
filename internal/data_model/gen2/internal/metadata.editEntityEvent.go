// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataEditEntityEvent struct {
	FieldsMask uint32
	Metric     MetadataEvent
	OldVersion int64
}

func (MetadataEditEntityEvent) TLName() string { return "metadata.editEntityEvent" }
func (MetadataEditEntityEvent) TLTag() uint32  { return 0x1234b677 }

func (item *MetadataEditEntityEvent) Reset() {
	item.FieldsMask = 0
	item.Metric.Reset()
	item.OldVersion = 0
}

func (item *MetadataEditEntityEvent) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Metric.Read(w); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.OldVersion)
}

func (item *MetadataEditEntityEvent) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = item.Metric.Write(w); err != nil {
		return w, err
	}
	return basictl.LongWrite(w, item.OldVersion), nil
}

func (item *MetadataEditEntityEvent) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1234b677); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MetadataEditEntityEvent) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1234b677)
	return item.Write(w)
}

func (item MetadataEditEntityEvent) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func MetadataEditEntityEvent__ReadJSON(item *MetadataEditEntityEvent, j interface{}) error {
	return item.readJSON(j)
}
func (item *MetadataEditEntityEvent) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("metadata.editEntityEvent", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jMetric := _jm["metric"]
	delete(_jm, "metric")
	_jOldVersion := _jm["old_version"]
	delete(_jm, "old_version")
	if err := JsonReadInt64(_jOldVersion, &item.OldVersion); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.editEntityEvent", k)
	}
	if err := MetadataEvent__ReadJSON(&item.Metric, _jMetric); err != nil {
		return err
	}
	return nil
}

func (item *MetadataEditEntityEvent) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metric":`...)
	if w, err = item.Metric.WriteJSON(w); err != nil {
		return w, err
	}
	if item.OldVersion != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"old_version":`...)
		w = basictl.JSONWriteInt64(w, item.OldVersion)
	}
	return append(w, '}'), nil
}

func (item *MetadataEditEntityEvent) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *MetadataEditEntityEvent) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("metadata.editEntityEvent", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("metadata.editEntityEvent", err.Error())
	}
	return nil
}
