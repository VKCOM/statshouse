// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

var _ = True{}

type StatshouseGetTargets struct {
	FieldsMask        uint32
	ShardReplica      int32 // Conditional: item.FieldsMask.5
	ShardReplicaTotal int32 // Conditional: item.FieldsMask.5
	// IngressProxy True // Conditional: item.FieldsMask.6
	HostName  string
	SourceEnv int32 // Conditional: item.FieldsMask.0
	BuildArch int32 // Conditional: item.FieldsMask.0
	OldHash   string
}

func (StatshouseGetTargets) TLName() string { return "statshouse.getTargets" }
func (StatshouseGetTargets) TLTag() uint32  { return 0x51df72a3 }

func (item *StatshouseGetTargets) SetShardReplica(v int32) {
	item.ShardReplica = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseGetTargets) ClearShardReplica() {
	item.ShardReplica = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseGetTargets) IsSetShardReplica() bool { return item.FieldsMask&(1<<5) != 0 }

func (item *StatshouseGetTargets) SetShardReplicaTotal(v int32) {
	item.ShardReplicaTotal = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseGetTargets) ClearShardReplicaTotal() {
	item.ShardReplicaTotal = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseGetTargets) IsSetShardReplicaTotal() bool { return item.FieldsMask&(1<<5) != 0 }

func (item *StatshouseGetTargets) SetIngressProxy(v bool) {
	if v {
		item.FieldsMask |= 1 << 6
	} else {
		item.FieldsMask &^= 1 << 6
	}
}
func (item *StatshouseGetTargets) IsSetIngressProxy() bool { return item.FieldsMask&(1<<6) != 0 }

func (item *StatshouseGetTargets) SetSourceEnv(v int32) {
	item.SourceEnv = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseGetTargets) ClearSourceEnv() {
	item.SourceEnv = 0
	item.FieldsMask &^= 1 << 0
}
func (item *StatshouseGetTargets) IsSetSourceEnv() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTargets) SetBuildArch(v int32) {
	item.BuildArch = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseGetTargets) ClearBuildArch() {
	item.BuildArch = 0
	item.FieldsMask &^= 1 << 0
}
func (item *StatshouseGetTargets) IsSetBuildArch() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTargets) Reset() {
	item.FieldsMask = 0
	item.ShardReplica = 0
	item.ShardReplicaTotal = 0
	item.HostName = ""
	item.SourceEnv = 0
	item.BuildArch = 0
	item.OldHash = ""
}

func (item *StatshouseGetTargets) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplica); err != nil {
			return w, err
		}
	} else {
		item.ShardReplica = 0
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplicaTotal); err != nil {
			return w, err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if w, err = basictl.StringRead(w, &item.HostName); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.SourceEnv); err != nil {
			return w, err
		}
	} else {
		item.SourceEnv = 0
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildArch); err != nil {
			return w, err
		}
	} else {
		item.BuildArch = 0
	}
	return basictl.StringRead(w, &item.OldHash)
}

func (item *StatshouseGetTargets) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplica)
	}
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplicaTotal)
	}
	if w, err = basictl.StringWrite(w, item.HostName); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.SourceEnv)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.BuildArch)
	}
	return basictl.StringWrite(w, item.OldHash)
}

func (item *StatshouseGetTargets) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x51df72a3); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTargets) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x51df72a3)
	return item.Write(w)
}

func (item *StatshouseGetTargets) ReadResult(w []byte, ret *StatshouseGetTargetsResult) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetTargets) WriteResult(w []byte, ret StatshouseGetTargetsResult) (_ []byte, err error) {
	return ret.WriteBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetTargets) ReadResultJSON(j interface{}, ret *StatshouseGetTargetsResult) error {
	if err := StatshouseGetTargetsResult__ReadJSON(ret, j, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTargets) WriteResultJSON(w []byte, ret StatshouseGetTargetsResult) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseGetTargets) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTargetsResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTargets) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.getTargets", err.Error())
	}
	var ret StatshouseGetTargetsResult
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTargets) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetTargets__ReadJSON(item *StatshouseGetTargets, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetTargets) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getTargets", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jShardReplica := _jm["shard_replica"]
	delete(_jm, "shard_replica")
	_jShardReplicaTotal := _jm["shard_replica_total"]
	delete(_jm, "shard_replica_total")
	_jIngressProxy := _jm["ingress_proxy"]
	delete(_jm, "ingress_proxy")
	_jHostName := _jm["host_name"]
	delete(_jm, "host_name")
	if err := JsonReadString(_jHostName, &item.HostName); err != nil {
		return err
	}
	_jSourceEnv := _jm["source_env"]
	delete(_jm, "source_env")
	_jBuildArch := _jm["build_arch"]
	delete(_jm, "build_arch")
	_jOldHash := _jm["old_hash"]
	delete(_jm, "old_hash")
	if err := JsonReadString(_jOldHash, &item.OldHash); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getTargets", k)
	}
	if _jShardReplica != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jShardReplicaTotal != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jIngressProxy != nil {
		_bit := false
		if err := JsonReadBool(_jIngressProxy, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 6
		} else {
			item.FieldsMask &^= 1 << 6
		}
	}
	if _jSourceEnv != nil {
		item.FieldsMask |= 1 << 0
	}
	if _jBuildArch != nil {
		item.FieldsMask |= 1 << 0
	}
	if _jShardReplica != nil {
		if err := JsonReadInt32(_jShardReplica, &item.ShardReplica); err != nil {
			return err
		}
	} else {
		item.ShardReplica = 0
	}
	if _jShardReplicaTotal != nil {
		if err := JsonReadInt32(_jShardReplicaTotal, &item.ShardReplicaTotal); err != nil {
			return err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if _jSourceEnv != nil {
		if err := JsonReadInt32(_jSourceEnv, &item.SourceEnv); err != nil {
			return err
		}
	} else {
		item.SourceEnv = 0
	}
	if _jBuildArch != nil {
		if err := JsonReadInt32(_jBuildArch, &item.BuildArch); err != nil {
			return err
		}
	} else {
		item.BuildArch = 0
	}
	return nil
}

func (item *StatshouseGetTargets) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplica != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplica)
		}
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplicaTotal != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica_total":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplicaTotal)
		}
	}
	if item.FieldsMask&(1<<6) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ingress_proxy":true`...)
	}
	if len(item.HostName) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"host_name":`...)
		w = basictl.JSONWriteString(w, item.HostName)
	}
	if item.FieldsMask&(1<<0) != 0 {
		if item.SourceEnv != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"source_env":`...)
			w = basictl.JSONWriteInt32(w, item.SourceEnv)
		}
	}
	if item.FieldsMask&(1<<0) != 0 {
		if item.BuildArch != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_arch":`...)
			w = basictl.JSONWriteInt32(w, item.BuildArch)
		}
	}
	if len(item.OldHash) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"old_hash":`...)
		w = basictl.JSONWriteString(w, item.OldHash)
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTargets) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTargets) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getTargets", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getTargets", err.Error())
	}
	return nil
}

var _ = True{}

type StatshouseGetTargetsBytes struct {
	FieldsMask        uint32
	ShardReplica      int32 // Conditional: item.FieldsMask.5
	ShardReplicaTotal int32 // Conditional: item.FieldsMask.5
	// IngressProxy True // Conditional: item.FieldsMask.6
	HostName  []byte
	SourceEnv int32 // Conditional: item.FieldsMask.0
	BuildArch int32 // Conditional: item.FieldsMask.0
	OldHash   []byte
}

func (StatshouseGetTargetsBytes) TLName() string { return "statshouse.getTargets" }
func (StatshouseGetTargetsBytes) TLTag() uint32  { return 0x51df72a3 }

func (item *StatshouseGetTargetsBytes) SetShardReplica(v int32) {
	item.ShardReplica = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseGetTargetsBytes) ClearShardReplica() {
	item.ShardReplica = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseGetTargetsBytes) IsSetShardReplica() bool { return item.FieldsMask&(1<<5) != 0 }

func (item *StatshouseGetTargetsBytes) SetShardReplicaTotal(v int32) {
	item.ShardReplicaTotal = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseGetTargetsBytes) ClearShardReplicaTotal() {
	item.ShardReplicaTotal = 0
	item.FieldsMask &^= 1 << 5
}
func (item *StatshouseGetTargetsBytes) IsSetShardReplicaTotal() bool {
	return item.FieldsMask&(1<<5) != 0
}

func (item *StatshouseGetTargetsBytes) SetIngressProxy(v bool) {
	if v {
		item.FieldsMask |= 1 << 6
	} else {
		item.FieldsMask &^= 1 << 6
	}
}
func (item *StatshouseGetTargetsBytes) IsSetIngressProxy() bool { return item.FieldsMask&(1<<6) != 0 }

func (item *StatshouseGetTargetsBytes) SetSourceEnv(v int32) {
	item.SourceEnv = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseGetTargetsBytes) ClearSourceEnv() {
	item.SourceEnv = 0
	item.FieldsMask &^= 1 << 0
}
func (item *StatshouseGetTargetsBytes) IsSetSourceEnv() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTargetsBytes) SetBuildArch(v int32) {
	item.BuildArch = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseGetTargetsBytes) ClearBuildArch() {
	item.BuildArch = 0
	item.FieldsMask &^= 1 << 0
}
func (item *StatshouseGetTargetsBytes) IsSetBuildArch() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTargetsBytes) Reset() {
	item.FieldsMask = 0
	item.ShardReplica = 0
	item.ShardReplicaTotal = 0
	item.HostName = item.HostName[:0]
	item.SourceEnv = 0
	item.BuildArch = 0
	item.OldHash = item.OldHash[:0]
}

func (item *StatshouseGetTargetsBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplica); err != nil {
			return w, err
		}
	} else {
		item.ShardReplica = 0
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.IntRead(w, &item.ShardReplicaTotal); err != nil {
			return w, err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if w, err = basictl.StringReadBytes(w, &item.HostName); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.SourceEnv); err != nil {
			return w, err
		}
	} else {
		item.SourceEnv = 0
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildArch); err != nil {
			return w, err
		}
	} else {
		item.BuildArch = 0
	}
	return basictl.StringReadBytes(w, &item.OldHash)
}

func (item *StatshouseGetTargetsBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplica)
	}
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.IntWrite(w, item.ShardReplicaTotal)
	}
	if w, err = basictl.StringWriteBytes(w, item.HostName); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.SourceEnv)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.BuildArch)
	}
	return basictl.StringWriteBytes(w, item.OldHash)
}

func (item *StatshouseGetTargetsBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x51df72a3); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTargetsBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x51df72a3)
	return item.Write(w)
}

func (item *StatshouseGetTargetsBytes) ReadResult(w []byte, ret *StatshouseGetTargetsResultBytes) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetTargetsBytes) WriteResult(w []byte, ret StatshouseGetTargetsResultBytes) (_ []byte, err error) {
	return ret.WriteBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetTargetsBytes) ReadResultJSON(j interface{}, ret *StatshouseGetTargetsResultBytes) error {
	if err := StatshouseGetTargetsResultBytes__ReadJSON(ret, j, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTargetsBytes) WriteResultJSON(w []byte, ret StatshouseGetTargetsResultBytes) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseGetTargetsBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTargetsResultBytes
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTargetsBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.getTargets", err.Error())
	}
	var ret StatshouseGetTargetsResultBytes
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTargetsBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetTargetsBytes__ReadJSON(item *StatshouseGetTargetsBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetTargetsBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getTargets", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jShardReplica := _jm["shard_replica"]
	delete(_jm, "shard_replica")
	_jShardReplicaTotal := _jm["shard_replica_total"]
	delete(_jm, "shard_replica_total")
	_jIngressProxy := _jm["ingress_proxy"]
	delete(_jm, "ingress_proxy")
	_jHostName := _jm["host_name"]
	delete(_jm, "host_name")
	if err := JsonReadStringBytes(_jHostName, &item.HostName); err != nil {
		return err
	}
	_jSourceEnv := _jm["source_env"]
	delete(_jm, "source_env")
	_jBuildArch := _jm["build_arch"]
	delete(_jm, "build_arch")
	_jOldHash := _jm["old_hash"]
	delete(_jm, "old_hash")
	if err := JsonReadStringBytes(_jOldHash, &item.OldHash); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getTargets", k)
	}
	if _jShardReplica != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jShardReplicaTotal != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jIngressProxy != nil {
		_bit := false
		if err := JsonReadBool(_jIngressProxy, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 6
		} else {
			item.FieldsMask &^= 1 << 6
		}
	}
	if _jSourceEnv != nil {
		item.FieldsMask |= 1 << 0
	}
	if _jBuildArch != nil {
		item.FieldsMask |= 1 << 0
	}
	if _jShardReplica != nil {
		if err := JsonReadInt32(_jShardReplica, &item.ShardReplica); err != nil {
			return err
		}
	} else {
		item.ShardReplica = 0
	}
	if _jShardReplicaTotal != nil {
		if err := JsonReadInt32(_jShardReplicaTotal, &item.ShardReplicaTotal); err != nil {
			return err
		}
	} else {
		item.ShardReplicaTotal = 0
	}
	if _jSourceEnv != nil {
		if err := JsonReadInt32(_jSourceEnv, &item.SourceEnv); err != nil {
			return err
		}
	} else {
		item.SourceEnv = 0
	}
	if _jBuildArch != nil {
		if err := JsonReadInt32(_jBuildArch, &item.BuildArch); err != nil {
			return err
		}
	} else {
		item.BuildArch = 0
	}
	return nil
}

func (item *StatshouseGetTargetsBytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplica != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplica)
		}
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.ShardReplicaTotal != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"shard_replica_total":`...)
			w = basictl.JSONWriteInt32(w, item.ShardReplicaTotal)
		}
	}
	if item.FieldsMask&(1<<6) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ingress_proxy":true`...)
	}
	if len(item.HostName) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"host_name":`...)
		w = basictl.JSONWriteStringBytes(w, item.HostName)
	}
	if item.FieldsMask&(1<<0) != 0 {
		if item.SourceEnv != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"source_env":`...)
			w = basictl.JSONWriteInt32(w, item.SourceEnv)
		}
	}
	if item.FieldsMask&(1<<0) != 0 {
		if item.BuildArch != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_arch":`...)
			w = basictl.JSONWriteInt32(w, item.BuildArch)
		}
	}
	if len(item.OldHash) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"old_hash":`...)
		w = basictl.JSONWriteStringBytes(w, item.OldHash)
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTargetsBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTargetsBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getTargets", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getTargets", err.Error())
	}
	return nil
}
