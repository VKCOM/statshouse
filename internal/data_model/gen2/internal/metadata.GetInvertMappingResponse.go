// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

var _MetadataGetInvertMappingResponse = [2]UnionElement{
	{TLTag: 0x9286abac, TLName: "metadata.getInvertMappingResponse", TLString: "metadata.getInvertMappingResponse#9286abac"},
	{TLTag: 0x9286abab, TLName: "metadata.getInvertMappingResponseKeyNotExists", TLString: "metadata.getInvertMappingResponseKeyNotExists#9286abab"},
}

type MetadataGetInvertMappingResponse struct {
	valueGetInvertMappingResponse MetadataGetInvertMappingResponse0
	index                         int
}

func (item MetadataGetInvertMappingResponse) TLName() string {
	return _MetadataGetInvertMappingResponse[item.index].TLName
}
func (item MetadataGetInvertMappingResponse) TLTag() uint32 {
	return _MetadataGetInvertMappingResponse[item.index].TLTag
}

func (item *MetadataGetInvertMappingResponse) Reset() { item.ResetToGetInvertMappingResponse() }

func (item *MetadataGetInvertMappingResponse) IsGetInvertMappingResponse() bool {
	return item.index == 0
}

func (item *MetadataGetInvertMappingResponse) AsGetInvertMappingResponse() (*MetadataGetInvertMappingResponse0, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueGetInvertMappingResponse, true
}
func (item *MetadataGetInvertMappingResponse) ResetToGetInvertMappingResponse() *MetadataGetInvertMappingResponse0 {
	item.index = 0
	item.valueGetInvertMappingResponse.Reset()
	return &item.valueGetInvertMappingResponse
}
func (item *MetadataGetInvertMappingResponse) SetGetInvertMappingResponse(value MetadataGetInvertMappingResponse0) {
	item.index = 0
	item.valueGetInvertMappingResponse = value
}

func (item *MetadataGetInvertMappingResponse) IsKeyNotExists() bool { return item.index == 1 }

func (item *MetadataGetInvertMappingResponse) AsKeyNotExists() (MetadataGetInvertMappingResponseKeyNotExists, bool) {
	var value MetadataGetInvertMappingResponseKeyNotExists
	return value, item.index == 1
}
func (item *MetadataGetInvertMappingResponse) ResetToKeyNotExists() { item.index = 1 }
func (item *MetadataGetInvertMappingResponse) SetKeyNotExists()     { item.index = 1 }

func (item *MetadataGetInvertMappingResponse) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x9286abac:
		item.index = 0
		return item.valueGetInvertMappingResponse.Read(w, nat_field_mask)
	case 0x9286abab:
		item.index = 1
		return w, nil
	default:
		return w, ErrorInvalidUnionTag("metadata.GetInvertMappingResponse", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *MetadataGetInvertMappingResponse) WriteBoxedGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_field_mask), nil
}

func (item *MetadataGetInvertMappingResponse) WriteBoxed(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, _MetadataGetInvertMappingResponse[item.index].TLTag)
	switch item.index {
	case 0:
		w = item.valueGetInvertMappingResponse.Write(w, nat_field_mask)
	case 1:
		return w
	}
	return w
}

func (item *MetadataGetInvertMappingResponse) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_field_mask uint32) error {
	_tag, _value, err := Json2ReadUnion("metadata.GetInvertMappingResponse", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "metadata.getInvertMappingResponse#9286abac", "metadata.getInvertMappingResponse", "#9286abac":
		if !legacyTypeNames && _tag == "metadata.getInvertMappingResponse#9286abac" {
			return ErrorInvalidUnionLegacyTagJSON("metadata.GetInvertMappingResponse", "metadata.getInvertMappingResponse#9286abac")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueGetInvertMappingResponse.ReadJSON(legacyTypeNames, in2Pointer, nat_field_mask); err != nil {
			return err
		}
	case "metadata.getInvertMappingResponseKeyNotExists#9286abab", "metadata.getInvertMappingResponseKeyNotExists", "#9286abab":
		if !legacyTypeNames && _tag == "metadata.getInvertMappingResponseKeyNotExists#9286abab" {
			return ErrorInvalidUnionLegacyTagJSON("metadata.GetInvertMappingResponse", "metadata.getInvertMappingResponseKeyNotExists#9286abab")
		}
		item.index = 1
	default:
		return ErrorInvalidUnionTagJSON("metadata.GetInvertMappingResponse", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataGetInvertMappingResponse) WriteJSONGeneral(w []byte, nat_field_mask uint32) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w, nat_field_mask), nil
}

func (item *MetadataGetInvertMappingResponse) WriteJSON(w []byte, nat_field_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_field_mask)
}
func (item *MetadataGetInvertMappingResponse) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_field_mask uint32) []byte {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"metadata.getInvertMappingResponse"`...)
		} else {
			w = append(w, `{"type":"metadata.getInvertMappingResponse#9286abac"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueGetInvertMappingResponse.WriteJSONOpt(newTypeNames, short, w, nat_field_mask)
		return append(w, '}')
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"metadata.getInvertMappingResponseKeyNotExists"`...)
		} else {
			w = append(w, `{"type":"metadata.getInvertMappingResponseKeyNotExists#9286abab"`...)
		}
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item MetadataGetInvertMappingResponse0) AsUnion() MetadataGetInvertMappingResponse {
	var ret MetadataGetInvertMappingResponse
	ret.SetGetInvertMappingResponse(item)
	return ret
}

type MetadataGetInvertMappingResponse0 struct {
	Key string
}

func (MetadataGetInvertMappingResponse0) TLName() string { return "metadata.getInvertMappingResponse" }
func (MetadataGetInvertMappingResponse0) TLTag() uint32  { return 0x9286abac }

func (item *MetadataGetInvertMappingResponse0) Reset() {
	item.Key = ""
}

func (item *MetadataGetInvertMappingResponse0) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return basictl.StringRead(w, &item.Key)
}

// This method is general version of Write, use it instead!
func (item *MetadataGetInvertMappingResponse0) WriteGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_field_mask), nil
}

func (item *MetadataGetInvertMappingResponse0) Write(w []byte, nat_field_mask uint32) []byte {
	w = basictl.StringWrite(w, item.Key)
	return w
}

func (item *MetadataGetInvertMappingResponse0) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abac); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MetadataGetInvertMappingResponse0) WriteBoxedGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_field_mask), nil
}

func (item *MetadataGetInvertMappingResponse0) WriteBoxed(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x9286abac)
	return item.Write(w, nat_field_mask)
}

func (item *MetadataGetInvertMappingResponse0) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_field_mask uint32) error {
	var propKeyPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getInvertMappingResponse", "key")
				}
				if err := Json2ReadString(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			default:
				return ErrorInvalidJSONExcessElement("metadata.getInvertMappingResponse", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataGetInvertMappingResponse0) WriteJSONGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_field_mask), nil
}

func (item *MetadataGetInvertMappingResponse0) WriteJSON(w []byte, nat_field_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_field_mask)
}
func (item *MetadataGetInvertMappingResponse0) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_field_mask uint32) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteString(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	return append(w, '}')
}

func (item MetadataGetInvertMappingResponseKeyNotExists) AsUnion() MetadataGetInvertMappingResponse {
	var ret MetadataGetInvertMappingResponse
	ret.SetKeyNotExists()
	return ret
}

type MetadataGetInvertMappingResponseKeyNotExists struct {
}

func (MetadataGetInvertMappingResponseKeyNotExists) TLName() string {
	return "metadata.getInvertMappingResponseKeyNotExists"
}
func (MetadataGetInvertMappingResponseKeyNotExists) TLTag() uint32 { return 0x9286abab }

func (item *MetadataGetInvertMappingResponseKeyNotExists) Reset() {}

func (item *MetadataGetInvertMappingResponseKeyNotExists) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *MetadataGetInvertMappingResponseKeyNotExists) WriteGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_field_mask), nil
}

func (item *MetadataGetInvertMappingResponseKeyNotExists) Write(w []byte, nat_field_mask uint32) []byte {
	return w
}

func (item *MetadataGetInvertMappingResponseKeyNotExists) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abab); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MetadataGetInvertMappingResponseKeyNotExists) WriteBoxedGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_field_mask), nil
}

func (item *MetadataGetInvertMappingResponseKeyNotExists) WriteBoxed(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x9286abab)
	return item.Write(w, nat_field_mask)
}

func (item *MetadataGetInvertMappingResponseKeyNotExists) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_field_mask uint32) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return ErrorInvalidJSON("metadata.getInvertMappingResponseKeyNotExists", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataGetInvertMappingResponseKeyNotExists) WriteJSONGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_field_mask), nil
}

func (item *MetadataGetInvertMappingResponseKeyNotExists) WriteJSON(w []byte, nat_field_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_field_mask)
}
func (item *MetadataGetInvertMappingResponseKeyNotExists) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_field_mask uint32) []byte {
	w = append(w, '{')
	return append(w, '}')
}
