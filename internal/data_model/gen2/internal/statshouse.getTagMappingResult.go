// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseGetTagMappingResult struct {
	Value      int32
	TtlNanosec int64
}

func (StatshouseGetTagMappingResult) TLName() string { return "statshouse.getTagMappingResult" }
func (StatshouseGetTagMappingResult) TLTag() uint32  { return 0x1a7d91fd }

func (item *StatshouseGetTagMappingResult) Reset() {
	item.Value = 0
	item.TtlNanosec = 0
}

func (item *StatshouseGetTagMappingResult) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Value); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.TtlNanosec)
}

func (item *StatshouseGetTagMappingResult) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Value)
	return basictl.LongWrite(w, item.TtlNanosec), nil
}

func (item *StatshouseGetTagMappingResult) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1a7d91fd); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTagMappingResult) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1a7d91fd)
	return item.Write(w)
}

func (item StatshouseGetTagMappingResult) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *StatshouseGetTagMappingResult) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propValuePresented bool
	var propTtlNanosecPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMappingResult", "value")
				}
				if err := Json2ReadInt32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			case "ttl_nanosec":
				if propTtlNanosecPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMappingResult", "ttl_nanosec")
				}
				if err := Json2ReadInt64(in, &item.TtlNanosec); err != nil {
					return err
				}
				propTtlNanosecPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.getTagMappingResult", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propValuePresented {
		item.Value = 0
	}
	if !propTtlNanosecPresented {
		item.TtlNanosec = 0
	}
	return nil
}

func (item *StatshouseGetTagMappingResult) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseGetTagMappingResult) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	backupIndexTtlNanosec := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"ttl_nanosec":`...)
	w = basictl.JSONWriteInt64(w, item.TtlNanosec)
	if (item.TtlNanosec != 0) == false {
		w = w[:backupIndexTtlNanosec]
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTagMappingResult) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTagMappingResult) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMappingResult", err.Error())
	}
	return nil
}
