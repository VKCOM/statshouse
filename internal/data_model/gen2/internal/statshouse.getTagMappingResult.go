// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseGetTagMappingResult struct {
	Value      int32
	TtlNanosec int64
}

func (StatshouseGetTagMappingResult) TLName() string { return "statshouse.getTagMappingResult" }
func (StatshouseGetTagMappingResult) TLTag() uint32  { return 0x1a7d91fd }

func (item *StatshouseGetTagMappingResult) Reset() {
	item.Value = 0
	item.TtlNanosec = 0
}

func (item *StatshouseGetTagMappingResult) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Value); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.TtlNanosec)
}

func (item *StatshouseGetTagMappingResult) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Value)
	return basictl.LongWrite(w, item.TtlNanosec), nil
}

func (item *StatshouseGetTagMappingResult) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1a7d91fd); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTagMappingResult) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1a7d91fd)
	return item.Write(w)
}

func (item StatshouseGetTagMappingResult) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetTagMappingResult__ReadJSON(item *StatshouseGetTagMappingResult, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetTagMappingResult) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getTagMappingResult", "expected json object")
	}
	_jValue := _jm["value"]
	delete(_jm, "value")
	if err := JsonReadInt32(_jValue, &item.Value); err != nil {
		return err
	}
	_jTtlNanosec := _jm["ttl_nanosec"]
	delete(_jm, "ttl_nanosec")
	if err := JsonReadInt64(_jTtlNanosec, &item.TtlNanosec); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getTagMappingResult", k)
	}
	return nil
}

func (item *StatshouseGetTagMappingResult) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.Value != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"value":`...)
		w = basictl.JSONWriteInt32(w, item.Value)
	}
	if item.TtlNanosec != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ttl_nanosec":`...)
		w = basictl.JSONWriteInt64(w, item.TtlNanosec)
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTagMappingResult) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTagMappingResult) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getTagMappingResult", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMappingResult", err.Error())
	}
	return nil
}
