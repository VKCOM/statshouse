// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EngineReplaceConfigServer struct {
	ClusterName  string
	ServerOffset int32
	Host         string
	Port         int32
}

func (EngineReplaceConfigServer) TLName() string { return "engine.replaceConfigServer" }
func (EngineReplaceConfigServer) TLTag() uint32  { return 0x5fcd8e77 }

func (item *EngineReplaceConfigServer) Reset() {
	item.ClusterName = ""
	item.ServerOffset = 0
	item.Host = ""
	item.Port = 0
}

func (item *EngineReplaceConfigServer) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.ClusterName); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.ServerOffset); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Host); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Port)
}

func (item *EngineReplaceConfigServer) Write(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringWrite(w, item.ClusterName); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.ServerOffset)
	if w, err = basictl.StringWrite(w, item.Host); err != nil {
		return w, err
	}
	return basictl.IntWrite(w, item.Port), nil
}

func (item *EngineReplaceConfigServer) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5fcd8e77); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *EngineReplaceConfigServer) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x5fcd8e77)
	return item.Write(w)
}

func (item *EngineReplaceConfigServer) ReadResult(w []byte, ret *True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *EngineReplaceConfigServer) WriteResult(w []byte, ret True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *EngineReplaceConfigServer) ReadResultJSON(j interface{}, ret *True) error {
	if err := True__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *EngineReplaceConfigServer) WriteResultJSON(w []byte, ret True) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *EngineReplaceConfigServer) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *EngineReplaceConfigServer) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("engine.replaceConfigServer", err.Error())
	}
	var ret True
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item EngineReplaceConfigServer) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func EngineReplaceConfigServer__ReadJSON(item *EngineReplaceConfigServer, j interface{}) error {
	return item.readJSON(j)
}
func (item *EngineReplaceConfigServer) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("engine.replaceConfigServer", "expected json object")
	}
	_jClusterName := _jm["cluster_name"]
	delete(_jm, "cluster_name")
	if err := JsonReadString(_jClusterName, &item.ClusterName); err != nil {
		return err
	}
	_jServerOffset := _jm["server_offset"]
	delete(_jm, "server_offset")
	if err := JsonReadInt32(_jServerOffset, &item.ServerOffset); err != nil {
		return err
	}
	_jHost := _jm["host"]
	delete(_jm, "host")
	if err := JsonReadString(_jHost, &item.Host); err != nil {
		return err
	}
	_jPort := _jm["port"]
	delete(_jm, "port")
	if err := JsonReadInt32(_jPort, &item.Port); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("engine.replaceConfigServer", k)
	}
	return nil
}

func (item *EngineReplaceConfigServer) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.ClusterName) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"cluster_name":`...)
		w = basictl.JSONWriteString(w, item.ClusterName)
	}
	if item.ServerOffset != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"server_offset":`...)
		w = basictl.JSONWriteInt32(w, item.ServerOffset)
	}
	if len(item.Host) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"host":`...)
		w = basictl.JSONWriteString(w, item.Host)
	}
	if item.Port != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"port":`...)
		w = basictl.JSONWriteInt32(w, item.Port)
	}
	return append(w, '}'), nil
}

func (item *EngineReplaceConfigServer) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *EngineReplaceConfigServer) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("engine.replaceConfigServer", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("engine.replaceConfigServer", err.Error())
	}
	return nil
}
