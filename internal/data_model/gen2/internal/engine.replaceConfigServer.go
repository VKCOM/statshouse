// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EngineReplaceConfigServer struct {
	ClusterName  string
	ServerOffset int32
	Host         string
	Port         int32
}

func (EngineReplaceConfigServer) TLName() string { return "engine.replaceConfigServer" }
func (EngineReplaceConfigServer) TLTag() uint32  { return 0x5fcd8e77 }

func (item *EngineReplaceConfigServer) Reset() {
	item.ClusterName = ""
	item.ServerOffset = 0
	item.Host = ""
	item.Port = 0
}

func (item *EngineReplaceConfigServer) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.ClusterName); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.ServerOffset); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Host); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Port)
}

// This method is general version of Write, use it instead!
func (item *EngineReplaceConfigServer) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *EngineReplaceConfigServer) Write(w []byte) []byte {
	w = basictl.StringWrite(w, item.ClusterName)
	w = basictl.IntWrite(w, item.ServerOffset)
	w = basictl.StringWrite(w, item.Host)
	w = basictl.IntWrite(w, item.Port)
	return w
}

func (item *EngineReplaceConfigServer) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5fcd8e77); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *EngineReplaceConfigServer) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *EngineReplaceConfigServer) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x5fcd8e77)
	return item.Write(w)
}

func (item *EngineReplaceConfigServer) ReadResult(w []byte, ret *True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *EngineReplaceConfigServer) WriteResult(w []byte, ret True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *EngineReplaceConfigServer) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *EngineReplaceConfigServer) WriteResultJSON(w []byte, ret True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *EngineReplaceConfigServer) writeResultJSON(newTypeNames bool, short bool, w []byte, ret True) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *EngineReplaceConfigServer) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *EngineReplaceConfigServer) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *EngineReplaceConfigServer) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item EngineReplaceConfigServer) String() string {
	return string(item.WriteJSON(nil))
}

func (item *EngineReplaceConfigServer) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propClusterNamePresented bool
	var propServerOffsetPresented bool
	var propHostPresented bool
	var propPortPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "cluster_name":
				if propClusterNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.replaceConfigServer", "cluster_name")
				}
				if err := Json2ReadString(in, &item.ClusterName); err != nil {
					return err
				}
				propClusterNamePresented = true
			case "server_offset":
				if propServerOffsetPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.replaceConfigServer", "server_offset")
				}
				if err := Json2ReadInt32(in, &item.ServerOffset); err != nil {
					return err
				}
				propServerOffsetPresented = true
			case "host":
				if propHostPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.replaceConfigServer", "host")
				}
				if err := Json2ReadString(in, &item.Host); err != nil {
					return err
				}
				propHostPresented = true
			case "port":
				if propPortPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.replaceConfigServer", "port")
				}
				if err := Json2ReadInt32(in, &item.Port); err != nil {
					return err
				}
				propPortPresented = true
			default:
				return ErrorInvalidJSONExcessElement("engine.replaceConfigServer", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propClusterNamePresented {
		item.ClusterName = ""
	}
	if !propServerOffsetPresented {
		item.ServerOffset = 0
	}
	if !propHostPresented {
		item.Host = ""
	}
	if !propPortPresented {
		item.Port = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *EngineReplaceConfigServer) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *EngineReplaceConfigServer) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *EngineReplaceConfigServer) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexClusterName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"cluster_name":`...)
	w = basictl.JSONWriteString(w, item.ClusterName)
	if (len(item.ClusterName) != 0) == false {
		w = w[:backupIndexClusterName]
	}
	backupIndexServerOffset := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"server_offset":`...)
	w = basictl.JSONWriteInt32(w, item.ServerOffset)
	if (item.ServerOffset != 0) == false {
		w = w[:backupIndexServerOffset]
	}
	backupIndexHost := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"host":`...)
	w = basictl.JSONWriteString(w, item.Host)
	if (len(item.Host) != 0) == false {
		w = w[:backupIndexHost]
	}
	backupIndexPort := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"port":`...)
	w = basictl.JSONWriteInt32(w, item.Port)
	if (item.Port != 0) == false {
		w = w[:backupIndexPort]
	}
	return append(w, '}')
}

func (item *EngineReplaceConfigServer) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *EngineReplaceConfigServer) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("engine.replaceConfigServer", err.Error())
	}
	return nil
}
