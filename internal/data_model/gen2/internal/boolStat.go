// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type BoolStat struct {
	StatTrue    int32
	StatFalse   int32
	StatUnknown int32
}

func (BoolStat) TLName() string { return "boolStat" }
func (BoolStat) TLTag() uint32  { return 0x92cbcbfa }

func (item *BoolStat) Reset() {
	item.StatTrue = 0
	item.StatFalse = 0
	item.StatUnknown = 0
}

func (item *BoolStat) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.StatTrue); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.StatFalse); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.StatUnknown)
}

func (item *BoolStat) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.StatTrue)
	w = basictl.IntWrite(w, item.StatFalse)
	return basictl.IntWrite(w, item.StatUnknown), nil
}

func (item *BoolStat) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x92cbcbfa); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *BoolStat) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x92cbcbfa)
	return item.Write(w)
}

func (item BoolStat) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func BoolStat__ReadJSON(item *BoolStat, j interface{}) error { return item.readJSON(j) }
func (item *BoolStat) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("boolStat", "expected json object")
	}
	_jStatTrue := _jm["statTrue"]
	delete(_jm, "statTrue")
	if err := JsonReadInt32(_jStatTrue, &item.StatTrue); err != nil {
		return err
	}
	_jStatFalse := _jm["statFalse"]
	delete(_jm, "statFalse")
	if err := JsonReadInt32(_jStatFalse, &item.StatFalse); err != nil {
		return err
	}
	_jStatUnknown := _jm["statUnknown"]
	delete(_jm, "statUnknown")
	if err := JsonReadInt32(_jStatUnknown, &item.StatUnknown); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("boolStat", k)
	}
	return nil
}

func (item *BoolStat) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.StatTrue != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"statTrue":`...)
		w = basictl.JSONWriteInt32(w, item.StatTrue)
	}
	if item.StatFalse != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"statFalse":`...)
		w = basictl.JSONWriteInt32(w, item.StatFalse)
	}
	if item.StatUnknown != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"statUnknown":`...)
		w = basictl.JSONWriteInt32(w, item.StatUnknown)
	}
	return append(w, '}'), nil
}

func (item *BoolStat) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *BoolStat) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("boolStat", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("boolStat", err.Error())
	}
	return nil
}
