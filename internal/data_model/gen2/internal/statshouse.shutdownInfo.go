// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseShutdownInfo struct {
	StartShutdownTime  int64
	FinishShutdownTime int64
	StopRecentSenders  int64
	StopReceivers      int64
	StopFlusher        int64
	StopFlushing       int64
	StopPreprocessor   int64
	Other              [8]int64
}

func (StatshouseShutdownInfo) TLName() string { return "statshouse.shutdownInfo" }
func (StatshouseShutdownInfo) TLTag() uint32  { return 0x4124cf9c }

func (item *StatshouseShutdownInfo) Reset() {
	item.StartShutdownTime = 0
	item.FinishShutdownTime = 0
	item.StopRecentSenders = 0
	item.StopReceivers = 0
	item.StopFlusher = 0
	item.StopFlushing = 0
	item.StopPreprocessor = 0
	BuiltinTuple8LongReset(&item.Other)
}

func (item *StatshouseShutdownInfo) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.StartShutdownTime); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.FinishShutdownTime); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.StopRecentSenders); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.StopReceivers); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.StopFlusher); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.StopFlushing); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.StopPreprocessor); err != nil {
		return w, err
	}
	return BuiltinTuple8LongRead(w, &item.Other)
}

// This method is general version of Write, use it instead!
func (item *StatshouseShutdownInfo) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseShutdownInfo) Write(w []byte) []byte {
	w = basictl.LongWrite(w, item.StartShutdownTime)
	w = basictl.LongWrite(w, item.FinishShutdownTime)
	w = basictl.LongWrite(w, item.StopRecentSenders)
	w = basictl.LongWrite(w, item.StopReceivers)
	w = basictl.LongWrite(w, item.StopFlusher)
	w = basictl.LongWrite(w, item.StopFlushing)
	w = basictl.LongWrite(w, item.StopPreprocessor)
	w = BuiltinTuple8LongWrite(w, &item.Other)
	return w
}

func (item *StatshouseShutdownInfo) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4124cf9c); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseShutdownInfo) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseShutdownInfo) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x4124cf9c)
	return item.Write(w)
}

func (item StatshouseShutdownInfo) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseShutdownInfo) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propStartShutdownTimePresented bool
	var propFinishShutdownTimePresented bool
	var propStopRecentSendersPresented bool
	var propStopReceiversPresented bool
	var propStopFlusherPresented bool
	var propStopFlushingPresented bool
	var propStopPreprocessorPresented bool
	var propOtherPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "startShutdownTime":
				if propStartShutdownTimePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.shutdownInfo", "startShutdownTime")
				}
				if err := Json2ReadInt64(in, &item.StartShutdownTime); err != nil {
					return err
				}
				propStartShutdownTimePresented = true
			case "finishShutdownTime":
				if propFinishShutdownTimePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.shutdownInfo", "finishShutdownTime")
				}
				if err := Json2ReadInt64(in, &item.FinishShutdownTime); err != nil {
					return err
				}
				propFinishShutdownTimePresented = true
			case "stopRecentSenders":
				if propStopRecentSendersPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.shutdownInfo", "stopRecentSenders")
				}
				if err := Json2ReadInt64(in, &item.StopRecentSenders); err != nil {
					return err
				}
				propStopRecentSendersPresented = true
			case "stopReceivers":
				if propStopReceiversPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.shutdownInfo", "stopReceivers")
				}
				if err := Json2ReadInt64(in, &item.StopReceivers); err != nil {
					return err
				}
				propStopReceiversPresented = true
			case "stopFlusher":
				if propStopFlusherPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.shutdownInfo", "stopFlusher")
				}
				if err := Json2ReadInt64(in, &item.StopFlusher); err != nil {
					return err
				}
				propStopFlusherPresented = true
			case "stopFlushing":
				if propStopFlushingPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.shutdownInfo", "stopFlushing")
				}
				if err := Json2ReadInt64(in, &item.StopFlushing); err != nil {
					return err
				}
				propStopFlushingPresented = true
			case "stopPreprocessor":
				if propStopPreprocessorPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.shutdownInfo", "stopPreprocessor")
				}
				if err := Json2ReadInt64(in, &item.StopPreprocessor); err != nil {
					return err
				}
				propStopPreprocessorPresented = true
			case "other":
				if propOtherPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.shutdownInfo", "other")
				}
				if err := BuiltinTuple8LongReadJSON(legacyTypeNames, in, &item.Other); err != nil {
					return err
				}
				propOtherPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.shutdownInfo", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propStartShutdownTimePresented {
		item.StartShutdownTime = 0
	}
	if !propFinishShutdownTimePresented {
		item.FinishShutdownTime = 0
	}
	if !propStopRecentSendersPresented {
		item.StopRecentSenders = 0
	}
	if !propStopReceiversPresented {
		item.StopReceivers = 0
	}
	if !propStopFlusherPresented {
		item.StopFlusher = 0
	}
	if !propStopFlushingPresented {
		item.StopFlushing = 0
	}
	if !propStopPreprocessorPresented {
		item.StopPreprocessor = 0
	}
	if !propOtherPresented {
		BuiltinTuple8LongReset(&item.Other)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseShutdownInfo) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseShutdownInfo) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseShutdownInfo) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexStartShutdownTime := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"startShutdownTime":`...)
	w = basictl.JSONWriteInt64(w, item.StartShutdownTime)
	if (item.StartShutdownTime != 0) == false {
		w = w[:backupIndexStartShutdownTime]
	}
	backupIndexFinishShutdownTime := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"finishShutdownTime":`...)
	w = basictl.JSONWriteInt64(w, item.FinishShutdownTime)
	if (item.FinishShutdownTime != 0) == false {
		w = w[:backupIndexFinishShutdownTime]
	}
	backupIndexStopRecentSenders := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"stopRecentSenders":`...)
	w = basictl.JSONWriteInt64(w, item.StopRecentSenders)
	if (item.StopRecentSenders != 0) == false {
		w = w[:backupIndexStopRecentSenders]
	}
	backupIndexStopReceivers := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"stopReceivers":`...)
	w = basictl.JSONWriteInt64(w, item.StopReceivers)
	if (item.StopReceivers != 0) == false {
		w = w[:backupIndexStopReceivers]
	}
	backupIndexStopFlusher := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"stopFlusher":`...)
	w = basictl.JSONWriteInt64(w, item.StopFlusher)
	if (item.StopFlusher != 0) == false {
		w = w[:backupIndexStopFlusher]
	}
	backupIndexStopFlushing := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"stopFlushing":`...)
	w = basictl.JSONWriteInt64(w, item.StopFlushing)
	if (item.StopFlushing != 0) == false {
		w = w[:backupIndexStopFlushing]
	}
	backupIndexStopPreprocessor := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"stopPreprocessor":`...)
	w = basictl.JSONWriteInt64(w, item.StopPreprocessor)
	if (item.StopPreprocessor != 0) == false {
		w = w[:backupIndexStopPreprocessor]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"other":`...)
	w = BuiltinTuple8LongWriteJSONOpt(newTypeNames, short, w, &item.Other)
	return append(w, '}')
}

func (item *StatshouseShutdownInfo) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseShutdownInfo) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.shutdownInfo", err.Error())
	}
	return nil
}
