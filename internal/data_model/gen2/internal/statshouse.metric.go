// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseMetric struct {
	FieldsMask uint32
	Name       string
	Tags       map[string]string
	Counter    float64   // Conditional: item.FieldsMask.0
	Ts         uint32    // Conditional: item.FieldsMask.4
	T          int64     // Conditional: item.FieldsMask.5
	Value      []float64 // Conditional: item.FieldsMask.1
	Unique     []int64   // Conditional: item.FieldsMask.2
}

func (StatshouseMetric) TLName() string { return "statshouse.metric" }
func (StatshouseMetric) TLTag() uint32  { return 0x3325d884 }

func (item *StatshouseMetric) SetCounter(v float64) {
	item.Counter = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseMetric) ClearCounter() {
	item.Counter = 0
	item.FieldsMask &^= 1 << 0
}
func (item StatshouseMetric) IsSetCounter() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseMetric) SetTs(v uint32) {
	item.Ts = v
	item.FieldsMask |= 1 << 4
}
func (item *StatshouseMetric) ClearTs() {
	item.Ts = 0
	item.FieldsMask &^= 1 << 4
}
func (item StatshouseMetric) IsSetTs() bool { return item.FieldsMask&(1<<4) != 0 }

func (item *StatshouseMetric) SetT(v int64) {
	item.T = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseMetric) ClearT() {
	item.T = 0
	item.FieldsMask &^= 1 << 5
}
func (item StatshouseMetric) IsSetT() bool { return item.FieldsMask&(1<<5) != 0 }

func (item *StatshouseMetric) SetValue(v []float64) {
	item.Value = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseMetric) ClearValue() {
	item.Value = item.Value[:0]
	item.FieldsMask &^= 1 << 1
}
func (item StatshouseMetric) IsSetValue() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseMetric) SetUnique(v []int64) {
	item.Unique = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseMetric) ClearUnique() {
	item.Unique = item.Unique[:0]
	item.FieldsMask &^= 1 << 2
}
func (item StatshouseMetric) IsSetUnique() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseMetric) Reset() {
	item.FieldsMask = 0
	item.Name = ""
	VectorDictionaryFieldString0Reset(item.Tags)
	item.Counter = 0
	item.Ts = 0
	item.T = 0
	item.Value = item.Value[:0]
	item.Unique = item.Unique[:0]
}

func (item *StatshouseMetric) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Name); err != nil {
		return w, err
	}
	if w, err = VectorDictionaryFieldString0Read(w, &item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.DoubleRead(w, &item.Counter); err != nil {
			return w, err
		}
	} else {
		item.Counter = 0
	}
	if item.FieldsMask&(1<<4) != 0 {
		if w, err = basictl.NatRead(w, &item.Ts); err != nil {
			return w, err
		}
	} else {
		item.Ts = 0
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.LongRead(w, &item.T); err != nil {
			return w, err
		}
	} else {
		item.T = 0
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = VectorDouble0Read(w, &item.Value); err != nil {
			return w, err
		}
	} else {
		item.Value = item.Value[:0]
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = VectorLong0Read(w, &item.Unique); err != nil {
			return w, err
		}
	} else {
		item.Unique = item.Unique[:0]
	}
	return w, nil
}

func (item *StatshouseMetric) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = basictl.StringWrite(w, item.Name); err != nil {
		return w, err
	}
	if w, err = VectorDictionaryFieldString0Write(w, item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.DoubleWrite(w, item.Counter)
	}
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.NatWrite(w, item.Ts)
	}
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.LongWrite(w, item.T)
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = VectorDouble0Write(w, item.Value); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = VectorLong0Write(w, item.Unique); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *StatshouseMetric) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3325d884); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseMetric) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x3325d884)
	return item.Write(w)
}

func (item StatshouseMetric) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseMetric__ReadJSON(item *StatshouseMetric, j interface{}) error { return item.readJSON(j) }
func (item *StatshouseMetric) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.metric", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jName := _jm["name"]
	delete(_jm, "name")
	if err := JsonReadString(_jName, &item.Name); err != nil {
		return err
	}
	_jTags := _jm["tags"]
	delete(_jm, "tags")
	_jCounter := _jm["counter"]
	delete(_jm, "counter")
	_jTs := _jm["ts"]
	delete(_jm, "ts")
	_jT := _jm["t"]
	delete(_jm, "t")
	_jValue := _jm["value"]
	delete(_jm, "value")
	_jUnique := _jm["unique"]
	delete(_jm, "unique")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.metric", k)
	}
	if _jCounter != nil {
		item.FieldsMask |= 1 << 0
	}
	if _jTs != nil {
		item.FieldsMask |= 1 << 4
	}
	if _jT != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jValue != nil {
		item.FieldsMask |= 1 << 1
	}
	if _jUnique != nil {
		item.FieldsMask |= 1 << 2
	}
	if err := VectorDictionaryFieldString0ReadJSON(_jTags, &item.Tags); err != nil {
		return err
	}
	if _jCounter != nil {
		if err := JsonReadFloat64(_jCounter, &item.Counter); err != nil {
			return err
		}
	} else {
		item.Counter = 0
	}
	if _jTs != nil {
		if err := JsonReadUint32(_jTs, &item.Ts); err != nil {
			return err
		}
	} else {
		item.Ts = 0
	}
	if _jT != nil {
		if err := JsonReadInt64(_jT, &item.T); err != nil {
			return err
		}
	} else {
		item.T = 0
	}
	if _jValue != nil {
		if err := VectorDouble0ReadJSON(_jValue, &item.Value); err != nil {
			return err
		}
	} else {
		item.Value = item.Value[:0]
	}
	if _jUnique != nil {
		if err := VectorLong0ReadJSON(_jUnique, &item.Unique); err != nil {
			return err
		}
	} else {
		item.Unique = item.Unique[:0]
	}
	return nil
}

func (item *StatshouseMetric) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.Name) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"name":`...)
		w = basictl.JSONWriteString(w, item.Name)
	}
	if len(item.Tags) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"tags":`...)
		if w, err = VectorDictionaryFieldString0WriteJSON(w, item.Tags); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<0) != 0 {
		if item.Counter != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"counter":`...)
			w = basictl.JSONWriteFloat64(w, item.Counter)
		}
	}
	if item.FieldsMask&(1<<4) != 0 {
		if item.Ts != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"ts":`...)
			w = basictl.JSONWriteUint32(w, item.Ts)
		}
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.T != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"t":`...)
			w = basictl.JSONWriteInt64(w, item.T)
		}
	}
	if item.FieldsMask&(1<<1) != 0 {
		if len(item.Value) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"value":`...)
			if w, err = VectorDouble0WriteJSON(w, item.Value); err != nil {
				return w, err
			}
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if len(item.Unique) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"unique":`...)
			if w, err = VectorLong0WriteJSON(w, item.Unique); err != nil {
				return w, err
			}
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseMetric) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseMetric) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.metric", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.metric", err.Error())
	}
	return nil
}

type StatshouseMetricBytes struct {
	FieldsMask uint32
	Name       []byte
	Tags       []DictionaryFieldStringBytes
	Counter    float64   // Conditional: item.FieldsMask.0
	Ts         uint32    // Conditional: item.FieldsMask.4
	T          int64     // Conditional: item.FieldsMask.5
	Value      []float64 // Conditional: item.FieldsMask.1
	Unique     []int64   // Conditional: item.FieldsMask.2
}

func (StatshouseMetricBytes) TLName() string { return "statshouse.metric" }
func (StatshouseMetricBytes) TLTag() uint32  { return 0x3325d884 }

func (item *StatshouseMetricBytes) SetCounter(v float64) {
	item.Counter = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseMetricBytes) ClearCounter() {
	item.Counter = 0
	item.FieldsMask &^= 1 << 0
}
func (item StatshouseMetricBytes) IsSetCounter() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseMetricBytes) SetTs(v uint32) {
	item.Ts = v
	item.FieldsMask |= 1 << 4
}
func (item *StatshouseMetricBytes) ClearTs() {
	item.Ts = 0
	item.FieldsMask &^= 1 << 4
}
func (item StatshouseMetricBytes) IsSetTs() bool { return item.FieldsMask&(1<<4) != 0 }

func (item *StatshouseMetricBytes) SetT(v int64) {
	item.T = v
	item.FieldsMask |= 1 << 5
}
func (item *StatshouseMetricBytes) ClearT() {
	item.T = 0
	item.FieldsMask &^= 1 << 5
}
func (item StatshouseMetricBytes) IsSetT() bool { return item.FieldsMask&(1<<5) != 0 }

func (item *StatshouseMetricBytes) SetValue(v []float64) {
	item.Value = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseMetricBytes) ClearValue() {
	item.Value = item.Value[:0]
	item.FieldsMask &^= 1 << 1
}
func (item StatshouseMetricBytes) IsSetValue() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseMetricBytes) SetUnique(v []int64) {
	item.Unique = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseMetricBytes) ClearUnique() {
	item.Unique = item.Unique[:0]
	item.FieldsMask &^= 1 << 2
}
func (item StatshouseMetricBytes) IsSetUnique() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseMetricBytes) Reset() {
	item.FieldsMask = 0
	item.Name = item.Name[:0]
	item.Tags = item.Tags[:0]
	item.Counter = 0
	item.Ts = 0
	item.T = 0
	item.Value = item.Value[:0]
	item.Unique = item.Unique[:0]
}

func (item *StatshouseMetricBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Name); err != nil {
		return w, err
	}
	if w, err = VectorDictionaryFieldString0BytesRead(w, &item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.DoubleRead(w, &item.Counter); err != nil {
			return w, err
		}
	} else {
		item.Counter = 0
	}
	if item.FieldsMask&(1<<4) != 0 {
		if w, err = basictl.NatRead(w, &item.Ts); err != nil {
			return w, err
		}
	} else {
		item.Ts = 0
	}
	if item.FieldsMask&(1<<5) != 0 {
		if w, err = basictl.LongRead(w, &item.T); err != nil {
			return w, err
		}
	} else {
		item.T = 0
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = VectorDouble0Read(w, &item.Value); err != nil {
			return w, err
		}
	} else {
		item.Value = item.Value[:0]
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = VectorLong0Read(w, &item.Unique); err != nil {
			return w, err
		}
	} else {
		item.Unique = item.Unique[:0]
	}
	return w, nil
}

func (item *StatshouseMetricBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = basictl.StringWriteBytes(w, item.Name); err != nil {
		return w, err
	}
	if w, err = VectorDictionaryFieldString0BytesWrite(w, item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.DoubleWrite(w, item.Counter)
	}
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.NatWrite(w, item.Ts)
	}
	if item.FieldsMask&(1<<5) != 0 {
		w = basictl.LongWrite(w, item.T)
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = VectorDouble0Write(w, item.Value); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = VectorLong0Write(w, item.Unique); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *StatshouseMetricBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3325d884); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseMetricBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x3325d884)
	return item.Write(w)
}

func (item StatshouseMetricBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseMetricBytes__ReadJSON(item *StatshouseMetricBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseMetricBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.metric", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jName := _jm["name"]
	delete(_jm, "name")
	if err := JsonReadStringBytes(_jName, &item.Name); err != nil {
		return err
	}
	_jTags := _jm["tags"]
	delete(_jm, "tags")
	_jCounter := _jm["counter"]
	delete(_jm, "counter")
	_jTs := _jm["ts"]
	delete(_jm, "ts")
	_jT := _jm["t"]
	delete(_jm, "t")
	_jValue := _jm["value"]
	delete(_jm, "value")
	_jUnique := _jm["unique"]
	delete(_jm, "unique")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.metric", k)
	}
	if _jCounter != nil {
		item.FieldsMask |= 1 << 0
	}
	if _jTs != nil {
		item.FieldsMask |= 1 << 4
	}
	if _jT != nil {
		item.FieldsMask |= 1 << 5
	}
	if _jValue != nil {
		item.FieldsMask |= 1 << 1
	}
	if _jUnique != nil {
		item.FieldsMask |= 1 << 2
	}
	if err := VectorDictionaryFieldString0BytesReadJSON(_jTags, &item.Tags); err != nil {
		return err
	}
	if _jCounter != nil {
		if err := JsonReadFloat64(_jCounter, &item.Counter); err != nil {
			return err
		}
	} else {
		item.Counter = 0
	}
	if _jTs != nil {
		if err := JsonReadUint32(_jTs, &item.Ts); err != nil {
			return err
		}
	} else {
		item.Ts = 0
	}
	if _jT != nil {
		if err := JsonReadInt64(_jT, &item.T); err != nil {
			return err
		}
	} else {
		item.T = 0
	}
	if _jValue != nil {
		if err := VectorDouble0ReadJSON(_jValue, &item.Value); err != nil {
			return err
		}
	} else {
		item.Value = item.Value[:0]
	}
	if _jUnique != nil {
		if err := VectorLong0ReadJSON(_jUnique, &item.Unique); err != nil {
			return err
		}
	} else {
		item.Unique = item.Unique[:0]
	}
	return nil
}

func (item *StatshouseMetricBytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.Name) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"name":`...)
		w = basictl.JSONWriteStringBytes(w, item.Name)
	}
	if len(item.Tags) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"tags":`...)
		if w, err = VectorDictionaryFieldString0BytesWriteJSON(w, item.Tags); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<0) != 0 {
		if item.Counter != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"counter":`...)
			w = basictl.JSONWriteFloat64(w, item.Counter)
		}
	}
	if item.FieldsMask&(1<<4) != 0 {
		if item.Ts != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"ts":`...)
			w = basictl.JSONWriteUint32(w, item.Ts)
		}
	}
	if item.FieldsMask&(1<<5) != 0 {
		if item.T != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"t":`...)
			w = basictl.JSONWriteInt64(w, item.T)
		}
	}
	if item.FieldsMask&(1<<1) != 0 {
		if len(item.Value) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"value":`...)
			if w, err = VectorDouble0WriteJSON(w, item.Value); err != nil {
				return w, err
			}
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if len(item.Unique) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"unique":`...)
			if w, err = VectorLong0WriteJSON(w, item.Unique); err != nil {
				return w, err
			}
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseMetricBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseMetricBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.metric", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.metric", err.Error())
	}
	return nil
}

func VectorStatshouseMetric0Read(w []byte, vec *[]StatshouseMetric) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseMetric, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMetric0Write(w []byte, vec []StatshouseMetric) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMetric0ReadJSON(j interface{}, vec *[]StatshouseMetric) error {
	l, _arr, err := JsonReadArray("[]StatshouseMetric", j)
	if err != nil {
		return err
	}
	if cap(*vec) < l {
		*vec = make([]StatshouseMetric, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if err := StatshouseMetric__ReadJSON(&(*vec)[i], _arr[i]); err != nil {
			return err
		}
	}
	return nil
}

func VectorStatshouseMetric0WriteJSON(w []byte, vec []StatshouseMetric) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSON(w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

func VectorStatshouseMetric0BytesRead(w []byte, vec *[]StatshouseMetricBytes) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseMetricBytes, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMetric0BytesWrite(w []byte, vec []StatshouseMetricBytes) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMetric0BytesReadJSON(j interface{}, vec *[]StatshouseMetricBytes) error {
	l, _arr, err := JsonReadArray("[]StatshouseMetricBytes", j)
	if err != nil {
		return err
	}
	if cap(*vec) < l {
		*vec = make([]StatshouseMetricBytes, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if err := StatshouseMetricBytes__ReadJSON(&(*vec)[i], _arr[i]); err != nil {
			return err
		}
	}
	return nil
}

func VectorStatshouseMetric0BytesWriteJSON(w []byte, vec []StatshouseMetricBytes) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSON(w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}
