// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorStatshouseMetricRead(w []byte, vec *[]StatshouseMetric) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseMetric, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseMetricWrite(w []byte, vec []StatshouseMetric) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseMetricReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]StatshouseMetric) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseMetric", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue StatshouseMetric
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseMetric", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorStatshouseMetricWriteJSON(w []byte, vec []StatshouseMetric) (_ []byte, err error) {
	return BuiltinVectorStatshouseMetricWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorStatshouseMetricWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []StatshouseMetric) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

func BuiltinVectorStatshouseMetricBytesRead(w []byte, vec *[]StatshouseMetricBytes) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseMetricBytes, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseMetricBytesWrite(w []byte, vec []StatshouseMetricBytes) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseMetricBytesReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]StatshouseMetricBytes) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseMetricBytes", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue StatshouseMetricBytes
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseMetricBytes", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorStatshouseMetricBytesWriteJSON(w []byte, vec []StatshouseMetricBytes) (_ []byte, err error) {
	return BuiltinVectorStatshouseMetricBytesWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorStatshouseMetricBytesWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []StatshouseMetricBytes) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(newTypeNames, short, w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

type StatshouseMetric struct {
	FieldsMask uint32
	Name       string
	Tags       map[string]string
	Counter    float64   // Conditional: item.FieldsMask.0
	Ts         uint32    // Conditional: item.FieldsMask.4
	Value      []float64 // Conditional: item.FieldsMask.1
	Unique     []int64   // Conditional: item.FieldsMask.2
}

func (StatshouseMetric) TLName() string { return "statshouse.metric" }
func (StatshouseMetric) TLTag() uint32  { return 0x3325d884 }

func (item *StatshouseMetric) SetCounter(v float64) {
	item.Counter = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseMetric) ClearCounter() {
	item.Counter = 0
	item.FieldsMask &^= 1 << 0
}
func (item StatshouseMetric) IsSetCounter() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseMetric) SetTs(v uint32) {
	item.Ts = v
	item.FieldsMask |= 1 << 4
}
func (item *StatshouseMetric) ClearTs() {
	item.Ts = 0
	item.FieldsMask &^= 1 << 4
}
func (item StatshouseMetric) IsSetTs() bool { return item.FieldsMask&(1<<4) != 0 }

func (item *StatshouseMetric) SetValue(v []float64) {
	item.Value = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseMetric) ClearValue() {
	item.Value = item.Value[:0]
	item.FieldsMask &^= 1 << 1
}
func (item StatshouseMetric) IsSetValue() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseMetric) SetUnique(v []int64) {
	item.Unique = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseMetric) ClearUnique() {
	item.Unique = item.Unique[:0]
	item.FieldsMask &^= 1 << 2
}
func (item StatshouseMetric) IsSetUnique() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseMetric) Reset() {
	item.FieldsMask = 0
	item.Name = ""
	BuiltinVectorDictionaryFieldStringReset(item.Tags)
	item.Counter = 0
	item.Ts = 0
	item.Value = item.Value[:0]
	item.Unique = item.Unique[:0]
}

func (item *StatshouseMetric) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Name); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorDictionaryFieldStringRead(w, &item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.DoubleRead(w, &item.Counter); err != nil {
			return w, err
		}
	} else {
		item.Counter = 0
	}
	if item.FieldsMask&(1<<4) != 0 {
		if w, err = basictl.NatRead(w, &item.Ts); err != nil {
			return w, err
		}
	} else {
		item.Ts = 0
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = BuiltinVectorDoubleRead(w, &item.Value); err != nil {
			return w, err
		}
	} else {
		item.Value = item.Value[:0]
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = BuiltinVectorLongRead(w, &item.Unique); err != nil {
			return w, err
		}
	} else {
		item.Unique = item.Unique[:0]
	}
	return w, nil
}

func (item *StatshouseMetric) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWrite(w, item.Name)
	if w, err = BuiltinVectorDictionaryFieldStringWrite(w, item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.DoubleWrite(w, item.Counter)
	}
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.NatWrite(w, item.Ts)
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = BuiltinVectorDoubleWrite(w, item.Value); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = BuiltinVectorLongWrite(w, item.Unique); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *StatshouseMetric) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3325d884); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseMetric) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x3325d884)
	return item.Write(w)
}

func (item StatshouseMetric) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *StatshouseMetric) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propNamePresented bool
	var propTagsPresented bool
	var propCounterPresented bool
	var propTsPresented bool
	var propValuePresented bool
	var propUniquePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "name":
				if propNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "name")
				}
				if err := Json2ReadString(in, &item.Name); err != nil {
					return err
				}
				propNamePresented = true
			case "tags":
				if propTagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "tags")
				}
				if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, &item.Tags); err != nil {
					return err
				}
				propTagsPresented = true
			case "counter":
				if propCounterPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "counter")
				}
				if err := Json2ReadFloat64(in, &item.Counter); err != nil {
					return err
				}
				propCounterPresented = true
			case "ts":
				if propTsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "ts")
				}
				if err := Json2ReadUint32(in, &item.Ts); err != nil {
					return err
				}
				propTsPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "value")
				}
				if err := BuiltinVectorDoubleReadJSON(legacyTypeNames, in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			case "unique":
				if propUniquePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "unique")
				}
				if err := BuiltinVectorLongReadJSON(legacyTypeNames, in, &item.Unique); err != nil {
					return err
				}
				propUniquePresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.metric", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propNamePresented {
		item.Name = ""
	}
	if !propTagsPresented {
		BuiltinVectorDictionaryFieldStringReset(item.Tags)
	}
	if !propCounterPresented {
		item.Counter = 0
	}
	if !propTsPresented {
		item.Ts = 0
	}
	if !propValuePresented {
		item.Value = item.Value[:0]
	}
	if !propUniquePresented {
		item.Unique = item.Unique[:0]
	}
	if propCounterPresented {
		item.FieldsMask |= 1 << 0
	}
	if propTsPresented {
		item.FieldsMask |= 1 << 4
	}
	if propValuePresented {
		item.FieldsMask |= 1 << 1
	}
	if propUniquePresented {
		item.FieldsMask |= 1 << 2
	}
	return nil
}

func (item *StatshouseMetric) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseMetric) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"name":`...)
	w = basictl.JSONWriteString(w, item.Name)
	if (len(item.Name) != 0) == false {
		w = w[:backupIndexName]
	}
	backupIndexTags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tags":`...)
	if w, err = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, item.Tags); err != nil {
		return w, err
	}
	if (len(item.Tags) != 0) == false {
		w = w[:backupIndexTags]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"counter":`...)
		w = basictl.JSONWriteFloat64(w, item.Counter)
	}
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ts":`...)
		w = basictl.JSONWriteUint32(w, item.Ts)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"value":`...)
		if w, err = BuiltinVectorDoubleWriteJSONOpt(newTypeNames, short, w, item.Value); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"unique":`...)
		if w, err = BuiltinVectorLongWriteJSONOpt(newTypeNames, short, w, item.Unique); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseMetric) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseMetric) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.metric", err.Error())
	}
	return nil
}

type StatshouseMetricBytes struct {
	FieldsMask uint32
	Name       []byte
	Tags       []DictionaryFieldStringBytes
	Counter    float64   // Conditional: item.FieldsMask.0
	Ts         uint32    // Conditional: item.FieldsMask.4
	Value      []float64 // Conditional: item.FieldsMask.1
	Unique     []int64   // Conditional: item.FieldsMask.2
}

func (StatshouseMetricBytes) TLName() string { return "statshouse.metric" }
func (StatshouseMetricBytes) TLTag() uint32  { return 0x3325d884 }

func (item *StatshouseMetricBytes) SetCounter(v float64) {
	item.Counter = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseMetricBytes) ClearCounter() {
	item.Counter = 0
	item.FieldsMask &^= 1 << 0
}
func (item StatshouseMetricBytes) IsSetCounter() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseMetricBytes) SetTs(v uint32) {
	item.Ts = v
	item.FieldsMask |= 1 << 4
}
func (item *StatshouseMetricBytes) ClearTs() {
	item.Ts = 0
	item.FieldsMask &^= 1 << 4
}
func (item StatshouseMetricBytes) IsSetTs() bool { return item.FieldsMask&(1<<4) != 0 }

func (item *StatshouseMetricBytes) SetValue(v []float64) {
	item.Value = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseMetricBytes) ClearValue() {
	item.Value = item.Value[:0]
	item.FieldsMask &^= 1 << 1
}
func (item StatshouseMetricBytes) IsSetValue() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseMetricBytes) SetUnique(v []int64) {
	item.Unique = v
	item.FieldsMask |= 1 << 2
}
func (item *StatshouseMetricBytes) ClearUnique() {
	item.Unique = item.Unique[:0]
	item.FieldsMask &^= 1 << 2
}
func (item StatshouseMetricBytes) IsSetUnique() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *StatshouseMetricBytes) Reset() {
	item.FieldsMask = 0
	item.Name = item.Name[:0]
	item.Tags = item.Tags[:0]
	item.Counter = 0
	item.Ts = 0
	item.Value = item.Value[:0]
	item.Unique = item.Unique[:0]
}

func (item *StatshouseMetricBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Name); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorDictionaryFieldStringBytesRead(w, &item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.DoubleRead(w, &item.Counter); err != nil {
			return w, err
		}
	} else {
		item.Counter = 0
	}
	if item.FieldsMask&(1<<4) != 0 {
		if w, err = basictl.NatRead(w, &item.Ts); err != nil {
			return w, err
		}
	} else {
		item.Ts = 0
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = BuiltinVectorDoubleRead(w, &item.Value); err != nil {
			return w, err
		}
	} else {
		item.Value = item.Value[:0]
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = BuiltinVectorLongRead(w, &item.Unique); err != nil {
			return w, err
		}
	} else {
		item.Unique = item.Unique[:0]
	}
	return w, nil
}

func (item *StatshouseMetricBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWriteBytes(w, item.Name)
	if w, err = BuiltinVectorDictionaryFieldStringBytesWrite(w, item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.DoubleWrite(w, item.Counter)
	}
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.NatWrite(w, item.Ts)
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = BuiltinVectorDoubleWrite(w, item.Value); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = BuiltinVectorLongWrite(w, item.Unique); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *StatshouseMetricBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3325d884); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseMetricBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x3325d884)
	return item.Write(w)
}

func (item StatshouseMetricBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *StatshouseMetricBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propNamePresented bool
	var propTagsPresented bool
	var propCounterPresented bool
	var propTsPresented bool
	var propValuePresented bool
	var propUniquePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "name":
				if propNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "name")
				}
				if err := Json2ReadStringBytes(in, &item.Name); err != nil {
					return err
				}
				propNamePresented = true
			case "tags":
				if propTagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "tags")
				}
				if err := BuiltinVectorDictionaryFieldStringBytesReadJSON(legacyTypeNames, in, &item.Tags); err != nil {
					return err
				}
				propTagsPresented = true
			case "counter":
				if propCounterPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "counter")
				}
				if err := Json2ReadFloat64(in, &item.Counter); err != nil {
					return err
				}
				propCounterPresented = true
			case "ts":
				if propTsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "ts")
				}
				if err := Json2ReadUint32(in, &item.Ts); err != nil {
					return err
				}
				propTsPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "value")
				}
				if err := BuiltinVectorDoubleReadJSON(legacyTypeNames, in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			case "unique":
				if propUniquePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.metric", "unique")
				}
				if err := BuiltinVectorLongReadJSON(legacyTypeNames, in, &item.Unique); err != nil {
					return err
				}
				propUniquePresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.metric", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propNamePresented {
		item.Name = item.Name[:0]
	}
	if !propTagsPresented {
		item.Tags = item.Tags[:0]
	}
	if !propCounterPresented {
		item.Counter = 0
	}
	if !propTsPresented {
		item.Ts = 0
	}
	if !propValuePresented {
		item.Value = item.Value[:0]
	}
	if !propUniquePresented {
		item.Unique = item.Unique[:0]
	}
	if propCounterPresented {
		item.FieldsMask |= 1 << 0
	}
	if propTsPresented {
		item.FieldsMask |= 1 << 4
	}
	if propValuePresented {
		item.FieldsMask |= 1 << 1
	}
	if propUniquePresented {
		item.FieldsMask |= 1 << 2
	}
	return nil
}

func (item *StatshouseMetricBytes) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseMetricBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"name":`...)
	w = basictl.JSONWriteStringBytes(w, item.Name)
	if (len(item.Name) != 0) == false {
		w = w[:backupIndexName]
	}
	backupIndexTags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tags":`...)
	if w, err = BuiltinVectorDictionaryFieldStringBytesWriteJSONOpt(newTypeNames, short, w, item.Tags); err != nil {
		return w, err
	}
	if (len(item.Tags) != 0) == false {
		w = w[:backupIndexTags]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"counter":`...)
		w = basictl.JSONWriteFloat64(w, item.Counter)
	}
	if item.FieldsMask&(1<<4) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ts":`...)
		w = basictl.JSONWriteUint32(w, item.Ts)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"value":`...)
		if w, err = BuiltinVectorDoubleWriteJSONOpt(newTypeNames, short, w, item.Value); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"unique":`...)
		if w, err = BuiltinVectorLongWriteJSONOpt(newTypeNames, short, w, item.Unique); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseMetricBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseMetricBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.metric", err.Error())
	}
	return nil
}
