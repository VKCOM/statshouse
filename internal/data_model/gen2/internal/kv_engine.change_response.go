// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type KvEngineChangeResponse struct {
	Meta     KvEngineMetaInfo
	NewValue int64
}

func (KvEngineChangeResponse) TLName() string { return "kv_engine.change_response" }
func (KvEngineChangeResponse) TLTag() uint32  { return 0x73eaa764 }

func (item *KvEngineChangeResponse) Reset() {
	item.Meta.Reset()
	item.NewValue = 0
}

func (item *KvEngineChangeResponse) Read(w []byte) (_ []byte, err error) {
	if w, err = item.Meta.Read(w); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.NewValue)
}

// This method is general version of Write, use it instead!
func (item *KvEngineChangeResponse) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *KvEngineChangeResponse) Write(w []byte) []byte {
	w = item.Meta.Write(w)
	w = basictl.LongWrite(w, item.NewValue)
	return w
}

func (item *KvEngineChangeResponse) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x73eaa764); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *KvEngineChangeResponse) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *KvEngineChangeResponse) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x73eaa764)
	return item.Write(w)
}

func (item KvEngineChangeResponse) String() string {
	return string(item.WriteJSON(nil))
}

func (item *KvEngineChangeResponse) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propMetaPresented bool
	var propNewValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "meta":
				if propMetaPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("kv_engine.change_response", "meta")
				}
				if err := item.Meta.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propMetaPresented = true
			case "new_value":
				if propNewValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("kv_engine.change_response", "new_value")
				}
				if err := Json2ReadInt64(in, &item.NewValue); err != nil {
					return err
				}
				propNewValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("kv_engine.change_response", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propMetaPresented {
		item.Meta.Reset()
	}
	if !propNewValuePresented {
		item.NewValue = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *KvEngineChangeResponse) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *KvEngineChangeResponse) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *KvEngineChangeResponse) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"meta":`...)
	w = item.Meta.WriteJSONOpt(newTypeNames, short, w)
	backupIndexNewValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"new_value":`...)
	w = basictl.JSONWriteInt64(w, item.NewValue)
	if (item.NewValue != 0) == false {
		w = w[:backupIndexNewValue]
	}
	return append(w, '}')
}

func (item *KvEngineChangeResponse) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *KvEngineChangeResponse) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("kv_engine.change_response", err.Error())
	}
	return nil
}
