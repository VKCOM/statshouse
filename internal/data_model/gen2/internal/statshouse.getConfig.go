// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseGetConfig struct {
	FieldsMask uint32
	HostName   string
	SourceEnv  int32
	BuildArch  int32  // Conditional: item.FieldsMask.1
	Cluster    string // Conditional: item.FieldsMask.0
}

func (StatshouseGetConfig) TLName() string { return "statshouse.getConfig" }
func (StatshouseGetConfig) TLTag() uint32  { return 0x3285ff57 }

func (item *StatshouseGetConfig) SetBuildArch(v int32) {
	item.BuildArch = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseGetConfig) ClearBuildArch() {
	item.BuildArch = 0
	item.FieldsMask &^= 1 << 1
}
func (item *StatshouseGetConfig) IsSetBuildArch() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseGetConfig) SetCluster(v string) {
	item.Cluster = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseGetConfig) ClearCluster() {
	item.Cluster = ""
	item.FieldsMask &^= 1 << 0
}
func (item *StatshouseGetConfig) IsSetCluster() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetConfig) Reset() {
	item.FieldsMask = 0
	item.HostName = ""
	item.SourceEnv = 0
	item.BuildArch = 0
	item.Cluster = ""
}

func (item *StatshouseGetConfig) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.HostName); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.SourceEnv); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildArch); err != nil {
			return w, err
		}
	} else {
		item.BuildArch = 0
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.StringRead(w, &item.Cluster); err != nil {
			return w, err
		}
	} else {
		item.Cluster = ""
	}
	return w, nil
}

func (item *StatshouseGetConfig) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = basictl.StringWrite(w, item.HostName); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.SourceEnv)
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.IntWrite(w, item.BuildArch)
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.StringWrite(w, item.Cluster); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *StatshouseGetConfig) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3285ff57); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetConfig) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x3285ff57)
	return item.Write(w)
}

func (item *StatshouseGetConfig) ReadResult(w []byte, ret *StatshouseGetConfigResult) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetConfig) WriteResult(w []byte, ret StatshouseGetConfigResult) (_ []byte, err error) {
	return ret.WriteBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetConfig) ReadResultJSON(j interface{}, ret *StatshouseGetConfigResult) error {
	if err := StatshouseGetConfigResult__ReadJSON(ret, j, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetConfig) WriteResultJSON(w []byte, ret StatshouseGetConfigResult) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseGetConfig) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetConfigResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetConfig) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.getConfig", err.Error())
	}
	var ret StatshouseGetConfigResult
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetConfig) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetConfig__ReadJSON(item *StatshouseGetConfig, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetConfig) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getConfig", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jHostName := _jm["host_name"]
	delete(_jm, "host_name")
	if err := JsonReadString(_jHostName, &item.HostName); err != nil {
		return err
	}
	_jSourceEnv := _jm["source_env"]
	delete(_jm, "source_env")
	if err := JsonReadInt32(_jSourceEnv, &item.SourceEnv); err != nil {
		return err
	}
	_jBuildArch := _jm["build_arch"]
	delete(_jm, "build_arch")
	_jCluster := _jm["cluster"]
	delete(_jm, "cluster")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getConfig", k)
	}
	if _jBuildArch != nil {
		item.FieldsMask |= 1 << 1
	}
	if _jCluster != nil {
		item.FieldsMask |= 1 << 0
	}
	if _jBuildArch != nil {
		if err := JsonReadInt32(_jBuildArch, &item.BuildArch); err != nil {
			return err
		}
	} else {
		item.BuildArch = 0
	}
	if _jCluster != nil {
		if err := JsonReadString(_jCluster, &item.Cluster); err != nil {
			return err
		}
	} else {
		item.Cluster = ""
	}
	return nil
}

func (item *StatshouseGetConfig) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.HostName) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"host_name":`...)
		w = basictl.JSONWriteString(w, item.HostName)
	}
	if item.SourceEnv != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"source_env":`...)
		w = basictl.JSONWriteInt32(w, item.SourceEnv)
	}
	if item.FieldsMask&(1<<1) != 0 {
		if item.BuildArch != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_arch":`...)
			w = basictl.JSONWriteInt32(w, item.BuildArch)
		}
	}
	if item.FieldsMask&(1<<0) != 0 {
		if len(item.Cluster) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"cluster":`...)
			w = basictl.JSONWriteString(w, item.Cluster)
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetConfig) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetConfig) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getConfig", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getConfig", err.Error())
	}
	return nil
}

type StatshouseGetConfigBytes struct {
	FieldsMask uint32
	HostName   []byte
	SourceEnv  int32
	BuildArch  int32  // Conditional: item.FieldsMask.1
	Cluster    []byte // Conditional: item.FieldsMask.0
}

func (StatshouseGetConfigBytes) TLName() string { return "statshouse.getConfig" }
func (StatshouseGetConfigBytes) TLTag() uint32  { return 0x3285ff57 }

func (item *StatshouseGetConfigBytes) SetBuildArch(v int32) {
	item.BuildArch = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseGetConfigBytes) ClearBuildArch() {
	item.BuildArch = 0
	item.FieldsMask &^= 1 << 1
}
func (item *StatshouseGetConfigBytes) IsSetBuildArch() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseGetConfigBytes) SetCluster(v []byte) {
	item.Cluster = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseGetConfigBytes) ClearCluster() {
	item.Cluster = item.Cluster[:0]
	item.FieldsMask &^= 1 << 0
}
func (item *StatshouseGetConfigBytes) IsSetCluster() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetConfigBytes) Reset() {
	item.FieldsMask = 0
	item.HostName = item.HostName[:0]
	item.SourceEnv = 0
	item.BuildArch = 0
	item.Cluster = item.Cluster[:0]
}

func (item *StatshouseGetConfigBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.HostName); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.SourceEnv); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = basictl.IntRead(w, &item.BuildArch); err != nil {
			return w, err
		}
	} else {
		item.BuildArch = 0
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.StringReadBytes(w, &item.Cluster); err != nil {
			return w, err
		}
	} else {
		item.Cluster = item.Cluster[:0]
	}
	return w, nil
}

func (item *StatshouseGetConfigBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = basictl.StringWriteBytes(w, item.HostName); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.SourceEnv)
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.IntWrite(w, item.BuildArch)
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.StringWriteBytes(w, item.Cluster); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *StatshouseGetConfigBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3285ff57); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetConfigBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x3285ff57)
	return item.Write(w)
}

func (item *StatshouseGetConfigBytes) ReadResult(w []byte, ret *StatshouseGetConfigResultBytes) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetConfigBytes) WriteResult(w []byte, ret StatshouseGetConfigResultBytes) (_ []byte, err error) {
	return ret.WriteBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetConfigBytes) ReadResultJSON(j interface{}, ret *StatshouseGetConfigResultBytes) error {
	if err := StatshouseGetConfigResultBytes__ReadJSON(ret, j, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetConfigBytes) WriteResultJSON(w []byte, ret StatshouseGetConfigResultBytes) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseGetConfigBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetConfigResultBytes
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetConfigBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.getConfig", err.Error())
	}
	var ret StatshouseGetConfigResultBytes
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetConfigBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetConfigBytes__ReadJSON(item *StatshouseGetConfigBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetConfigBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getConfig", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jHostName := _jm["host_name"]
	delete(_jm, "host_name")
	if err := JsonReadStringBytes(_jHostName, &item.HostName); err != nil {
		return err
	}
	_jSourceEnv := _jm["source_env"]
	delete(_jm, "source_env")
	if err := JsonReadInt32(_jSourceEnv, &item.SourceEnv); err != nil {
		return err
	}
	_jBuildArch := _jm["build_arch"]
	delete(_jm, "build_arch")
	_jCluster := _jm["cluster"]
	delete(_jm, "cluster")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getConfig", k)
	}
	if _jBuildArch != nil {
		item.FieldsMask |= 1 << 1
	}
	if _jCluster != nil {
		item.FieldsMask |= 1 << 0
	}
	if _jBuildArch != nil {
		if err := JsonReadInt32(_jBuildArch, &item.BuildArch); err != nil {
			return err
		}
	} else {
		item.BuildArch = 0
	}
	if _jCluster != nil {
		if err := JsonReadStringBytes(_jCluster, &item.Cluster); err != nil {
			return err
		}
	} else {
		item.Cluster = item.Cluster[:0]
	}
	return nil
}

func (item *StatshouseGetConfigBytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.HostName) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"host_name":`...)
		w = basictl.JSONWriteStringBytes(w, item.HostName)
	}
	if item.SourceEnv != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"source_env":`...)
		w = basictl.JSONWriteInt32(w, item.SourceEnv)
	}
	if item.FieldsMask&(1<<1) != 0 {
		if item.BuildArch != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"build_arch":`...)
			w = basictl.JSONWriteInt32(w, item.BuildArch)
		}
	}
	if item.FieldsMask&(1<<0) != 0 {
		if len(item.Cluster) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"cluster":`...)
			w = basictl.JSONWriteStringBytes(w, item.Cluster)
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetConfigBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetConfigBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getConfig", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getConfig", err.Error())
	}
	return nil
}
