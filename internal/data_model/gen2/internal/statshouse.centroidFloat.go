// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorStatshouseCentroidFloatRead(w []byte, vec *[]StatshouseCentroidFloat) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseCentroidFloat, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseCentroidFloatWrite(w []byte, vec []StatshouseCentroidFloat) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorStatshouseCentroidFloatReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]StatshouseCentroidFloat) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseCentroidFloat", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue StatshouseCentroidFloat
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseCentroidFloat", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorStatshouseCentroidFloatWriteJSON(w []byte, vec []StatshouseCentroidFloat) []byte {
	return BuiltinVectorStatshouseCentroidFloatWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorStatshouseCentroidFloatWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []StatshouseCentroidFloat) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']')
}

type StatshouseCentroidFloat struct {
	Value float32
	Count float32
}

func (StatshouseCentroidFloat) TLName() string { return "statshouse.centroidFloat" }
func (StatshouseCentroidFloat) TLTag() uint32  { return 0x73fd01e0 }

func (item *StatshouseCentroidFloat) Reset() {
	item.Value = 0
	item.Count = 0
}

func (item *StatshouseCentroidFloat) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.FloatRead(w, &item.Value); err != nil {
		return w, err
	}
	return basictl.FloatRead(w, &item.Count)
}

// This method is general version of Write, use it instead!
func (item *StatshouseCentroidFloat) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseCentroidFloat) Write(w []byte) []byte {
	w = basictl.FloatWrite(w, item.Value)
	w = basictl.FloatWrite(w, item.Count)
	return w
}

func (item *StatshouseCentroidFloat) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x73fd01e0); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseCentroidFloat) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseCentroidFloat) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x73fd01e0)
	return item.Write(w)
}

func (item StatshouseCentroidFloat) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseCentroidFloat) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propValuePresented bool
	var propCountPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.centroidFloat", "value")
				}
				if err := Json2ReadFloat32(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			case "count":
				if propCountPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.centroidFloat", "count")
				}
				if err := Json2ReadFloat32(in, &item.Count); err != nil {
					return err
				}
				propCountPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.centroidFloat", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propValuePresented {
		item.Value = 0
	}
	if !propCountPresented {
		item.Count = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseCentroidFloat) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseCentroidFloat) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseCentroidFloat) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteFloat32(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	backupIndexCount := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"count":`...)
	w = basictl.JSONWriteFloat32(w, item.Count)
	if (item.Count != 0) == false {
		w = w[:backupIndexCount]
	}
	return append(w, '}')
}

func (item *StatshouseCentroidFloat) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseCentroidFloat) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.centroidFloat", err.Error())
	}
	return nil
}
