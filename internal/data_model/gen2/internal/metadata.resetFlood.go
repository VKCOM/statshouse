// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataResetFlood struct {
	Metric string
}

func (MetadataResetFlood) TLName() string { return "metadata.resetFlood" }
func (MetadataResetFlood) TLTag() uint32  { return 0x9faf5282 }

func (item *MetadataResetFlood) Reset() {
	item.Metric = ""
}

func (item *MetadataResetFlood) Read(w []byte) (_ []byte, err error) {
	return basictl.StringRead(w, &item.Metric)
}

func (item *MetadataResetFlood) Write(w []byte) (_ []byte, err error) {
	return basictl.StringWrite(w, item.Metric)
}

func (item *MetadataResetFlood) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9faf5282); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MetadataResetFlood) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9faf5282)
	return item.Write(w)
}

func (item *MetadataResetFlood) ReadResult(w []byte, ret *MetadataResetFloodResponse) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *MetadataResetFlood) WriteResult(w []byte, ret MetadataResetFloodResponse) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *MetadataResetFlood) ReadResultJSON(j interface{}, ret *MetadataResetFloodResponse) error {
	if err := MetadataResetFloodResponse__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *MetadataResetFlood) WriteResultJSON(w []byte, ret MetadataResetFloodResponse) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *MetadataResetFlood) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret MetadataResetFloodResponse
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *MetadataResetFlood) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("metadata.resetFlood", err.Error())
	}
	var ret MetadataResetFloodResponse
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item MetadataResetFlood) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func MetadataResetFlood__ReadJSON(item *MetadataResetFlood, j interface{}) error {
	return item.readJSON(j)
}
func (item *MetadataResetFlood) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("metadata.resetFlood", "expected json object")
	}
	_jMetric := _jm["metric"]
	delete(_jm, "metric")
	if err := JsonReadString(_jMetric, &item.Metric); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.resetFlood", k)
	}
	return nil
}

func (item *MetadataResetFlood) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.Metric) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric":`...)
		w = basictl.JSONWriteString(w, item.Metric)
	}
	return append(w, '}'), nil
}

func (item *MetadataResetFlood) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *MetadataResetFlood) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("metadata.resetFlood", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("metadata.resetFlood", err.Error())
	}
	return nil
}
