// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseApiGetQueryResponse struct {
	FieldsMask      uint32
	Series          StatshouseApiSeries
	SeriesMeta      []StatshouseApiSeriesMeta
	ChunkIds        []int32
	TotalTimePoints int32
	ResponseId      int64
	// ExcessPointLeft (TrueType) // Conditional: item.FieldsMask.0
	// ExcessPointRight (TrueType) // Conditional: item.FieldsMask.1
}

func (StatshouseApiGetQueryResponse) TLName() string { return "statshouseApi.queryResponse" }
func (StatshouseApiGetQueryResponse) TLTag() uint32  { return 0x4487e49a }

func (item *StatshouseApiGetQueryResponse) SetExcessPointLeft(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item StatshouseApiGetQueryResponse) IsSetExcessPointLeft() bool {
	return item.FieldsMask&(1<<0) != 0
}

func (item *StatshouseApiGetQueryResponse) SetExcessPointRight(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item StatshouseApiGetQueryResponse) IsSetExcessPointRight() bool {
	return item.FieldsMask&(1<<1) != 0
}

func (item *StatshouseApiGetQueryResponse) Reset() {
	item.FieldsMask = 0
	item.Series.Reset()
	item.SeriesMeta = item.SeriesMeta[:0]
	item.ChunkIds = item.ChunkIds[:0]
	item.TotalTimePoints = 0
	item.ResponseId = 0
}

func (item *StatshouseApiGetQueryResponse) Read(w []byte, nat_query_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Series.Read(w); err != nil {
		return w, err
	}
	if w, err = VectorStatshouseApiSeriesMeta0Read(w, &item.SeriesMeta, nat_query_fields_mask); err != nil {
		return w, err
	}
	if w, err = VectorInt0Read(w, &item.ChunkIds); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.TotalTimePoints); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.ResponseId); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseApiGetQueryResponse) Write(w []byte, nat_query_fields_mask uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = item.Series.Write(w); err != nil {
		return w, err
	}
	if w, err = VectorStatshouseApiSeriesMeta0Write(w, item.SeriesMeta, nat_query_fields_mask); err != nil {
		return w, err
	}
	if w, err = VectorInt0Write(w, item.ChunkIds); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.TotalTimePoints)
	w = basictl.LongWrite(w, item.ResponseId)
	return w, nil
}

func (item *StatshouseApiGetQueryResponse) ReadBoxed(w []byte, nat_query_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4487e49a); err != nil {
		return w, err
	}
	return item.Read(w, nat_query_fields_mask)
}

func (item *StatshouseApiGetQueryResponse) WriteBoxed(w []byte, nat_query_fields_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x4487e49a)
	return item.Write(w, nat_query_fields_mask)
}

func StatshouseApiGetQueryResponse__ReadJSON(item *StatshouseApiGetQueryResponse, j interface{}, nat_query_fields_mask uint32) error {
	return item.readJSON(j, nat_query_fields_mask)
}
func (item *StatshouseApiGetQueryResponse) readJSON(j interface{}, nat_query_fields_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouseApi.queryResponse", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jSeries := _jm["series"]
	delete(_jm, "series")
	_jSeriesMeta := _jm["series_meta"]
	delete(_jm, "series_meta")
	_jChunkIds := _jm["chunk_ids"]
	delete(_jm, "chunk_ids")
	_jTotalTimePoints := _jm["total_time_points"]
	delete(_jm, "total_time_points")
	if err := JsonReadInt32(_jTotalTimePoints, &item.TotalTimePoints); err != nil {
		return err
	}
	_jResponseId := _jm["response_id"]
	delete(_jm, "response_id")
	if err := JsonReadInt64(_jResponseId, &item.ResponseId); err != nil {
		return err
	}
	_jExcessPointLeft := _jm["excess_point_left"]
	delete(_jm, "excess_point_left")
	_jExcessPointRight := _jm["excess_point_right"]
	delete(_jm, "excess_point_right")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouseApi.queryResponse", k)
	}
	if _jExcessPointLeft != nil {
		_bit := false
		if err := JsonReadBool(_jExcessPointLeft, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if _jExcessPointRight != nil {
		_bit := false
		if err := JsonReadBool(_jExcessPointRight, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 1
		} else {
			item.FieldsMask &^= 1 << 1
		}
	}
	if err := StatshouseApiSeries__ReadJSON(&item.Series, _jSeries); err != nil {
		return err
	}
	if err := VectorStatshouseApiSeriesMeta0ReadJSON(_jSeriesMeta, &item.SeriesMeta, nat_query_fields_mask); err != nil {
		return err
	}
	if err := VectorInt0ReadJSON(_jChunkIds, &item.ChunkIds); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseApiGetQueryResponse) WriteJSON(w []byte, nat_query_fields_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w, nat_query_fields_mask)
}
func (item *StatshouseApiGetQueryResponse) WriteJSONOpt(short bool, w []byte, nat_query_fields_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"series":`...)
	if w, err = item.Series.WriteJSONOpt(short, w); err != nil {
		return w, err
	}
	if len(item.SeriesMeta) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"series_meta":`...)
		if w, err = VectorStatshouseApiSeriesMeta0WriteJSONOpt(short, w, item.SeriesMeta, nat_query_fields_mask); err != nil {
			return w, err
		}
	}
	if len(item.ChunkIds) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"chunk_ids":`...)
		if w, err = VectorInt0WriteJSONOpt(short, w, item.ChunkIds); err != nil {
			return w, err
		}
	}
	if item.TotalTimePoints != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"total_time_points":`...)
		w = basictl.JSONWriteInt32(w, item.TotalTimePoints)
	}
	if item.ResponseId != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"response_id":`...)
		w = basictl.JSONWriteInt64(w, item.ResponseId)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"excess_point_left":true`...)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"excess_point_right":true`...)
	}
	return append(w, '}'), nil
}
