// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataGetMappingsNewResponse struct {
	CurrentVersion int64
	Pairs          []StatshouseMapping
}

func (MetadataGetMappingsNewResponse) TLName() string { return "metadata.getMappingsNewResponse" }
func (MetadataGetMappingsNewResponse) TLTag() uint32  { return 0x9287aaaa }

func (item *MetadataGetMappingsNewResponse) Reset() {
	item.CurrentVersion = 0
	item.Pairs = item.Pairs[:0]
}

func (item *MetadataGetMappingsNewResponse) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.CurrentVersion); err != nil {
		return w, err
	}
	return BuiltinVectorStatshouseMappingRead(w, &item.Pairs)
}

// This method is general version of Write, use it instead!
func (item *MetadataGetMappingsNewResponse) WriteGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_field_mask), nil
}

func (item *MetadataGetMappingsNewResponse) Write(w []byte, nat_field_mask uint32) []byte {
	w = basictl.LongWrite(w, item.CurrentVersion)
	w = BuiltinVectorStatshouseMappingWrite(w, item.Pairs)
	return w
}

func (item *MetadataGetMappingsNewResponse) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9287aaaa); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MetadataGetMappingsNewResponse) WriteBoxedGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_field_mask), nil
}

func (item *MetadataGetMappingsNewResponse) WriteBoxed(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x9287aaaa)
	return item.Write(w, nat_field_mask)
}

func (item *MetadataGetMappingsNewResponse) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_field_mask uint32) error {
	var propCurrentVersionPresented bool
	var propPairsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "current_version":
				if propCurrentVersionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getMappingsNewResponse", "current_version")
				}
				if err := Json2ReadInt64(in, &item.CurrentVersion); err != nil {
					return err
				}
				propCurrentVersionPresented = true
			case "pairs":
				if propPairsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getMappingsNewResponse", "pairs")
				}
				if err := BuiltinVectorStatshouseMappingReadJSON(legacyTypeNames, in, &item.Pairs); err != nil {
					return err
				}
				propPairsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("metadata.getMappingsNewResponse", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propCurrentVersionPresented {
		item.CurrentVersion = 0
	}
	if !propPairsPresented {
		item.Pairs = item.Pairs[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataGetMappingsNewResponse) WriteJSONGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_field_mask), nil
}

func (item *MetadataGetMappingsNewResponse) WriteJSON(w []byte, nat_field_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_field_mask)
}
func (item *MetadataGetMappingsNewResponse) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_field_mask uint32) []byte {
	w = append(w, '{')
	backupIndexCurrentVersion := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"current_version":`...)
	w = basictl.JSONWriteInt64(w, item.CurrentVersion)
	if (item.CurrentVersion != 0) == false {
		w = w[:backupIndexCurrentVersion]
	}
	backupIndexPairs := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"pairs":`...)
	w = BuiltinVectorStatshouseMappingWriteJSONOpt(newTypeNames, short, w, item.Pairs)
	if (len(item.Pairs) != 0) == false {
		w = w[:backupIndexPairs]
	}
	return append(w, '}')
}
