// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataPutMapping struct {
	FieldMask uint32
	Keys      []string
	Value     []int32
}

func (MetadataPutMapping) TLName() string { return "metadata.putMapping" }
func (MetadataPutMapping) TLTag() uint32  { return 0x9faf5281 }

func (item *MetadataPutMapping) Reset() {
	item.FieldMask = 0
	item.Keys = item.Keys[:0]
	item.Value = item.Value[:0]
}

func (item *MetadataPutMapping) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldMask); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorStringRead(w, &item.Keys); err != nil {
		return w, err
	}
	return BuiltinVectorIntRead(w, &item.Value)
}

// This method is general version of Write, use it instead!
func (item *MetadataPutMapping) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MetadataPutMapping) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldMask)
	w = BuiltinVectorStringWrite(w, item.Keys)
	w = BuiltinVectorIntWrite(w, item.Value)
	return w
}

func (item *MetadataPutMapping) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9faf5281); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MetadataPutMapping) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MetadataPutMapping) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x9faf5281)
	return item.Write(w)
}

func (item *MetadataPutMapping) ReadResult(w []byte, ret *MetadataPutMappingResponse) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *MetadataPutMapping) WriteResult(w []byte, ret MetadataPutMappingResponse) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *MetadataPutMapping) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *MetadataPutMappingResponse) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *MetadataPutMapping) WriteResultJSON(w []byte, ret MetadataPutMappingResponse) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *MetadataPutMapping) writeResultJSON(newTypeNames bool, short bool, w []byte, ret MetadataPutMappingResponse) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *MetadataPutMapping) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret MetadataPutMappingResponse
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *MetadataPutMapping) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret MetadataPutMappingResponse
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *MetadataPutMapping) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret MetadataPutMappingResponse
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item MetadataPutMapping) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MetadataPutMapping) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldMaskPresented bool
	var propKeysPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "field_mask":
				if propFieldMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.putMapping", "field_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldMask); err != nil {
					return err
				}
				propFieldMaskPresented = true
			case "keys":
				if propKeysPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.putMapping", "keys")
				}
				if err := BuiltinVectorStringReadJSON(legacyTypeNames, in, &item.Keys); err != nil {
					return err
				}
				propKeysPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.putMapping", "value")
				}
				if err := BuiltinVectorIntReadJSON(legacyTypeNames, in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("metadata.putMapping", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldMaskPresented {
		item.FieldMask = 0
	}
	if !propKeysPresented {
		item.Keys = item.Keys[:0]
	}
	if !propValuePresented {
		item.Value = item.Value[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataPutMapping) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *MetadataPutMapping) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *MetadataPutMapping) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"field_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldMask)
	if (item.FieldMask != 0) == false {
		w = w[:backupIndexFieldMask]
	}
	backupIndexKeys := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"keys":`...)
	w = BuiltinVectorStringWriteJSONOpt(newTypeNames, short, w, item.Keys)
	if (len(item.Keys) != 0) == false {
		w = w[:backupIndexKeys]
	}
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, item.Value)
	if (len(item.Value) != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *MetadataPutMapping) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MetadataPutMapping) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("metadata.putMapping", err.Error())
	}
	return nil
}
