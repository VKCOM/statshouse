// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorTupleDouble2Read(w []byte, vec *[][2]float64) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([][2]float64, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = BuiltinTuple2DoubleRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorTupleDouble2Write(w []byte, vec [][2]float64) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = BuiltinTuple2DoubleWrite(w, &elem)
	}
	return w
}

func BuiltinVectorTupleDouble2ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, vec *[][2]float64) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[][2]float64", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue [2]float64
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := BuiltinTuple2DoubleReadJSONGeneral(tctx, in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[][2]float64", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorTupleDouble2WriteJSON(w []byte, vec [][2]float64) []byte {
	tctx := basictl.JSONWriteContext{}
	return BuiltinVectorTupleDouble2WriteJSONOpt(&tctx, w, vec)
}
func BuiltinVectorTupleDouble2WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, vec [][2]float64) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = BuiltinTuple2DoubleWriteJSONOpt(tctx, w, &elem)
	}
	return append(w, ']')
}

type TupleDouble2 [2]float64

func (TupleDouble2) TLName() string { return "tuple" }
func (TupleDouble2) TLTag() uint32  { return 0x9770768a }

func (item *TupleDouble2) Reset() {
	ptr := (*[2]float64)(item)
	BuiltinTuple2DoubleReset(ptr)
}

func (item *TupleDouble2) Read(w []byte) (_ []byte, err error) {
	ptr := (*[2]float64)(item)
	return BuiltinTuple2DoubleRead(w, ptr)
}

func (item *TupleDouble2) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *TupleDouble2) Write(w []byte) []byte {
	ptr := (*[2]float64)(item)
	return BuiltinTuple2DoubleWrite(w, ptr)
}

func (item *TupleDouble2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9770768a); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *TupleDouble2) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *TupleDouble2) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x9770768a)
	return item.Write(w)
}

func (item TupleDouble2) String() string {
	return string(item.WriteJSON(nil))
}
func (item *TupleDouble2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *TupleDouble2) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	ptr := (*[2]float64)(item)
	if err := BuiltinTuple2DoubleReadJSONGeneral(tctx, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *TupleDouble2) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *TupleDouble2) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}

func (item *TupleDouble2) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	ptr := (*[2]float64)(item)
	w = BuiltinTuple2DoubleWriteJSONOpt(tctx, w, ptr)
	return w
}
func (item *TupleDouble2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *TupleDouble2) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("tuple", err.Error())
	}
	return nil
}
