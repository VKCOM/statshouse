// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorStatshouseApiSeriesMetaRead(w []byte, vec *[]StatshouseApiSeriesMeta, nat_t uint32) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseApiSeriesMeta, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w, nat_t); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseApiSeriesMetaWrite(w []byte, vec []StatshouseApiSeriesMeta, nat_t uint32) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w, nat_t)
	}
	return w
}

func BuiltinVectorStatshouseApiSeriesMetaReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]StatshouseApiSeriesMeta, nat_t uint32) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseApiSeriesMeta", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue StatshouseApiSeriesMeta
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in, nat_t); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseApiSeriesMeta", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorStatshouseApiSeriesMetaWriteJSON(w []byte, vec []StatshouseApiSeriesMeta, nat_t uint32) []byte {
	return BuiltinVectorStatshouseApiSeriesMetaWriteJSONOpt(true, false, w, vec, nat_t)
}
func BuiltinVectorStatshouseApiSeriesMetaWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []StatshouseApiSeriesMeta, nat_t uint32) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w, nat_t)
	}
	return append(w, ']')
}

type StatshouseApiSeriesMeta struct {
	FieldsMask uint32
	TimeShift  int64
	Tags       map[string]string
	What       StatshouseApiFunction // Conditional: item.FieldsMask.1
	Name       string                // Conditional: nat_query_fields_mask.4
	Color      string                // Conditional: nat_query_fields_mask.5
	Total      int32                 // Conditional: nat_query_fields_mask.6
	MaxHosts   []string              // Conditional: nat_query_fields_mask.7
}

func (StatshouseApiSeriesMeta) TLName() string { return "statshouseApi.seriesMeta" }
func (StatshouseApiSeriesMeta) TLTag() uint32  { return 0x5c2bf286 }

func (item *StatshouseApiSeriesMeta) SetWhat(v StatshouseApiFunction) {
	item.What = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseApiSeriesMeta) ClearWhat() {
	item.What.Reset()
	item.FieldsMask &^= 1 << 1
}
func (item StatshouseApiSeriesMeta) IsSetWhat() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseApiSeriesMeta) SetName(v string, nat_query_fields_mask *uint32) {
	item.Name = v
	if nat_query_fields_mask != nil {
		*nat_query_fields_mask |= 1 << 4
	}
}
func (item *StatshouseApiSeriesMeta) ClearName(nat_query_fields_mask *uint32) {
	item.Name = ""
	if nat_query_fields_mask != nil {
		*nat_query_fields_mask &^= 1 << 4
	}
}
func (item StatshouseApiSeriesMeta) IsSetName(nat_query_fields_mask uint32) bool {
	return nat_query_fields_mask&(1<<4) != 0
}

func (item *StatshouseApiSeriesMeta) SetColor(v string, nat_query_fields_mask *uint32) {
	item.Color = v
	if nat_query_fields_mask != nil {
		*nat_query_fields_mask |= 1 << 5
	}
}
func (item *StatshouseApiSeriesMeta) ClearColor(nat_query_fields_mask *uint32) {
	item.Color = ""
	if nat_query_fields_mask != nil {
		*nat_query_fields_mask &^= 1 << 5
	}
}
func (item StatshouseApiSeriesMeta) IsSetColor(nat_query_fields_mask uint32) bool {
	return nat_query_fields_mask&(1<<5) != 0
}

func (item *StatshouseApiSeriesMeta) SetTotal(v int32, nat_query_fields_mask *uint32) {
	item.Total = v
	if nat_query_fields_mask != nil {
		*nat_query_fields_mask |= 1 << 6
	}
}
func (item *StatshouseApiSeriesMeta) ClearTotal(nat_query_fields_mask *uint32) {
	item.Total = 0
	if nat_query_fields_mask != nil {
		*nat_query_fields_mask &^= 1 << 6
	}
}
func (item StatshouseApiSeriesMeta) IsSetTotal(nat_query_fields_mask uint32) bool {
	return nat_query_fields_mask&(1<<6) != 0
}

func (item *StatshouseApiSeriesMeta) SetMaxHosts(v []string, nat_query_fields_mask *uint32) {
	item.MaxHosts = v
	if nat_query_fields_mask != nil {
		*nat_query_fields_mask |= 1 << 7
	}
}
func (item *StatshouseApiSeriesMeta) ClearMaxHosts(nat_query_fields_mask *uint32) {
	item.MaxHosts = item.MaxHosts[:0]
	if nat_query_fields_mask != nil {
		*nat_query_fields_mask &^= 1 << 7
	}
}
func (item StatshouseApiSeriesMeta) IsSetMaxHosts(nat_query_fields_mask uint32) bool {
	return nat_query_fields_mask&(1<<7) != 0
}

func (item *StatshouseApiSeriesMeta) Reset() {
	item.FieldsMask = 0
	item.TimeShift = 0
	BuiltinVectorDictionaryFieldStringReset(item.Tags)
	item.What.Reset()
	item.Name = ""
	item.Color = ""
	item.Total = 0
	item.MaxHosts = item.MaxHosts[:0]
}

func (item *StatshouseApiSeriesMeta) Read(w []byte, nat_query_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.TimeShift); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorDictionaryFieldStringRead(w, &item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = item.What.ReadBoxed(w); err != nil {
			return w, err
		}
	} else {
		item.What.Reset()
	}
	if nat_query_fields_mask&(1<<4) != 0 {
		if w, err = basictl.StringRead(w, &item.Name); err != nil {
			return w, err
		}
	} else {
		item.Name = ""
	}
	if nat_query_fields_mask&(1<<5) != 0 {
		if w, err = basictl.StringRead(w, &item.Color); err != nil {
			return w, err
		}
	} else {
		item.Color = ""
	}
	if nat_query_fields_mask&(1<<6) != 0 {
		if w, err = basictl.IntRead(w, &item.Total); err != nil {
			return w, err
		}
	} else {
		item.Total = 0
	}
	if nat_query_fields_mask&(1<<7) != 0 {
		if w, err = BuiltinVectorStringRead(w, &item.MaxHosts); err != nil {
			return w, err
		}
	} else {
		item.MaxHosts = item.MaxHosts[:0]
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseApiSeriesMeta) WriteGeneral(w []byte, nat_query_fields_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_query_fields_mask), nil
}

func (item *StatshouseApiSeriesMeta) Write(w []byte, nat_query_fields_mask uint32) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.LongWrite(w, item.TimeShift)
	w = BuiltinVectorDictionaryFieldStringWrite(w, item.Tags)
	if item.FieldsMask&(1<<1) != 0 {
		w = item.What.WriteBoxed(w)
	}
	if nat_query_fields_mask&(1<<4) != 0 {
		w = basictl.StringWrite(w, item.Name)
	}
	if nat_query_fields_mask&(1<<5) != 0 {
		w = basictl.StringWrite(w, item.Color)
	}
	if nat_query_fields_mask&(1<<6) != 0 {
		w = basictl.IntWrite(w, item.Total)
	}
	if nat_query_fields_mask&(1<<7) != 0 {
		w = BuiltinVectorStringWrite(w, item.MaxHosts)
	}
	return w
}

func (item *StatshouseApiSeriesMeta) ReadBoxed(w []byte, nat_query_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5c2bf286); err != nil {
		return w, err
	}
	return item.Read(w, nat_query_fields_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseApiSeriesMeta) WriteBoxedGeneral(w []byte, nat_query_fields_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_query_fields_mask), nil
}

func (item *StatshouseApiSeriesMeta) WriteBoxed(w []byte, nat_query_fields_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x5c2bf286)
	return item.Write(w, nat_query_fields_mask)
}

func (item *StatshouseApiSeriesMeta) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_query_fields_mask uint32) error {
	var propFieldsMaskPresented bool
	var propTimeShiftPresented bool
	var propTagsPresented bool
	var propWhatPresented bool
	var propNamePresented bool
	var propColorPresented bool
	var propTotalPresented bool
	var propMaxHostsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.seriesMeta", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "time_shift":
				if propTimeShiftPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.seriesMeta", "time_shift")
				}
				if err := Json2ReadInt64(in, &item.TimeShift); err != nil {
					return err
				}
				propTimeShiftPresented = true
			case "tags":
				if propTagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.seriesMeta", "tags")
				}
				if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, &item.Tags); err != nil {
					return err
				}
				propTagsPresented = true
			case "what":
				if propWhatPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.seriesMeta", "what")
				}
				if err := item.What.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propWhatPresented = true
			case "name":
				if propNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.seriesMeta", "name")
				}
				if nat_query_fields_mask&(1<<4) == 0 {
					return ErrorInvalidJSON("statshouseApi.seriesMeta", "field 'name' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := Json2ReadString(in, &item.Name); err != nil {
					return err
				}
				propNamePresented = true
			case "color":
				if propColorPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.seriesMeta", "color")
				}
				if nat_query_fields_mask&(1<<5) == 0 {
					return ErrorInvalidJSON("statshouseApi.seriesMeta", "field 'color' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := Json2ReadString(in, &item.Color); err != nil {
					return err
				}
				propColorPresented = true
			case "total":
				if propTotalPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.seriesMeta", "total")
				}
				if nat_query_fields_mask&(1<<6) == 0 {
					return ErrorInvalidJSON("statshouseApi.seriesMeta", "field 'total' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := Json2ReadInt32(in, &item.Total); err != nil {
					return err
				}
				propTotalPresented = true
			case "max_hosts":
				if propMaxHostsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.seriesMeta", "max_hosts")
				}
				if nat_query_fields_mask&(1<<7) == 0 {
					return ErrorInvalidJSON("statshouseApi.seriesMeta", "field 'max_hosts' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := BuiltinVectorStringReadJSON(legacyTypeNames, in, &item.MaxHosts); err != nil {
					return err
				}
				propMaxHostsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouseApi.seriesMeta", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propTimeShiftPresented {
		item.TimeShift = 0
	}
	if !propTagsPresented {
		BuiltinVectorDictionaryFieldStringReset(item.Tags)
	}
	if !propWhatPresented {
		item.What.Reset()
	}
	if !propNamePresented {
		item.Name = ""
	}
	if !propColorPresented {
		item.Color = ""
	}
	if !propTotalPresented {
		item.Total = 0
	}
	if !propMaxHostsPresented {
		item.MaxHosts = item.MaxHosts[:0]
	}
	if propWhatPresented {
		item.FieldsMask |= 1 << 1
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseApiSeriesMeta) WriteJSONGeneral(w []byte, nat_query_fields_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_query_fields_mask), nil
}

func (item *StatshouseApiSeriesMeta) WriteJSON(w []byte, nat_query_fields_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_query_fields_mask)
}
func (item *StatshouseApiSeriesMeta) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_query_fields_mask uint32) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexTimeShift := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"time_shift":`...)
	w = basictl.JSONWriteInt64(w, item.TimeShift)
	if (item.TimeShift != 0) == false {
		w = w[:backupIndexTimeShift]
	}
	backupIndexTags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tags":`...)
	w = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, item.Tags)
	if (len(item.Tags) != 0) == false {
		w = w[:backupIndexTags]
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"what":`...)
		w = item.What.WriteJSONOpt(newTypeNames, short, w)
	}
	if nat_query_fields_mask&(1<<4) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"name":`...)
		w = basictl.JSONWriteString(w, item.Name)
	}
	if nat_query_fields_mask&(1<<5) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"color":`...)
		w = basictl.JSONWriteString(w, item.Color)
	}
	if nat_query_fields_mask&(1<<6) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"total":`...)
		w = basictl.JSONWriteInt32(w, item.Total)
	}
	if nat_query_fields_mask&(1<<7) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"max_hosts":`...)
		w = BuiltinVectorStringWriteJSONOpt(newTypeNames, short, w, item.MaxHosts)
	}
	return append(w, '}')
}
