// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseGetConfigResult struct {
	Addresses         []string
	MaxAddressesCount int32
	PreviousAddresses int32
}

func (StatshouseGetConfigResult) TLName() string { return "statshouse.getConfigResult" }
func (StatshouseGetConfigResult) TLTag() uint32  { return 0xc803d07 }

func (item *StatshouseGetConfigResult) Reset() {
	item.Addresses = item.Addresses[:0]
	item.MaxAddressesCount = 0
	item.PreviousAddresses = 0
}

func (item *StatshouseGetConfigResult) Read(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = VectorString0Read(w, &item.Addresses); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.MaxAddressesCount); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.PreviousAddresses)
}

func (item *StatshouseGetConfigResult) Write(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = VectorString0Write(w, item.Addresses); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.MaxAddressesCount)
	return basictl.IntWrite(w, item.PreviousAddresses), nil
}

func (item *StatshouseGetConfigResult) ReadBoxed(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc803d07); err != nil {
		return w, err
	}
	return item.Read(w, nat_fields_mask)
}

func (item *StatshouseGetConfigResult) WriteBoxed(w []byte, nat_fields_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0xc803d07)
	return item.Write(w, nat_fields_mask)
}

func StatshouseGetConfigResult__ReadJSON(item *StatshouseGetConfigResult, j interface{}, nat_fields_mask uint32) error {
	return item.readJSON(j, nat_fields_mask)
}
func (item *StatshouseGetConfigResult) readJSON(j interface{}, nat_fields_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getConfigResult", "expected json object")
	}
	_jAddresses := _jm["addresses"]
	delete(_jm, "addresses")
	_jMaxAddressesCount := _jm["max_addresses_count"]
	delete(_jm, "max_addresses_count")
	if err := JsonReadInt32(_jMaxAddressesCount, &item.MaxAddressesCount); err != nil {
		return err
	}
	_jPreviousAddresses := _jm["previous_addresses"]
	delete(_jm, "previous_addresses")
	if err := JsonReadInt32(_jPreviousAddresses, &item.PreviousAddresses); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getConfigResult", k)
	}
	if err := VectorString0ReadJSON(_jAddresses, &item.Addresses); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetConfigResult) WriteJSON(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.Addresses) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"addresses":`...)
		if w, err = VectorString0WriteJSON(w, item.Addresses); err != nil {
			return w, err
		}
	}
	if item.MaxAddressesCount != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"max_addresses_count":`...)
		w = basictl.JSONWriteInt32(w, item.MaxAddressesCount)
	}
	if item.PreviousAddresses != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"previous_addresses":`...)
		w = basictl.JSONWriteInt32(w, item.PreviousAddresses)
	}
	return append(w, '}'), nil
}

type StatshouseGetConfigResultBytes struct {
	Addresses         [][]byte
	MaxAddressesCount int32
	PreviousAddresses int32
}

func (StatshouseGetConfigResultBytes) TLName() string { return "statshouse.getConfigResult" }
func (StatshouseGetConfigResultBytes) TLTag() uint32  { return 0xc803d07 }

func (item *StatshouseGetConfigResultBytes) Reset() {
	item.Addresses = item.Addresses[:0]
	item.MaxAddressesCount = 0
	item.PreviousAddresses = 0
}

func (item *StatshouseGetConfigResultBytes) Read(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = VectorString0BytesRead(w, &item.Addresses); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.MaxAddressesCount); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.PreviousAddresses)
}

func (item *StatshouseGetConfigResultBytes) Write(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = VectorString0BytesWrite(w, item.Addresses); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.MaxAddressesCount)
	return basictl.IntWrite(w, item.PreviousAddresses), nil
}

func (item *StatshouseGetConfigResultBytes) ReadBoxed(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc803d07); err != nil {
		return w, err
	}
	return item.Read(w, nat_fields_mask)
}

func (item *StatshouseGetConfigResultBytes) WriteBoxed(w []byte, nat_fields_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0xc803d07)
	return item.Write(w, nat_fields_mask)
}

func StatshouseGetConfigResultBytes__ReadJSON(item *StatshouseGetConfigResultBytes, j interface{}, nat_fields_mask uint32) error {
	return item.readJSON(j, nat_fields_mask)
}
func (item *StatshouseGetConfigResultBytes) readJSON(j interface{}, nat_fields_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getConfigResult", "expected json object")
	}
	_jAddresses := _jm["addresses"]
	delete(_jm, "addresses")
	_jMaxAddressesCount := _jm["max_addresses_count"]
	delete(_jm, "max_addresses_count")
	if err := JsonReadInt32(_jMaxAddressesCount, &item.MaxAddressesCount); err != nil {
		return err
	}
	_jPreviousAddresses := _jm["previous_addresses"]
	delete(_jm, "previous_addresses")
	if err := JsonReadInt32(_jPreviousAddresses, &item.PreviousAddresses); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getConfigResult", k)
	}
	if err := VectorString0BytesReadJSON(_jAddresses, &item.Addresses); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetConfigResultBytes) WriteJSON(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.Addresses) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"addresses":`...)
		if w, err = VectorString0BytesWriteJSON(w, item.Addresses); err != nil {
			return w, err
		}
	}
	if item.MaxAddressesCount != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"max_addresses_count":`...)
		w = basictl.JSONWriteInt32(w, item.MaxAddressesCount)
	}
	if item.PreviousAddresses != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"previous_addresses":`...)
		w = basictl.JSONWriteInt32(w, item.PreviousAddresses)
	}
	return append(w, '}'), nil
}
