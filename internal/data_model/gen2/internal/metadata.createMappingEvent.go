// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataCreateMappingEvent struct {
	FieldMask uint32
	Id        int32
	Key       string
	Metric    string
	Budget    int64
	// Create (TrueType) // Conditional: item.FieldMask.0
	UpdatedAt uint32
}

func (MetadataCreateMappingEvent) TLName() string { return "metadata.createMappingEvent" }
func (MetadataCreateMappingEvent) TLTag() uint32  { return 0x12345678 }

func (item *MetadataCreateMappingEvent) SetCreate(v bool) {
	if v {
		item.FieldMask |= 1 << 0
	} else {
		item.FieldMask &^= 1 << 0
	}
}
func (item MetadataCreateMappingEvent) IsSetCreate() bool { return item.FieldMask&(1<<0) != 0 }

func (item *MetadataCreateMappingEvent) Reset() {
	item.FieldMask = 0
	item.Id = 0
	item.Key = ""
	item.Metric = ""
	item.Budget = 0
	item.UpdatedAt = 0
}

func (item *MetadataCreateMappingEvent) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldMask); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Id); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Key); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.Budget); err != nil {
		return w, err
	}
	return basictl.NatRead(w, &item.UpdatedAt)
}

// This method is general version of Write, use it instead!
func (item *MetadataCreateMappingEvent) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MetadataCreateMappingEvent) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldMask)
	w = basictl.IntWrite(w, item.Id)
	w = basictl.StringWrite(w, item.Key)
	w = basictl.StringWrite(w, item.Metric)
	w = basictl.LongWrite(w, item.Budget)
	w = basictl.NatWrite(w, item.UpdatedAt)
	return w
}

func (item *MetadataCreateMappingEvent) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x12345678); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MetadataCreateMappingEvent) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MetadataCreateMappingEvent) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x12345678)
	return item.Write(w)
}

func (item MetadataCreateMappingEvent) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MetadataCreateMappingEvent) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldMaskPresented bool
	var propIdPresented bool
	var propKeyPresented bool
	var propMetricPresented bool
	var propBudgetPresented bool
	var trueTypeCreatePresented bool
	var trueTypeCreateValue bool
	var propUpdatedAtPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "field_mask":
				if propFieldMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.createMappingEvent", "field_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldMask); err != nil {
					return err
				}
				propFieldMaskPresented = true
			case "id":
				if propIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.createMappingEvent", "id")
				}
				if err := Json2ReadInt32(in, &item.Id); err != nil {
					return err
				}
				propIdPresented = true
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.createMappingEvent", "key")
				}
				if err := Json2ReadString(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "metric":
				if propMetricPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.createMappingEvent", "metric")
				}
				if err := Json2ReadString(in, &item.Metric); err != nil {
					return err
				}
				propMetricPresented = true
			case "budget":
				if propBudgetPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.createMappingEvent", "budget")
				}
				if err := Json2ReadInt64(in, &item.Budget); err != nil {
					return err
				}
				propBudgetPresented = true
			case "create":
				if trueTypeCreatePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.createMappingEvent", "create")
				}
				if err := Json2ReadBool(in, &trueTypeCreateValue); err != nil {
					return err
				}
				trueTypeCreatePresented = true
			case "updated_at":
				if propUpdatedAtPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.createMappingEvent", "updated_at")
				}
				if err := Json2ReadUint32(in, &item.UpdatedAt); err != nil {
					return err
				}
				propUpdatedAtPresented = true
			default:
				return ErrorInvalidJSONExcessElement("metadata.createMappingEvent", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldMaskPresented {
		item.FieldMask = 0
	}
	if !propIdPresented {
		item.Id = 0
	}
	if !propKeyPresented {
		item.Key = ""
	}
	if !propMetricPresented {
		item.Metric = ""
	}
	if !propBudgetPresented {
		item.Budget = 0
	}
	if !propUpdatedAtPresented {
		item.UpdatedAt = 0
	}
	if trueTypeCreatePresented {
		if trueTypeCreateValue {
			item.FieldMask |= 1 << 0
		}
	}
	// tries to set bit to zero if it is 1
	if trueTypeCreatePresented && !trueTypeCreateValue && (item.FieldMask&(1<<0) != 0) {
		return ErrorInvalidJSON("metadata.createMappingEvent", "fieldmask bit field_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataCreateMappingEvent) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *MetadataCreateMappingEvent) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *MetadataCreateMappingEvent) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"field_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldMask)
	if (item.FieldMask != 0) == false {
		w = w[:backupIndexFieldMask]
	}
	backupIndexId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"id":`...)
	w = basictl.JSONWriteInt32(w, item.Id)
	if (item.Id != 0) == false {
		w = w[:backupIndexId]
	}
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteString(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	backupIndexMetric := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metric":`...)
	w = basictl.JSONWriteString(w, item.Metric)
	if (len(item.Metric) != 0) == false {
		w = w[:backupIndexMetric]
	}
	backupIndexBudget := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"budget":`...)
	w = basictl.JSONWriteInt64(w, item.Budget)
	if (item.Budget != 0) == false {
		w = w[:backupIndexBudget]
	}
	if item.FieldMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"create":true`...)
	}
	backupIndexUpdatedAt := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"updated_at":`...)
	w = basictl.JSONWriteUint32(w, item.UpdatedAt)
	if (item.UpdatedAt != 0) == false {
		w = w[:backupIndexUpdatedAt]
	}
	return append(w, '}')
}

func (item *MetadataCreateMappingEvent) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MetadataCreateMappingEvent) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("metadata.createMappingEvent", err.Error())
	}
	return nil
}
