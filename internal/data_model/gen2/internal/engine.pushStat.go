// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EnginePushStat struct {
	FieldsMask uint32
	Stat       Stat // Conditional: item.FieldsMask.0
}

func (EnginePushStat) TLName() string { return "engine.pushStat" }
func (EnginePushStat) TLTag() uint32  { return 0xf4b19fa2 }

func (item *EnginePushStat) SetStat(v Stat) {
	item.Stat = v
	item.FieldsMask |= 1 << 0
}
func (item *EnginePushStat) ClearStat() {
	item.Stat.Reset()
	item.FieldsMask &^= 1 << 0
}
func (item EnginePushStat) IsSetStat() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *EnginePushStat) Reset() {
	item.FieldsMask = 0
	item.Stat.Reset()
}

func (item *EnginePushStat) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = item.Stat.Read(w); err != nil {
			return w, err
		}
	} else {
		item.Stat.Reset()
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *EnginePushStat) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *EnginePushStat) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<0) != 0 {
		w = item.Stat.Write(w)
	}
	return w
}

func (item *EnginePushStat) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xf4b19fa2); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *EnginePushStat) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *EnginePushStat) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xf4b19fa2)
	return item.Write(w)
}

func (item *EnginePushStat) ReadResult(w []byte, ret *bool) (_ []byte, err error) {
	return BoolReadBoxed(w, ret)
}

func (item *EnginePushStat) WriteResult(w []byte, ret bool) (_ []byte, err error) {
	w = BoolWriteBoxed(w, ret)
	return w, nil
}

func (item *EnginePushStat) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *bool) error {
	if err := Json2ReadBool(in, ret); err != nil {
		return err
	}
	return nil
}

func (item *EnginePushStat) WriteResultJSON(w []byte, ret bool) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *EnginePushStat) writeResultJSON(newTypeNames bool, short bool, w []byte, ret bool) (_ []byte, err error) {
	w = basictl.JSONWriteBool(w, ret)
	return w, nil
}

func (item *EnginePushStat) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret bool
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *EnginePushStat) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret bool
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *EnginePushStat) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret bool
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item EnginePushStat) String() string {
	return string(item.WriteJSON(nil))
}

func (item *EnginePushStat) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propStatPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.pushStat", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "stat":
				if propStatPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.pushStat", "stat")
				}
				if err := item.Stat.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propStatPresented = true
			default:
				return ErrorInvalidJSONExcessElement("engine.pushStat", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propStatPresented {
		item.Stat.Reset()
	}
	if propStatPresented {
		item.FieldsMask |= 1 << 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *EnginePushStat) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *EnginePushStat) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *EnginePushStat) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"stat":`...)
		w = item.Stat.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, '}')
}

func (item *EnginePushStat) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *EnginePushStat) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("engine.pushStat", err.Error())
	}
	return nil
}
