// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type NetPid struct {
	Ip      int32
	PortPid int32
	Utime   int32
}

func (NetPid) TLName() string { return "net.pid" }
func (NetPid) TLTag() uint32  { return 0x46409ccf }

func (item *NetPid) Reset() {
	item.Ip = 0
	item.PortPid = 0
	item.Utime = 0
}

func (item *NetPid) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Ip); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.PortPid); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Utime)
}

// This method is general version of Write, use it instead!
func (item *NetPid) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *NetPid) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.Ip)
	w = basictl.IntWrite(w, item.PortPid)
	w = basictl.IntWrite(w, item.Utime)
	return w
}

func (item *NetPid) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x46409ccf); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *NetPid) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *NetPid) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x46409ccf)
	return item.Write(w)
}

func (item NetPid) String() string {
	return string(item.WriteJSON(nil))
}

func (item *NetPid) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propIpPresented bool
	var propPortPidPresented bool
	var propUtimePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "ip":
				if propIpPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("net.pid", "ip")
				}
				if err := Json2ReadInt32(in, &item.Ip); err != nil {
					return err
				}
				propIpPresented = true
			case "port_pid":
				if propPortPidPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("net.pid", "port_pid")
				}
				if err := Json2ReadInt32(in, &item.PortPid); err != nil {
					return err
				}
				propPortPidPresented = true
			case "utime":
				if propUtimePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("net.pid", "utime")
				}
				if err := Json2ReadInt32(in, &item.Utime); err != nil {
					return err
				}
				propUtimePresented = true
			default:
				return ErrorInvalidJSONExcessElement("net.pid", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propIpPresented {
		item.Ip = 0
	}
	if !propPortPidPresented {
		item.PortPid = 0
	}
	if !propUtimePresented {
		item.Utime = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *NetPid) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *NetPid) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *NetPid) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexIp := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"ip":`...)
	w = basictl.JSONWriteInt32(w, item.Ip)
	if (item.Ip != 0) == false {
		w = w[:backupIndexIp]
	}
	backupIndexPortPid := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"port_pid":`...)
	w = basictl.JSONWriteInt32(w, item.PortPid)
	if (item.PortPid != 0) == false {
		w = w[:backupIndexPortPid]
	}
	backupIndexUtime := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"utime":`...)
	w = basictl.JSONWriteInt32(w, item.Utime)
	if (item.Utime != 0) == false {
		w = w[:backupIndexUtime]
	}
	return append(w, '}')
}

func (item *NetPid) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *NetPid) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("net.pid", err.Error())
	}
	return nil
}
