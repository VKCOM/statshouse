// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type NetPid struct {
	Ip      int32
	PortPid int32
	Utime   int32
}

func (NetPid) TLName() string { return "net.pid" }
func (NetPid) TLTag() uint32  { return 0x46409ccf }

func (item *NetPid) Reset() {
	item.Ip = 0
	item.PortPid = 0
	item.Utime = 0
}

func (item *NetPid) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.Ip); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.PortPid); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.Utime)
}

func (item *NetPid) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.Ip)
	w = basictl.IntWrite(w, item.PortPid)
	return basictl.IntWrite(w, item.Utime), nil
}

func (item *NetPid) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x46409ccf); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *NetPid) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x46409ccf)
	return item.Write(w)
}

func (item NetPid) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func NetPid__ReadJSON(item *NetPid, j interface{}) error { return item.readJSON(j) }
func (item *NetPid) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("net.pid", "expected json object")
	}
	_jIp := _jm["ip"]
	delete(_jm, "ip")
	if err := JsonReadInt32(_jIp, &item.Ip); err != nil {
		return err
	}
	_jPortPid := _jm["port_pid"]
	delete(_jm, "port_pid")
	if err := JsonReadInt32(_jPortPid, &item.PortPid); err != nil {
		return err
	}
	_jUtime := _jm["utime"]
	delete(_jm, "utime")
	if err := JsonReadInt32(_jUtime, &item.Utime); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("net.pid", k)
	}
	return nil
}

func (item *NetPid) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.Ip != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"ip":`...)
		w = basictl.JSONWriteInt32(w, item.Ip)
	}
	if item.PortPid != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"port_pid":`...)
		w = basictl.JSONWriteInt32(w, item.PortPid)
	}
	if item.Utime != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"utime":`...)
		w = basictl.JSONWriteInt32(w, item.Utime)
	}
	return append(w, '}'), nil
}

func (item *NetPid) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *NetPid) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("net.pid", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("net.pid", err.Error())
	}
	return nil
}
