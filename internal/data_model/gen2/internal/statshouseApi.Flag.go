// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

var _StatshouseApiFlag = [3]UnionElement{
	{TLTag: 0x670ab89c, TLName: "statshouseApi.flagMapped", TLString: "statshouseApi.flagMapped#670ab89c"},
	{TLTag: 0x4ca979c0, TLName: "statshouseApi.flagRaw", TLString: "statshouseApi.flagRaw#4ca979c0"},
	{TLTag: 0x2a6e4c14, TLName: "statshouseApi.flagAuto", TLString: "statshouseApi.flagAuto#2a6e4c14"},
}

func StatshouseApiFlag__MakeEnum(i int) StatshouseApiFlag { return StatshouseApiFlag{index: i} }

type StatshouseApiFlag struct {
	index int
}

func (item StatshouseApiFlag) TLName() string { return _StatshouseApiFlag[item.index].TLName }
func (item StatshouseApiFlag) TLTag() uint32  { return _StatshouseApiFlag[item.index].TLTag }

func (item *StatshouseApiFlag) Reset() { item.index = 0 }

func (item *StatshouseApiFlag) IsMapped() bool { return item.index == 0 }
func (item *StatshouseApiFlag) SetMapped()     { item.index = 0 }

func (item *StatshouseApiFlag) IsRaw() bool { return item.index == 1 }
func (item *StatshouseApiFlag) SetRaw()     { item.index = 1 }

func (item *StatshouseApiFlag) IsAuto() bool { return item.index == 2 }
func (item *StatshouseApiFlag) SetAuto()     { item.index = 2 }

func (item *StatshouseApiFlag) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x670ab89c:
		item.index = 0
		return w, nil
	case 0x4ca979c0:
		item.index = 1
		return w, nil
	case 0x2a6e4c14:
		item.index = 2
		return w, nil
	default:
		return w, ErrorInvalidUnionTag("statshouseApi.Flag", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseApiFlag) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item StatshouseApiFlag) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _StatshouseApiFlag[item.index].TLTag)
	return w
}

func (item *StatshouseApiFlag) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_jtype := in.UnsafeString()
	if !in.Ok() {
		return ErrorInvalidJSON("statshouseApi.Flag", "expected string")
	}
	switch _jtype {
	case "statshouseApi.flagMapped#670ab89c", "statshouseApi.flagMapped", "#670ab89c":
		if !legacyTypeNames && _jtype == "statshouseApi.flagMapped#670ab89c" {
			return ErrorInvalidUnionLegacyTagJSON("statshouseApi.Flag", "statshouseApi.flagMapped#670ab89c")
		}
		item.index = 0
		return nil
	case "statshouseApi.flagRaw#4ca979c0", "statshouseApi.flagRaw", "#4ca979c0":
		if !legacyTypeNames && _jtype == "statshouseApi.flagRaw#4ca979c0" {
			return ErrorInvalidUnionLegacyTagJSON("statshouseApi.Flag", "statshouseApi.flagRaw#4ca979c0")
		}
		item.index = 1
		return nil
	case "statshouseApi.flagAuto#2a6e4c14", "statshouseApi.flagAuto", "#2a6e4c14":
		if !legacyTypeNames && _jtype == "statshouseApi.flagAuto#2a6e4c14" {
			return ErrorInvalidUnionLegacyTagJSON("statshouseApi.Flag", "statshouseApi.flagAuto#2a6e4c14")
		}
		item.index = 2
		return nil
	default:
		return ErrorInvalidEnumTagJSON("statshouseApi.Flag", _jtype)
	}
}

// This method is general version of WriteJSON, use it instead!
func (item StatshouseApiFlag) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item StatshouseApiFlag) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item StatshouseApiFlag) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '"')
	if newTypeNames {
		w = append(w, _StatshouseApiFlag[item.index].TLName...)
	} else {
		w = append(w, _StatshouseApiFlag[item.index].TLString...)
	}
	return append(w, '"')
}

func (item StatshouseApiFlag) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseApiFlag) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseApiFlag) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouseApi.Flag", err.Error())
	}
	return nil
}

func StatshouseApiFlagAuto() StatshouseApiFlag { return StatshouseApiFlag__MakeEnum(2) }

func StatshouseApiFlagMapped() StatshouseApiFlag { return StatshouseApiFlag__MakeEnum(0) }

func StatshouseApiFlagRaw() StatshouseApiFlag { return StatshouseApiFlag__MakeEnum(1) }
