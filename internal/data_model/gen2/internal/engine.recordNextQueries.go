// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EngineRecordNextQueries struct {
	Binlogname string
	NumQueries int32
	Append     bool
}

func (EngineRecordNextQueries) TLName() string { return "engine.recordNextQueries" }
func (EngineRecordNextQueries) TLTag() uint32  { return 0x1e9d6 }

func (item *EngineRecordNextQueries) Reset() {
	item.Binlogname = ""
	item.NumQueries = 0
	item.Append = false
}

func (item *EngineRecordNextQueries) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringRead(w, &item.Binlogname); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.NumQueries); err != nil {
		return w, err
	}
	return BoolReadBoxed(w, &item.Append)
}

func (item *EngineRecordNextQueries) Write(w []byte) (_ []byte, err error) {
	if w, err = basictl.StringWrite(w, item.Binlogname); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.NumQueries)
	return BoolWriteBoxed(w, item.Append)
}

func (item *EngineRecordNextQueries) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1e9d6); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *EngineRecordNextQueries) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1e9d6)
	return item.Write(w)
}

func (item *EngineRecordNextQueries) ReadResult(w []byte, ret *bool) (_ []byte, err error) {
	return BoolReadBoxed(w, ret)
}

func (item *EngineRecordNextQueries) WriteResult(w []byte, ret bool) (_ []byte, err error) {
	return BoolWriteBoxed(w, ret)
}

func (item *EngineRecordNextQueries) ReadResultJSON(j interface{}, ret *bool) error {
	if err := JsonReadBool(j, ret); err != nil {
		return err
	}
	return nil
}

func (item *EngineRecordNextQueries) WriteResultJSON(w []byte, ret bool) (_ []byte, err error) {
	w = basictl.JSONWriteBool(w, ret)
	return w, nil
}

func (item *EngineRecordNextQueries) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret bool
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *EngineRecordNextQueries) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("engine.recordNextQueries", err.Error())
	}
	var ret bool
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item EngineRecordNextQueries) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func EngineRecordNextQueries__ReadJSON(item *EngineRecordNextQueries, j interface{}) error {
	return item.readJSON(j)
}
func (item *EngineRecordNextQueries) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("engine.recordNextQueries", "expected json object")
	}
	_jBinlogname := _jm["binlogname"]
	delete(_jm, "binlogname")
	if err := JsonReadString(_jBinlogname, &item.Binlogname); err != nil {
		return err
	}
	_jNumQueries := _jm["num_queries"]
	delete(_jm, "num_queries")
	if err := JsonReadInt32(_jNumQueries, &item.NumQueries); err != nil {
		return err
	}
	_jAppend := _jm["append"]
	delete(_jm, "append")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("engine.recordNextQueries", k)
	}
	if err := JsonReadBool(_jAppend, &item.Append); err != nil {
		return err
	}
	return nil
}

func (item *EngineRecordNextQueries) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.Binlogname) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"binlogname":`...)
		w = basictl.JSONWriteString(w, item.Binlogname)
	}
	if item.NumQueries != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"num_queries":`...)
		w = basictl.JSONWriteInt32(w, item.NumQueries)
	}
	if item.Append {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"append":`...)
		w = basictl.JSONWriteBool(w, item.Append)
	}
	return append(w, '}'), nil
}

func (item *EngineRecordNextQueries) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *EngineRecordNextQueries) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("engine.recordNextQueries", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("engine.recordNextQueries", err.Error())
	}
	return nil
}
