// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EngineHttpQuery struct {
	FieldsMask uint32
	Uri        string            // Conditional: item.FieldsMask.0
	Args       map[string]string // Conditional: item.FieldsMask.1
	Headers    map[string]string // Conditional: item.FieldsMask.2
}

func (EngineHttpQuery) TLName() string { return "engine.httpQuery" }
func (EngineHttpQuery) TLTag() uint32  { return 0x58300321 }

func (item *EngineHttpQuery) SetUri(v string) {
	item.Uri = v
	item.FieldsMask |= 1 << 0
}
func (item *EngineHttpQuery) ClearUri() {
	item.Uri = ""
	item.FieldsMask &^= 1 << 0
}
func (item EngineHttpQuery) IsSetUri() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *EngineHttpQuery) SetArgs(v map[string]string) {
	item.Args = v
	item.FieldsMask |= 1 << 1
}
func (item *EngineHttpQuery) ClearArgs() {
	BuiltinVectorDictionaryFieldStringReset(item.Args)
	item.FieldsMask &^= 1 << 1
}
func (item EngineHttpQuery) IsSetArgs() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *EngineHttpQuery) SetHeaders(v map[string]string) {
	item.Headers = v
	item.FieldsMask |= 1 << 2
}
func (item *EngineHttpQuery) ClearHeaders() {
	BuiltinVectorDictionaryFieldStringReset(item.Headers)
	item.FieldsMask &^= 1 << 2
}
func (item EngineHttpQuery) IsSetHeaders() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *EngineHttpQuery) Reset() {
	item.FieldsMask = 0
	item.Uri = ""
	BuiltinVectorDictionaryFieldStringReset(item.Args)
	BuiltinVectorDictionaryFieldStringReset(item.Headers)
}

func (item *EngineHttpQuery) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.StringRead(w, &item.Uri); err != nil {
			return w, err
		}
	} else {
		item.Uri = ""
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = BuiltinVectorDictionaryFieldStringRead(w, &item.Args); err != nil {
			return w, err
		}
	} else {
		BuiltinVectorDictionaryFieldStringReset(item.Args)
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = BuiltinVectorDictionaryFieldStringRead(w, &item.Headers); err != nil {
			return w, err
		}
	} else {
		BuiltinVectorDictionaryFieldStringReset(item.Headers)
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *EngineHttpQuery) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *EngineHttpQuery) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.StringWrite(w, item.Uri)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = BuiltinVectorDictionaryFieldStringWrite(w, item.Args)
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = BuiltinVectorDictionaryFieldStringWrite(w, item.Headers)
	}
	return w
}

func (item *EngineHttpQuery) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x58300321); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *EngineHttpQuery) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *EngineHttpQuery) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x58300321)
	return item.Write(w)
}

func (item EngineHttpQuery) String() string {
	return string(item.WriteJSON(nil))
}

func (item *EngineHttpQuery) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propUriPresented bool
	var propArgsPresented bool
	var propHeadersPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.httpQuery", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "uri":
				if propUriPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.httpQuery", "uri")
				}
				if err := Json2ReadString(in, &item.Uri); err != nil {
					return err
				}
				propUriPresented = true
			case "args":
				if propArgsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.httpQuery", "args")
				}
				if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, &item.Args); err != nil {
					return err
				}
				propArgsPresented = true
			case "headers":
				if propHeadersPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.httpQuery", "headers")
				}
				if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, &item.Headers); err != nil {
					return err
				}
				propHeadersPresented = true
			default:
				return ErrorInvalidJSONExcessElement("engine.httpQuery", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propUriPresented {
		item.Uri = ""
	}
	if !propArgsPresented {
		BuiltinVectorDictionaryFieldStringReset(item.Args)
	}
	if !propHeadersPresented {
		BuiltinVectorDictionaryFieldStringReset(item.Headers)
	}
	if propUriPresented {
		item.FieldsMask |= 1 << 0
	}
	if propArgsPresented {
		item.FieldsMask |= 1 << 1
	}
	if propHeadersPresented {
		item.FieldsMask |= 1 << 2
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *EngineHttpQuery) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *EngineHttpQuery) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *EngineHttpQuery) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"uri":`...)
		w = basictl.JSONWriteString(w, item.Uri)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"args":`...)
		w = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, item.Args)
	}
	if item.FieldsMask&(1<<2) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"headers":`...)
		w = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, item.Headers)
	}
	return append(w, '}')
}

func (item *EngineHttpQuery) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *EngineHttpQuery) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("engine.httpQuery", err.Error())
	}
	return nil
}
