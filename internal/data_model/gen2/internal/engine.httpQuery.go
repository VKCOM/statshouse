// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EngineHttpQuery struct {
	FieldsMask uint32
	Uri        string            // Conditional: item.FieldsMask.0
	Args       map[string]string // Conditional: item.FieldsMask.1
	Headers    map[string]string // Conditional: item.FieldsMask.2
}

func (EngineHttpQuery) TLName() string { return "engine.httpQuery" }
func (EngineHttpQuery) TLTag() uint32  { return 0x58300321 }

func (item *EngineHttpQuery) SetUri(v string) {
	item.Uri = v
	item.FieldsMask |= 1 << 0
}
func (item *EngineHttpQuery) ClearUri() {
	item.Uri = ""
	item.FieldsMask &^= 1 << 0
}
func (item EngineHttpQuery) IsSetUri() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *EngineHttpQuery) SetArgs(v map[string]string) {
	item.Args = v
	item.FieldsMask |= 1 << 1
}
func (item *EngineHttpQuery) ClearArgs() {
	VectorDictionaryFieldString0Reset(item.Args)
	item.FieldsMask &^= 1 << 1
}
func (item EngineHttpQuery) IsSetArgs() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *EngineHttpQuery) SetHeaders(v map[string]string) {
	item.Headers = v
	item.FieldsMask |= 1 << 2
}
func (item *EngineHttpQuery) ClearHeaders() {
	VectorDictionaryFieldString0Reset(item.Headers)
	item.FieldsMask &^= 1 << 2
}
func (item EngineHttpQuery) IsSetHeaders() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *EngineHttpQuery) Reset() {
	item.FieldsMask = 0
	item.Uri = ""
	VectorDictionaryFieldString0Reset(item.Args)
	VectorDictionaryFieldString0Reset(item.Headers)
}

func (item *EngineHttpQuery) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.StringRead(w, &item.Uri); err != nil {
			return w, err
		}
	} else {
		item.Uri = ""
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = VectorDictionaryFieldString0Read(w, &item.Args); err != nil {
			return w, err
		}
	} else {
		VectorDictionaryFieldString0Reset(item.Args)
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = VectorDictionaryFieldString0Read(w, &item.Headers); err != nil {
			return w, err
		}
	} else {
		VectorDictionaryFieldString0Reset(item.Headers)
	}
	return w, nil
}

func (item *EngineHttpQuery) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.StringWrite(w, item.Uri); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = VectorDictionaryFieldString0Write(w, item.Args); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = VectorDictionaryFieldString0Write(w, item.Headers); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *EngineHttpQuery) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x58300321); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *EngineHttpQuery) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x58300321)
	return item.Write(w)
}

func (item EngineHttpQuery) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func EngineHttpQuery__ReadJSON(item *EngineHttpQuery, j interface{}) error { return item.readJSON(j) }
func (item *EngineHttpQuery) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("engine.httpQuery", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jUri := _jm["uri"]
	delete(_jm, "uri")
	_jArgs := _jm["args"]
	delete(_jm, "args")
	_jHeaders := _jm["headers"]
	delete(_jm, "headers")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("engine.httpQuery", k)
	}
	if _jUri != nil {
		item.FieldsMask |= 1 << 0
	}
	if _jArgs != nil {
		item.FieldsMask |= 1 << 1
	}
	if _jHeaders != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jUri != nil {
		if err := JsonReadString(_jUri, &item.Uri); err != nil {
			return err
		}
	} else {
		item.Uri = ""
	}
	if _jArgs != nil {
		if err := VectorDictionaryFieldString0ReadJSON(_jArgs, &item.Args); err != nil {
			return err
		}
	} else {
		VectorDictionaryFieldString0Reset(item.Args)
	}
	if _jHeaders != nil {
		if err := VectorDictionaryFieldString0ReadJSON(_jHeaders, &item.Headers); err != nil {
			return err
		}
	} else {
		VectorDictionaryFieldString0Reset(item.Headers)
	}
	return nil
}

func (item *EngineHttpQuery) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<0) != 0 {
		if len(item.Uri) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"uri":`...)
			w = basictl.JSONWriteString(w, item.Uri)
		}
	}
	if item.FieldsMask&(1<<1) != 0 {
		if len(item.Args) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"args":`...)
			if w, err = VectorDictionaryFieldString0WriteJSON(w, item.Args); err != nil {
				return w, err
			}
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if len(item.Headers) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"headers":`...)
			if w, err = VectorDictionaryFieldString0WriteJSON(w, item.Headers); err != nil {
				return w, err
			}
		}
	}
	return append(w, '}'), nil
}

func (item *EngineHttpQuery) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *EngineHttpQuery) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("engine.httpQuery", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("engine.httpQuery", err.Error())
	}
	return nil
}
