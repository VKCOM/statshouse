// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataHistoryShortResponse struct {
	Events []MetadataHistoryShortResponseEvent
}

func (MetadataHistoryShortResponse) TLName() string { return "metadata.history_short_response" }
func (MetadataHistoryShortResponse) TLTag() uint32  { return 0x7186baaf }

func (item *MetadataHistoryShortResponse) Reset() {
	item.Events = item.Events[:0]
}

func (item *MetadataHistoryShortResponse) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return VectorMetadataHistoryShortResponseEvent0Read(w, &item.Events, nat_field_mask)
}

func (item *MetadataHistoryShortResponse) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return VectorMetadataHistoryShortResponseEvent0Write(w, item.Events, nat_field_mask)
}

func (item *MetadataHistoryShortResponse) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x7186baaf); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataHistoryShortResponse) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x7186baaf)
	return item.Write(w, nat_field_mask)
}

func MetadataHistoryShortResponse__ReadJSON(item *MetadataHistoryShortResponse, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *MetadataHistoryShortResponse) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("metadata.history_short_response", "expected json object")
	}
	_jEvents := _jm["events"]
	delete(_jm, "events")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.history_short_response", k)
	}
	if err := VectorMetadataHistoryShortResponseEvent0ReadJSON(_jEvents, &item.Events, nat_field_mask); err != nil {
		return err
	}
	return nil
}

func (item *MetadataHistoryShortResponse) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.Events) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"events":`...)
		if w, err = VectorMetadataHistoryShortResponseEvent0WriteJSON(w, item.Events, nat_field_mask); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}
