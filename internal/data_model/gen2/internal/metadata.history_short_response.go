// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataHistoryShortResponse struct {
	Events []MetadataHistoryShortResponseEvent
}

func (MetadataHistoryShortResponse) TLName() string { return "metadata.history_short_response" }
func (MetadataHistoryShortResponse) TLTag() uint32  { return 0x7186baaf }

func (item *MetadataHistoryShortResponse) Reset() {
	item.Events = item.Events[:0]
}

func (item *MetadataHistoryShortResponse) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return BuiltinVectorMetadataHistoryShortResponseEventRead(w, &item.Events, nat_field_mask)
}

// This method is general version of Write, use it instead!
func (item *MetadataHistoryShortResponse) WriteGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_field_mask), nil
}

func (item *MetadataHistoryShortResponse) Write(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	w = BuiltinVectorMetadataHistoryShortResponseEventWrite(w, item.Events, nat_field_mask)
	return w
}

func (item *MetadataHistoryShortResponse) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x7186baaf); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MetadataHistoryShortResponse) WriteBoxedGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_field_mask), nil
}

func (item *MetadataHistoryShortResponse) WriteBoxed(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x7186baaf)
	return item.Write(w, nat_field_mask)
}

func (item *MetadataHistoryShortResponse) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_field_mask uint32) error {
	var rawEvents []byte

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "events":
				if rawEvents != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.history_short_response", "events")
				}
				rawEvents = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			default:
				return ErrorInvalidJSONExcessElement("metadata.history_short_response", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	var inEventsPointer *basictl.JsonLexer
	inEvents := basictl.JsonLexer{Data: rawEvents}
	if rawEvents != nil {
		inEventsPointer = &inEvents
	}
	if err := BuiltinVectorMetadataHistoryShortResponseEventReadJSON(legacyTypeNames, inEventsPointer, &item.Events, nat_field_mask); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataHistoryShortResponse) WriteJSONGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_field_mask), nil
}

func (item *MetadataHistoryShortResponse) WriteJSON(w []byte, nat_field_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_field_mask)
}
func (item *MetadataHistoryShortResponse) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_field_mask uint32) []byte {
	w = append(w, '{')
	backupIndexEvents := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"events":`...)
	w = BuiltinVectorMetadataHistoryShortResponseEventWriteJSONOpt(newTypeNames, short, w, item.Events, nat_field_mask)
	if (len(item.Events) != 0) == false {
		w = w[:backupIndexEvents]
	}
	return append(w, '}')
}
