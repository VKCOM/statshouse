// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseAddMetricsBatch struct {
	FieldsMask uint32
	Metrics    []StatshouseMetric
}

func (StatshouseAddMetricsBatch) TLName() string { return "statshouse.addMetricsBatch" }
func (StatshouseAddMetricsBatch) TLTag() uint32  { return 0x56580239 }

func (item *StatshouseAddMetricsBatch) Reset() {
	item.FieldsMask = 0
	item.Metrics = item.Metrics[:0]
}

func (item *StatshouseAddMetricsBatch) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	return VectorStatshouseMetric0Read(w, &item.Metrics)
}

func (item *StatshouseAddMetricsBatch) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	return VectorStatshouseMetric0Write(w, item.Metrics)
}

func (item *StatshouseAddMetricsBatch) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x56580239); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseAddMetricsBatch) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x56580239)
	return item.Write(w)
}

func (item *StatshouseAddMetricsBatch) ReadResult(w []byte, ret *True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseAddMetricsBatch) WriteResult(w []byte, ret True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *StatshouseAddMetricsBatch) ReadResultJSON(j interface{}, ret *True) error {
	if err := True__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseAddMetricsBatch) WriteResultJSON(w []byte, ret True) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseAddMetricsBatch) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseAddMetricsBatch) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.addMetricsBatch", err.Error())
	}
	var ret True
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseAddMetricsBatch) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseAddMetricsBatch__ReadJSON(item *StatshouseAddMetricsBatch, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseAddMetricsBatch) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.addMetricsBatch", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jMetrics := _jm["metrics"]
	delete(_jm, "metrics")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.addMetricsBatch", k)
	}
	if err := VectorStatshouseMetric0ReadJSON(_jMetrics, &item.Metrics); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseAddMetricsBatch) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.Metrics) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metrics":`...)
		if w, err = VectorStatshouseMetric0WriteJSON(w, item.Metrics); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseAddMetricsBatch) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseAddMetricsBatch) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.addMetricsBatch", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.addMetricsBatch", err.Error())
	}
	return nil
}

type StatshouseAddMetricsBatchBytes struct {
	FieldsMask uint32
	Metrics    []StatshouseMetricBytes
}

func (StatshouseAddMetricsBatchBytes) TLName() string { return "statshouse.addMetricsBatch" }
func (StatshouseAddMetricsBatchBytes) TLTag() uint32  { return 0x56580239 }

func (item *StatshouseAddMetricsBatchBytes) Reset() {
	item.FieldsMask = 0
	item.Metrics = item.Metrics[:0]
}

func (item *StatshouseAddMetricsBatchBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	return VectorStatshouseMetric0BytesRead(w, &item.Metrics)
}

func (item *StatshouseAddMetricsBatchBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	return VectorStatshouseMetric0BytesWrite(w, item.Metrics)
}

func (item *StatshouseAddMetricsBatchBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x56580239); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseAddMetricsBatchBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x56580239)
	return item.Write(w)
}

func (item *StatshouseAddMetricsBatchBytes) ReadResult(w []byte, ret *True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseAddMetricsBatchBytes) WriteResult(w []byte, ret True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *StatshouseAddMetricsBatchBytes) ReadResultJSON(j interface{}, ret *True) error {
	if err := True__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseAddMetricsBatchBytes) WriteResultJSON(w []byte, ret True) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseAddMetricsBatchBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseAddMetricsBatchBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.addMetricsBatch", err.Error())
	}
	var ret True
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseAddMetricsBatchBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseAddMetricsBatchBytes__ReadJSON(item *StatshouseAddMetricsBatchBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseAddMetricsBatchBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.addMetricsBatch", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jMetrics := _jm["metrics"]
	delete(_jm, "metrics")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.addMetricsBatch", k)
	}
	if err := VectorStatshouseMetric0BytesReadJSON(_jMetrics, &item.Metrics); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseAddMetricsBatchBytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if len(item.Metrics) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metrics":`...)
		if w, err = VectorStatshouseMetric0BytesWriteJSON(w, item.Metrics); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseAddMetricsBatchBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseAddMetricsBatchBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.addMetricsBatch", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.addMetricsBatch", err.Error())
	}
	return nil
}
