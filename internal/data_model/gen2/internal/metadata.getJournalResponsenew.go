// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataGetJournalResponsenew struct {
	CurrentVersion int64
	Events         []MetadataEvent
}

func (MetadataGetJournalResponsenew) TLName() string { return "metadata.getJournalResponsenew" }
func (MetadataGetJournalResponsenew) TLTag() uint32  { return 0x9286aaaa }

func (item *MetadataGetJournalResponsenew) Reset() {
	item.CurrentVersion = 0
	item.Events = item.Events[:0]
}

func (item *MetadataGetJournalResponsenew) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.CurrentVersion); err != nil {
		return w, err
	}
	return BuiltinVectorMetadataEventRead(w, &item.Events)
}

func (item *MetadataGetJournalResponsenew) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = basictl.LongWrite(w, item.CurrentVersion)
	return BuiltinVectorMetadataEventWrite(w, item.Events)
}

func (item *MetadataGetJournalResponsenew) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286aaaa); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataGetJournalResponsenew) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286aaaa)
	return item.Write(w, nat_field_mask)
}

func (item *MetadataGetJournalResponsenew) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_field_mask uint32) error {
	var propCurrentVersionPresented bool
	var propEventsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "current_version":
				if propCurrentVersionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getJournalResponsenew", "current_version")
				}
				if err := Json2ReadInt64(in, &item.CurrentVersion); err != nil {
					return err
				}
				propCurrentVersionPresented = true
			case "events":
				if propEventsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getJournalResponsenew", "events")
				}
				if err := BuiltinVectorMetadataEventReadJSON(legacyTypeNames, in, &item.Events); err != nil {
					return err
				}
				propEventsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("metadata.getJournalResponsenew", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propCurrentVersionPresented {
		item.CurrentVersion = 0
	}
	if !propEventsPresented {
		item.Events = item.Events[:0]
	}
	return nil
}

func (item *MetadataGetJournalResponsenew) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_field_mask)
}
func (item *MetadataGetJournalResponsenew) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexCurrentVersion := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"current_version":`...)
	w = basictl.JSONWriteInt64(w, item.CurrentVersion)
	if (item.CurrentVersion != 0) == false {
		w = w[:backupIndexCurrentVersion]
	}
	backupIndexEvents := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"events":`...)
	if w, err = BuiltinVectorMetadataEventWriteJSONOpt(newTypeNames, short, w, item.Events); err != nil {
		return w, err
	}
	if (len(item.Events) != 0) == false {
		w = w[:backupIndexEvents]
	}
	return append(w, '}'), nil
}

type MetadataGetJournalResponsenewBytes struct {
	CurrentVersion int64
	Events         []MetadataEventBytes
}

func (MetadataGetJournalResponsenewBytes) TLName() string { return "metadata.getJournalResponsenew" }
func (MetadataGetJournalResponsenewBytes) TLTag() uint32  { return 0x9286aaaa }

func (item *MetadataGetJournalResponsenewBytes) Reset() {
	item.CurrentVersion = 0
	item.Events = item.Events[:0]
}

func (item *MetadataGetJournalResponsenewBytes) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.CurrentVersion); err != nil {
		return w, err
	}
	return BuiltinVectorMetadataEventBytesRead(w, &item.Events)
}

func (item *MetadataGetJournalResponsenewBytes) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = basictl.LongWrite(w, item.CurrentVersion)
	return BuiltinVectorMetadataEventBytesWrite(w, item.Events)
}

func (item *MetadataGetJournalResponsenewBytes) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286aaaa); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataGetJournalResponsenewBytes) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286aaaa)
	return item.Write(w, nat_field_mask)
}

func (item *MetadataGetJournalResponsenewBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_field_mask uint32) error {
	var propCurrentVersionPresented bool
	var propEventsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "current_version":
				if propCurrentVersionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getJournalResponsenew", "current_version")
				}
				if err := Json2ReadInt64(in, &item.CurrentVersion); err != nil {
					return err
				}
				propCurrentVersionPresented = true
			case "events":
				if propEventsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getJournalResponsenew", "events")
				}
				if err := BuiltinVectorMetadataEventBytesReadJSON(legacyTypeNames, in, &item.Events); err != nil {
					return err
				}
				propEventsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("metadata.getJournalResponsenew", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propCurrentVersionPresented {
		item.CurrentVersion = 0
	}
	if !propEventsPresented {
		item.Events = item.Events[:0]
	}
	return nil
}

func (item *MetadataGetJournalResponsenewBytes) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_field_mask)
}
func (item *MetadataGetJournalResponsenewBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexCurrentVersion := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"current_version":`...)
	w = basictl.JSONWriteInt64(w, item.CurrentVersion)
	if (item.CurrentVersion != 0) == false {
		w = w[:backupIndexCurrentVersion]
	}
	backupIndexEvents := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"events":`...)
	if w, err = BuiltinVectorMetadataEventBytesWriteJSONOpt(newTypeNames, short, w, item.Events); err != nil {
		return w, err
	}
	if (len(item.Events) != 0) == false {
		w = w[:backupIndexEvents]
	}
	return append(w, '}'), nil
}
