// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type KvEngineGetResponse struct {
	Meta  KvEngineMetaInfo
	Value int64
}

func (KvEngineGetResponse) TLName() string { return "kv_engine.get_response" }
func (KvEngineGetResponse) TLTag() uint32  { return 0x63eeb764 }

func (item *KvEngineGetResponse) Reset() {
	item.Meta.Reset()
	item.Value = 0
}

func (item *KvEngineGetResponse) Read(w []byte) (_ []byte, err error) {
	if w, err = item.Meta.Read(w); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.Value)
}

func (item *KvEngineGetResponse) Write(w []byte) (_ []byte, err error) {
	if w, err = item.Meta.Write(w); err != nil {
		return w, err
	}
	return basictl.LongWrite(w, item.Value), nil
}

func (item *KvEngineGetResponse) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x63eeb764); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *KvEngineGetResponse) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x63eeb764)
	return item.Write(w)
}

func (item KvEngineGetResponse) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func KvEngineGetResponse__ReadJSON(item *KvEngineGetResponse, j interface{}) error {
	return item.readJSON(j)
}
func (item *KvEngineGetResponse) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("kv_engine.get_response", "expected json object")
	}
	_jMeta := _jm["meta"]
	delete(_jm, "meta")
	_jValue := _jm["value"]
	delete(_jm, "value")
	if err := JsonReadInt64(_jValue, &item.Value); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("kv_engine.get_response", k)
	}
	if err := KvEngineMetaInfo__ReadJSON(&item.Meta, _jMeta); err != nil {
		return err
	}
	return nil
}

func (item *KvEngineGetResponse) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *KvEngineGetResponse) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"meta":`...)
	if w, err = item.Meta.WriteJSONOpt(short, w); err != nil {
		return w, err
	}
	if item.Value != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"value":`...)
		w = basictl.JSONWriteInt64(w, item.Value)
	}
	return append(w, '}'), nil
}

func (item *KvEngineGetResponse) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *KvEngineGetResponse) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("kv_engine.get_response", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("kv_engine.get_response", err.Error())
	}
	return nil
}
