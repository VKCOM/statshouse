// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseMetadataGetJournalResponsenew struct {
	CurrentVersion int64
	Events         []StatshouseMetadataEvent
}

func (StatshouseMetadataGetJournalResponsenew) TLName() string {
	return "statshouse_metadata.getJournalResponsenew"
}
func (StatshouseMetadataGetJournalResponsenew) TLTag() uint32 { return 0x9286aaaa }

func (item *StatshouseMetadataGetJournalResponsenew) Reset() {
	item.CurrentVersion = 0
	item.Events = item.Events[:0]
}

func (item *StatshouseMetadataGetJournalResponsenew) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.CurrentVersion); err != nil {
		return w, err
	}
	return VectorStatshouseMetadataEvent0Read(w, &item.Events)
}

func (item *StatshouseMetadataGetJournalResponsenew) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = basictl.LongWrite(w, item.CurrentVersion)
	return VectorStatshouseMetadataEvent0Write(w, item.Events)
}

func (item *StatshouseMetadataGetJournalResponsenew) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286aaaa); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *StatshouseMetadataGetJournalResponsenew) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286aaaa)
	return item.Write(w, nat_field_mask)
}

func StatshouseMetadataGetJournalResponsenew__ReadJSON(item *StatshouseMetadataGetJournalResponsenew, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *StatshouseMetadataGetJournalResponsenew) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse_metadata.getJournalResponsenew", "expected json object")
	}
	_jCurrentVersion := _jm["current_version"]
	delete(_jm, "current_version")
	if err := JsonReadInt64(_jCurrentVersion, &item.CurrentVersion); err != nil {
		return err
	}
	_jEvents := _jm["events"]
	delete(_jm, "events")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse_metadata.getJournalResponsenew", k)
	}
	if err := VectorStatshouseMetadataEvent0ReadJSON(_jEvents, &item.Events); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseMetadataGetJournalResponsenew) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if item.CurrentVersion != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"current_version":`...)
		w = basictl.JSONWriteInt64(w, item.CurrentVersion)
	}
	if len(item.Events) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"events":`...)
		if w, err = VectorStatshouseMetadataEvent0WriteJSON(w, item.Events); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

type StatshouseMetadataGetJournalResponsenewBytes struct {
	CurrentVersion int64
	Events         []StatshouseMetadataEventBytes
}

func (StatshouseMetadataGetJournalResponsenewBytes) TLName() string {
	return "statshouse_metadata.getJournalResponsenew"
}
func (StatshouseMetadataGetJournalResponsenewBytes) TLTag() uint32 { return 0x9286aaaa }

func (item *StatshouseMetadataGetJournalResponsenewBytes) Reset() {
	item.CurrentVersion = 0
	item.Events = item.Events[:0]
}

func (item *StatshouseMetadataGetJournalResponsenewBytes) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.CurrentVersion); err != nil {
		return w, err
	}
	return VectorStatshouseMetadataEvent0BytesRead(w, &item.Events)
}

func (item *StatshouseMetadataGetJournalResponsenewBytes) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = basictl.LongWrite(w, item.CurrentVersion)
	return VectorStatshouseMetadataEvent0BytesWrite(w, item.Events)
}

func (item *StatshouseMetadataGetJournalResponsenewBytes) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286aaaa); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *StatshouseMetadataGetJournalResponsenewBytes) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286aaaa)
	return item.Write(w, nat_field_mask)
}

func StatshouseMetadataGetJournalResponsenewBytes__ReadJSON(item *StatshouseMetadataGetJournalResponsenewBytes, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *StatshouseMetadataGetJournalResponsenewBytes) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse_metadata.getJournalResponsenew", "expected json object")
	}
	_jCurrentVersion := _jm["current_version"]
	delete(_jm, "current_version")
	if err := JsonReadInt64(_jCurrentVersion, &item.CurrentVersion); err != nil {
		return err
	}
	_jEvents := _jm["events"]
	delete(_jm, "events")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse_metadata.getJournalResponsenew", k)
	}
	if err := VectorStatshouseMetadataEvent0BytesReadJSON(_jEvents, &item.Events); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseMetadataGetJournalResponsenewBytes) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if item.CurrentVersion != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"current_version":`...)
		w = basictl.JSONWriteInt64(w, item.CurrentVersion)
	}
	if len(item.Events) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"events":`...)
		if w, err = VectorStatshouseMetadataEvent0BytesWriteJSON(w, item.Events); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}
