// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseSendSourceBucket3Response struct {
	FieldMask uint32
	Error     string
	Mappings  []StatshouseMapping
}

func (StatshouseSendSourceBucket3Response) TLName() string {
	return "statshouse.sendSourceBucket3Response"
}
func (StatshouseSendSourceBucket3Response) TLTag() uint32 { return 0x0e177acc }

func (item *StatshouseSendSourceBucket3Response) Reset() {
	item.FieldMask = 0
	item.Error = ""
	item.Mappings = item.Mappings[:0]
}

func (item *StatshouseSendSourceBucket3Response) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Error); err != nil {
		return w, err
	}
	return BuiltinVectorStatshouseMappingRead(w, &item.Mappings)
}

// This method is general version of Write, use it instead!
func (item *StatshouseSendSourceBucket3Response) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseSendSourceBucket3Response) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldMask)
	w = basictl.StringWrite(w, item.Error)
	w = BuiltinVectorStatshouseMappingWrite(w, item.Mappings)
	return w
}

func (item *StatshouseSendSourceBucket3Response) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0e177acc); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseSendSourceBucket3Response) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseSendSourceBucket3Response) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0e177acc)
	return item.Write(w)
}

func (item StatshouseSendSourceBucket3Response) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseSendSourceBucket3Response) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldMaskPresented bool
	var propErrorPresented bool
	var propMappingsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "field_mask":
				if propFieldMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sendSourceBucket3Response", "field_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldMask); err != nil {
					return err
				}
				propFieldMaskPresented = true
			case "error":
				if propErrorPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sendSourceBucket3Response", "error")
				}
				if err := Json2ReadString(in, &item.Error); err != nil {
					return err
				}
				propErrorPresented = true
			case "mappings":
				if propMappingsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sendSourceBucket3Response", "mappings")
				}
				if err := BuiltinVectorStatshouseMappingReadJSON(legacyTypeNames, in, &item.Mappings); err != nil {
					return err
				}
				propMappingsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.sendSourceBucket3Response", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldMaskPresented {
		item.FieldMask = 0
	}
	if !propErrorPresented {
		item.Error = ""
	}
	if !propMappingsPresented {
		item.Mappings = item.Mappings[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseSendSourceBucket3Response) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseSendSourceBucket3Response) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseSendSourceBucket3Response) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"field_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldMask)
	if (item.FieldMask != 0) == false {
		w = w[:backupIndexFieldMask]
	}
	backupIndexError := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"error":`...)
	w = basictl.JSONWriteString(w, item.Error)
	if (len(item.Error) != 0) == false {
		w = w[:backupIndexError]
	}
	backupIndexMappings := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"mappings":`...)
	w = BuiltinVectorStatshouseMappingWriteJSONOpt(newTypeNames, short, w, item.Mappings)
	if (len(item.Mappings) != 0) == false {
		w = w[:backupIndexMappings]
	}
	return append(w, '}')
}

func (item *StatshouseSendSourceBucket3Response) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseSendSourceBucket3Response) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.sendSourceBucket3Response", err.Error())
	}
	return nil
}

type StatshouseSendSourceBucket3ResponseBytes struct {
	FieldMask uint32
	Error     []byte
	Mappings  []StatshouseMappingBytes
}

func (StatshouseSendSourceBucket3ResponseBytes) TLName() string {
	return "statshouse.sendSourceBucket3Response"
}
func (StatshouseSendSourceBucket3ResponseBytes) TLTag() uint32 { return 0x0e177acc }

func (item *StatshouseSendSourceBucket3ResponseBytes) Reset() {
	item.FieldMask = 0
	item.Error = item.Error[:0]
	item.Mappings = item.Mappings[:0]
}

func (item *StatshouseSendSourceBucket3ResponseBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Error); err != nil {
		return w, err
	}
	return BuiltinVectorStatshouseMappingBytesRead(w, &item.Mappings)
}

// This method is general version of Write, use it instead!
func (item *StatshouseSendSourceBucket3ResponseBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseSendSourceBucket3ResponseBytes) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldMask)
	w = basictl.StringWriteBytes(w, item.Error)
	w = BuiltinVectorStatshouseMappingBytesWrite(w, item.Mappings)
	return w
}

func (item *StatshouseSendSourceBucket3ResponseBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0e177acc); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseSendSourceBucket3ResponseBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseSendSourceBucket3ResponseBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0e177acc)
	return item.Write(w)
}

func (item StatshouseSendSourceBucket3ResponseBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseSendSourceBucket3ResponseBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldMaskPresented bool
	var propErrorPresented bool
	var propMappingsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "field_mask":
				if propFieldMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sendSourceBucket3Response", "field_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldMask); err != nil {
					return err
				}
				propFieldMaskPresented = true
			case "error":
				if propErrorPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sendSourceBucket3Response", "error")
				}
				if err := Json2ReadStringBytes(in, &item.Error); err != nil {
					return err
				}
				propErrorPresented = true
			case "mappings":
				if propMappingsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sendSourceBucket3Response", "mappings")
				}
				if err := BuiltinVectorStatshouseMappingBytesReadJSON(legacyTypeNames, in, &item.Mappings); err != nil {
					return err
				}
				propMappingsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.sendSourceBucket3Response", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldMaskPresented {
		item.FieldMask = 0
	}
	if !propErrorPresented {
		item.Error = item.Error[:0]
	}
	if !propMappingsPresented {
		item.Mappings = item.Mappings[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseSendSourceBucket3ResponseBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseSendSourceBucket3ResponseBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseSendSourceBucket3ResponseBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"field_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldMask)
	if (item.FieldMask != 0) == false {
		w = w[:backupIndexFieldMask]
	}
	backupIndexError := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"error":`...)
	w = basictl.JSONWriteStringBytes(w, item.Error)
	if (len(item.Error) != 0) == false {
		w = w[:backupIndexError]
	}
	backupIndexMappings := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"mappings":`...)
	w = BuiltinVectorStatshouseMappingBytesWriteJSONOpt(newTypeNames, short, w, item.Mappings)
	if (len(item.Mappings) != 0) == false {
		w = w[:backupIndexMappings]
	}
	return append(w, '}')
}

func (item *StatshouseSendSourceBucket3ResponseBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseSendSourceBucket3ResponseBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.sendSourceBucket3Response", err.Error())
	}
	return nil
}
