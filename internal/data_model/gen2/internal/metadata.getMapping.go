// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataGetMapping struct {
	FieldMask uint32
	Metric    string
	Key       string
	// CreateIfAbsent (TrueType) // Conditional: item.FieldMask.1
}

func (MetadataGetMapping) TLName() string { return "metadata.getMapping" }
func (MetadataGetMapping) TLTag() uint32  { return 0x9dfa7a83 }

func (item *MetadataGetMapping) SetCreateIfAbsent(v bool) {
	if v {
		item.FieldMask |= 1 << 1
	} else {
		item.FieldMask &^= 1 << 1
	}
}
func (item MetadataGetMapping) IsSetCreateIfAbsent() bool { return item.FieldMask&(1<<1) != 0 }

func (item *MetadataGetMapping) Reset() {
	item.FieldMask = 0
	item.Metric = ""
	item.Key = ""
}

func (item *MetadataGetMapping) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Key); err != nil {
		return w, err
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *MetadataGetMapping) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *MetadataGetMapping) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldMask)
	w = basictl.StringWrite(w, item.Metric)
	w = basictl.StringWrite(w, item.Key)
	return w
}

func (item *MetadataGetMapping) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9dfa7a83); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MetadataGetMapping) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *MetadataGetMapping) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x9dfa7a83)
	return item.Write(w)
}

func (item *MetadataGetMapping) ReadResult(w []byte, ret *MetadataGetMappingResponse) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldMask)
}

func (item *MetadataGetMapping) WriteResult(w []byte, ret MetadataGetMappingResponse) (_ []byte, err error) {
	w = ret.WriteBoxed(w, item.FieldMask)
	return w, nil
}

func (item *MetadataGetMapping) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *MetadataGetMappingResponse) error {
	if err := ret.ReadJSON(legacyTypeNames, in, item.FieldMask); err != nil {
		return err
	}
	return nil
}

func (item *MetadataGetMapping) WriteResultJSON(w []byte, ret MetadataGetMappingResponse) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *MetadataGetMapping) writeResultJSON(newTypeNames bool, short bool, w []byte, ret MetadataGetMappingResponse) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w, item.FieldMask)
	return w, nil
}

func (item *MetadataGetMapping) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret MetadataGetMappingResponse
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *MetadataGetMapping) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret MetadataGetMappingResponse
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *MetadataGetMapping) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret MetadataGetMappingResponse
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item MetadataGetMapping) String() string {
	return string(item.WriteJSON(nil))
}

func (item *MetadataGetMapping) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldMaskPresented bool
	var propMetricPresented bool
	var propKeyPresented bool
	var trueTypeCreateIfAbsentPresented bool
	var trueTypeCreateIfAbsentValue bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "field_mask":
				if propFieldMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getMapping", "field_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldMask); err != nil {
					return err
				}
				propFieldMaskPresented = true
			case "metric":
				if propMetricPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getMapping", "metric")
				}
				if err := Json2ReadString(in, &item.Metric); err != nil {
					return err
				}
				propMetricPresented = true
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getMapping", "key")
				}
				if err := Json2ReadString(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "createIfAbsent":
				if trueTypeCreateIfAbsentPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getMapping", "createIfAbsent")
				}
				if err := Json2ReadBool(in, &trueTypeCreateIfAbsentValue); err != nil {
					return err
				}
				trueTypeCreateIfAbsentPresented = true
			default:
				return ErrorInvalidJSONExcessElement("metadata.getMapping", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldMaskPresented {
		item.FieldMask = 0
	}
	if !propMetricPresented {
		item.Metric = ""
	}
	if !propKeyPresented {
		item.Key = ""
	}
	if trueTypeCreateIfAbsentPresented {
		if trueTypeCreateIfAbsentValue {
			item.FieldMask |= 1 << 1
		}
	}
	// tries to set bit to zero if it is 1
	if trueTypeCreateIfAbsentPresented && !trueTypeCreateIfAbsentValue && (item.FieldMask&(1<<1) != 0) {
		return ErrorInvalidJSON("metadata.getMapping", "fieldmask bit field_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataGetMapping) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *MetadataGetMapping) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *MetadataGetMapping) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"field_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldMask)
	if (item.FieldMask != 0) == false {
		w = w[:backupIndexFieldMask]
	}
	backupIndexMetric := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metric":`...)
	w = basictl.JSONWriteString(w, item.Metric)
	if (len(item.Metric) != 0) == false {
		w = w[:backupIndexMetric]
	}
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteString(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	if item.FieldMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"createIfAbsent":true`...)
	}
	return append(w, '}')
}

func (item *MetadataGetMapping) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *MetadataGetMapping) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("metadata.getMapping", err.Error())
	}
	return nil
}
