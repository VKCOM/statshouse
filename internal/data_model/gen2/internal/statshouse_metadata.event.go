// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseMetadataEvent struct {
	FieldMask  uint32
	Id         int64
	Name       string
	EventType  int32
	Unused     uint32
	Version    int64
	UpdateTime uint32
	Data       string
}

func (StatshouseMetadataEvent) TLName() string { return "statshouse_metadata.event" }
func (StatshouseMetadataEvent) TLTag() uint32  { return 0x9286affa }

func (item *StatshouseMetadataEvent) Reset() {
	item.FieldMask = 0
	item.Id = 0
	item.Name = ""
	item.EventType = 0
	item.Unused = 0
	item.Version = 0
	item.UpdateTime = 0
	item.Data = ""
}

func (item *StatshouseMetadataEvent) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.Id); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Name); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.EventType); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.Unused); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.UpdateTime); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.Data)
}

func (item *StatshouseMetadataEvent) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldMask)
	w = basictl.LongWrite(w, item.Id)
	if w, err = basictl.StringWrite(w, item.Name); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.EventType)
	w = basictl.NatWrite(w, item.Unused)
	w = basictl.LongWrite(w, item.Version)
	w = basictl.NatWrite(w, item.UpdateTime)
	return basictl.StringWrite(w, item.Data)
}

func (item *StatshouseMetadataEvent) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286affa); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseMetadataEvent) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286affa)
	return item.Write(w)
}

func (item StatshouseMetadataEvent) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseMetadataEvent__ReadJSON(item *StatshouseMetadataEvent, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseMetadataEvent) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse_metadata.event", "expected json object")
	}
	_jFieldMask := _jm["field_mask"]
	delete(_jm, "field_mask")
	if err := JsonReadUint32(_jFieldMask, &item.FieldMask); err != nil {
		return err
	}
	_jId := _jm["id"]
	delete(_jm, "id")
	if err := JsonReadInt64(_jId, &item.Id); err != nil {
		return err
	}
	_jName := _jm["name"]
	delete(_jm, "name")
	if err := JsonReadString(_jName, &item.Name); err != nil {
		return err
	}
	_jEventType := _jm["event_type"]
	delete(_jm, "event_type")
	if err := JsonReadInt32(_jEventType, &item.EventType); err != nil {
		return err
	}
	_jUnused := _jm["unused"]
	delete(_jm, "unused")
	if err := JsonReadUint32(_jUnused, &item.Unused); err != nil {
		return err
	}
	_jVersion := _jm["version"]
	delete(_jm, "version")
	if err := JsonReadInt64(_jVersion, &item.Version); err != nil {
		return err
	}
	_jUpdateTime := _jm["update_time"]
	delete(_jm, "update_time")
	if err := JsonReadUint32(_jUpdateTime, &item.UpdateTime); err != nil {
		return err
	}
	_jData := _jm["data"]
	delete(_jm, "data")
	if err := JsonReadString(_jData, &item.Data); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse_metadata.event", k)
	}
	return nil
}

func (item *StatshouseMetadataEvent) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"field_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldMask)
	}
	if item.Id != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"id":`...)
		w = basictl.JSONWriteInt64(w, item.Id)
	}
	if len(item.Name) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"name":`...)
		w = basictl.JSONWriteString(w, item.Name)
	}
	if item.EventType != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"event_type":`...)
		w = basictl.JSONWriteInt32(w, item.EventType)
	}
	if item.Unused != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"unused":`...)
		w = basictl.JSONWriteUint32(w, item.Unused)
	}
	if item.Version != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"version":`...)
		w = basictl.JSONWriteInt64(w, item.Version)
	}
	if item.UpdateTime != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"update_time":`...)
		w = basictl.JSONWriteUint32(w, item.UpdateTime)
	}
	if len(item.Data) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"data":`...)
		w = basictl.JSONWriteString(w, item.Data)
	}
	return append(w, '}'), nil
}

func (item *StatshouseMetadataEvent) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseMetadataEvent) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse_metadata.event", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse_metadata.event", err.Error())
	}
	return nil
}

type StatshouseMetadataEventBytes struct {
	FieldMask  uint32
	Id         int64
	Name       []byte
	EventType  int32
	Unused     uint32
	Version    int64
	UpdateTime uint32
	Data       []byte
}

func (StatshouseMetadataEventBytes) TLName() string { return "statshouse_metadata.event" }
func (StatshouseMetadataEventBytes) TLTag() uint32  { return 0x9286affa }

func (item *StatshouseMetadataEventBytes) Reset() {
	item.FieldMask = 0
	item.Id = 0
	item.Name = item.Name[:0]
	item.EventType = 0
	item.Unused = 0
	item.Version = 0
	item.UpdateTime = 0
	item.Data = item.Data[:0]
}

func (item *StatshouseMetadataEventBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.Id); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Name); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.EventType); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.Unused); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.Version); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.UpdateTime); err != nil {
		return w, err
	}
	return basictl.StringReadBytes(w, &item.Data)
}

func (item *StatshouseMetadataEventBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldMask)
	w = basictl.LongWrite(w, item.Id)
	if w, err = basictl.StringWriteBytes(w, item.Name); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.EventType)
	w = basictl.NatWrite(w, item.Unused)
	w = basictl.LongWrite(w, item.Version)
	w = basictl.NatWrite(w, item.UpdateTime)
	return basictl.StringWriteBytes(w, item.Data)
}

func (item *StatshouseMetadataEventBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286affa); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseMetadataEventBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286affa)
	return item.Write(w)
}

func (item StatshouseMetadataEventBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseMetadataEventBytes__ReadJSON(item *StatshouseMetadataEventBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseMetadataEventBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse_metadata.event", "expected json object")
	}
	_jFieldMask := _jm["field_mask"]
	delete(_jm, "field_mask")
	if err := JsonReadUint32(_jFieldMask, &item.FieldMask); err != nil {
		return err
	}
	_jId := _jm["id"]
	delete(_jm, "id")
	if err := JsonReadInt64(_jId, &item.Id); err != nil {
		return err
	}
	_jName := _jm["name"]
	delete(_jm, "name")
	if err := JsonReadStringBytes(_jName, &item.Name); err != nil {
		return err
	}
	_jEventType := _jm["event_type"]
	delete(_jm, "event_type")
	if err := JsonReadInt32(_jEventType, &item.EventType); err != nil {
		return err
	}
	_jUnused := _jm["unused"]
	delete(_jm, "unused")
	if err := JsonReadUint32(_jUnused, &item.Unused); err != nil {
		return err
	}
	_jVersion := _jm["version"]
	delete(_jm, "version")
	if err := JsonReadInt64(_jVersion, &item.Version); err != nil {
		return err
	}
	_jUpdateTime := _jm["update_time"]
	delete(_jm, "update_time")
	if err := JsonReadUint32(_jUpdateTime, &item.UpdateTime); err != nil {
		return err
	}
	_jData := _jm["data"]
	delete(_jm, "data")
	if err := JsonReadStringBytes(_jData, &item.Data); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse_metadata.event", k)
	}
	return nil
}

func (item *StatshouseMetadataEventBytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"field_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldMask)
	}
	if item.Id != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"id":`...)
		w = basictl.JSONWriteInt64(w, item.Id)
	}
	if len(item.Name) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"name":`...)
		w = basictl.JSONWriteStringBytes(w, item.Name)
	}
	if item.EventType != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"event_type":`...)
		w = basictl.JSONWriteInt32(w, item.EventType)
	}
	if item.Unused != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"unused":`...)
		w = basictl.JSONWriteUint32(w, item.Unused)
	}
	if item.Version != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"version":`...)
		w = basictl.JSONWriteInt64(w, item.Version)
	}
	if item.UpdateTime != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"update_time":`...)
		w = basictl.JSONWriteUint32(w, item.UpdateTime)
	}
	if len(item.Data) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"data":`...)
		w = basictl.JSONWriteStringBytes(w, item.Data)
	}
	return append(w, '}'), nil
}

func (item *StatshouseMetadataEventBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseMetadataEventBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse_metadata.event", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse_metadata.event", err.Error())
	}
	return nil
}

func VectorStatshouseMetadataEvent0Read(w []byte, vec *[]StatshouseMetadataEvent) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseMetadataEvent, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMetadataEvent0Write(w []byte, vec []StatshouseMetadataEvent) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMetadataEvent0ReadJSON(j interface{}, vec *[]StatshouseMetadataEvent) error {
	l, _arr, err := JsonReadArray("[]StatshouseMetadataEvent", j)
	if err != nil {
		return err
	}
	if cap(*vec) < l {
		*vec = make([]StatshouseMetadataEvent, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if err := StatshouseMetadataEvent__ReadJSON(&(*vec)[i], _arr[i]); err != nil {
			return err
		}
	}
	return nil
}

func VectorStatshouseMetadataEvent0WriteJSON(w []byte, vec []StatshouseMetadataEvent) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSON(w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

func VectorStatshouseMetadataEvent0BytesRead(w []byte, vec *[]StatshouseMetadataEventBytes) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseMetadataEventBytes, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMetadataEvent0BytesWrite(w []byte, vec []StatshouseMetadataEventBytes) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMetadataEvent0BytesReadJSON(j interface{}, vec *[]StatshouseMetadataEventBytes) error {
	l, _arr, err := JsonReadArray("[]StatshouseMetadataEventBytes", j)
	if err != nil {
		return err
	}
	if cap(*vec) < l {
		*vec = make([]StatshouseMetadataEventBytes, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if err := StatshouseMetadataEventBytes__ReadJSON(&(*vec)[i], _arr[i]); err != nil {
			return err
		}
	}
	return nil
}

func VectorStatshouseMetadataEvent0BytesWriteJSON(w []byte, vec []StatshouseMetadataEventBytes) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSON(w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}
