// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseApiGetQueryPointResponse struct {
	FieldsMask uint32
	Data       []float64
	Meta       []StatshouseApiPointMeta
}

func (StatshouseApiGetQueryPointResponse) TLName() string { return "statshouseApi.queryPointResponse" }
func (StatshouseApiGetQueryPointResponse) TLTag() uint32  { return 0x4487e41a }

func (item *StatshouseApiGetQueryPointResponse) Reset() {
	item.FieldsMask = 0
	item.Data = item.Data[:0]
	item.Meta = item.Meta[:0]
}

func (item *StatshouseApiGetQueryPointResponse) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorDoubleRead(w, &item.Data); err != nil {
		return w, err
	}
	return BuiltinVectorStatshouseApiPointMetaRead(w, &item.Meta)
}

func (item *StatshouseApiGetQueryPointResponse) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = BuiltinVectorDoubleWrite(w, item.Data); err != nil {
		return w, err
	}
	return BuiltinVectorStatshouseApiPointMetaWrite(w, item.Meta)
}

func (item *StatshouseApiGetQueryPointResponse) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4487e41a); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseApiGetQueryPointResponse) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x4487e41a)
	return item.Write(w)
}

func (item StatshouseApiGetQueryPointResponse) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *StatshouseApiGetQueryPointResponse) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propDataPresented bool
	var propMetaPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.queryPointResponse", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "data":
				if propDataPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.queryPointResponse", "data")
				}
				if err := BuiltinVectorDoubleReadJSON(legacyTypeNames, in, &item.Data); err != nil {
					return err
				}
				propDataPresented = true
			case "meta":
				if propMetaPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.queryPointResponse", "meta")
				}
				if err := BuiltinVectorStatshouseApiPointMetaReadJSON(legacyTypeNames, in, &item.Meta); err != nil {
					return err
				}
				propMetaPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouseApi.queryPointResponse", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propDataPresented {
		item.Data = item.Data[:0]
	}
	if !propMetaPresented {
		item.Meta = item.Meta[:0]
	}
	return nil
}

func (item *StatshouseApiGetQueryPointResponse) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseApiGetQueryPointResponse) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexData := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"data":`...)
	if w, err = BuiltinVectorDoubleWriteJSONOpt(newTypeNames, short, w, item.Data); err != nil {
		return w, err
	}
	if (len(item.Data) != 0) == false {
		w = w[:backupIndexData]
	}
	backupIndexMeta := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"meta":`...)
	if w, err = BuiltinVectorStatshouseApiPointMetaWriteJSONOpt(newTypeNames, short, w, item.Meta); err != nil {
		return w, err
	}
	if (len(item.Meta) != 0) == false {
		w = w[:backupIndexMeta]
	}
	return append(w, '}'), nil
}

func (item *StatshouseApiGetQueryPointResponse) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseApiGetQueryPointResponse) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouseApi.queryPointResponse", err.Error())
	}
	return nil
}
