// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseGetTagMapping2 struct {
	FieldsMask uint32
	Header     StatshouseCommonProxyHeader
	Metric     string
	Key        string
	// Create (TrueType) // Conditional: item.FieldsMask.0
	TagIdKey  int32
	ClientEnv int32
}

func (StatshouseGetTagMapping2) TLName() string { return "statshouse.getTagMapping2" }
func (StatshouseGetTagMapping2) TLTag() uint32  { return 0x4285ff56 }

func (item *StatshouseGetTagMapping2) SetCreate(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item StatshouseGetTagMapping2) IsSetCreate() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTagMapping2) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.Metric = ""
	item.Key = ""
	item.TagIdKey = 0
	item.ClientEnv = 0
}

func (item *StatshouseGetTagMapping2) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Key); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.TagIdKey); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.ClientEnv)
}

func (item *StatshouseGetTagMapping2) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = item.Header.Write(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringWrite(w, item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringWrite(w, item.Key); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.TagIdKey)
	return basictl.IntWrite(w, item.ClientEnv), nil
}

func (item *StatshouseGetTagMapping2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4285ff56); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTagMapping2) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x4285ff56)
	return item.Write(w)
}

func (item *StatshouseGetTagMapping2) ReadResult(w []byte, ret *StatshouseGetTagMappingResult) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseGetTagMapping2) WriteResult(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *StatshouseGetTagMapping2) ReadResultJSON(j interface{}, ret *StatshouseGetTagMappingResult) error {
	if err := StatshouseGetTagMappingResult__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTagMapping2) WriteResultJSON(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseGetTagMapping2) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTagMappingResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTagMapping2) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.getTagMapping2", err.Error())
	}
	var ret StatshouseGetTagMappingResult
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTagMapping2) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetTagMapping2__ReadJSON(item *StatshouseGetTagMapping2, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetTagMapping2) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getTagMapping2", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jHeader := _jm["header"]
	delete(_jm, "header")
	_jMetric := _jm["metric"]
	delete(_jm, "metric")
	if err := JsonReadString(_jMetric, &item.Metric); err != nil {
		return err
	}
	_jKey := _jm["key"]
	delete(_jm, "key")
	if err := JsonReadString(_jKey, &item.Key); err != nil {
		return err
	}
	_jCreate := _jm["create"]
	delete(_jm, "create")
	_jTagIdKey := _jm["tag_id_key"]
	delete(_jm, "tag_id_key")
	if err := JsonReadInt32(_jTagIdKey, &item.TagIdKey); err != nil {
		return err
	}
	_jClientEnv := _jm["client_env"]
	delete(_jm, "client_env")
	if err := JsonReadInt32(_jClientEnv, &item.ClientEnv); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getTagMapping2", k)
	}
	if _jCreate != nil {
		_bit := false
		if err := JsonReadBool(_jCreate, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if err := StatshouseCommonProxyHeader__ReadJSON(&item.Header, _jHeader, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTagMapping2) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	if w, err = item.Header.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	if len(item.Metric) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric":`...)
		w = basictl.JSONWriteString(w, item.Metric)
	}
	if len(item.Key) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"key":`...)
		w = basictl.JSONWriteString(w, item.Key)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"create":true`...)
	}
	if item.TagIdKey != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"tag_id_key":`...)
		w = basictl.JSONWriteInt32(w, item.TagIdKey)
	}
	if item.ClientEnv != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"client_env":`...)
		w = basictl.JSONWriteInt32(w, item.ClientEnv)
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTagMapping2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTagMapping2) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getTagMapping2", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMapping2", err.Error())
	}
	return nil
}

type StatshouseGetTagMapping2Bytes struct {
	FieldsMask uint32
	Header     StatshouseCommonProxyHeaderBytes
	Metric     []byte
	Key        []byte
	// Create (TrueType) // Conditional: item.FieldsMask.0
	TagIdKey  int32
	ClientEnv int32
}

func (StatshouseGetTagMapping2Bytes) TLName() string { return "statshouse.getTagMapping2" }
func (StatshouseGetTagMapping2Bytes) TLTag() uint32  { return 0x4285ff56 }

func (item *StatshouseGetTagMapping2Bytes) SetCreate(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item StatshouseGetTagMapping2Bytes) IsSetCreate() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTagMapping2Bytes) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.Metric = item.Metric[:0]
	item.Key = item.Key[:0]
	item.TagIdKey = 0
	item.ClientEnv = 0
}

func (item *StatshouseGetTagMapping2Bytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Key); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.TagIdKey); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.ClientEnv)
}

func (item *StatshouseGetTagMapping2Bytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = item.Header.Write(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringWriteBytes(w, item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringWriteBytes(w, item.Key); err != nil {
		return w, err
	}
	w = basictl.IntWrite(w, item.TagIdKey)
	return basictl.IntWrite(w, item.ClientEnv), nil
}

func (item *StatshouseGetTagMapping2Bytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4285ff56); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTagMapping2Bytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x4285ff56)
	return item.Write(w)
}

func (item *StatshouseGetTagMapping2Bytes) ReadResult(w []byte, ret *StatshouseGetTagMappingResult) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseGetTagMapping2Bytes) WriteResult(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *StatshouseGetTagMapping2Bytes) ReadResultJSON(j interface{}, ret *StatshouseGetTagMappingResult) error {
	if err := StatshouseGetTagMappingResult__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTagMapping2Bytes) WriteResultJSON(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseGetTagMapping2Bytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTagMappingResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTagMapping2Bytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.getTagMapping2", err.Error())
	}
	var ret StatshouseGetTagMappingResult
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTagMapping2Bytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetTagMapping2Bytes__ReadJSON(item *StatshouseGetTagMapping2Bytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetTagMapping2Bytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getTagMapping2", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jHeader := _jm["header"]
	delete(_jm, "header")
	_jMetric := _jm["metric"]
	delete(_jm, "metric")
	if err := JsonReadStringBytes(_jMetric, &item.Metric); err != nil {
		return err
	}
	_jKey := _jm["key"]
	delete(_jm, "key")
	if err := JsonReadStringBytes(_jKey, &item.Key); err != nil {
		return err
	}
	_jCreate := _jm["create"]
	delete(_jm, "create")
	_jTagIdKey := _jm["tag_id_key"]
	delete(_jm, "tag_id_key")
	if err := JsonReadInt32(_jTagIdKey, &item.TagIdKey); err != nil {
		return err
	}
	_jClientEnv := _jm["client_env"]
	delete(_jm, "client_env")
	if err := JsonReadInt32(_jClientEnv, &item.ClientEnv); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getTagMapping2", k)
	}
	if _jCreate != nil {
		_bit := false
		if err := JsonReadBool(_jCreate, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if err := StatshouseCommonProxyHeaderBytes__ReadJSON(&item.Header, _jHeader, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTagMapping2Bytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	if w, err = item.Header.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	if len(item.Metric) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric":`...)
		w = basictl.JSONWriteStringBytes(w, item.Metric)
	}
	if len(item.Key) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"key":`...)
		w = basictl.JSONWriteStringBytes(w, item.Key)
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"create":true`...)
	}
	if item.TagIdKey != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"tag_id_key":`...)
		w = basictl.JSONWriteInt32(w, item.TagIdKey)
	}
	if item.ClientEnv != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"client_env":`...)
		w = basictl.JSONWriteInt32(w, item.ClientEnv)
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTagMapping2Bytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTagMapping2Bytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getTagMapping2", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMapping2", err.Error())
	}
	return nil
}
