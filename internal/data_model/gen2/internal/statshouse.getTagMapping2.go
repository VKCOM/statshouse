// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseGetTagMapping2 struct {
	FieldsMask uint32
	Header     StatshouseCommonProxyHeader
	Metric     string
	Key        string
	// Create (TrueType) // Conditional: item.FieldsMask.0
	TagIdKey  int32
	ClientEnv int32
}

func (StatshouseGetTagMapping2) TLName() string { return "statshouse.getTagMapping2" }
func (StatshouseGetTagMapping2) TLTag() uint32  { return 0x4285ff56 }

func (item *StatshouseGetTagMapping2) SetCreate(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item StatshouseGetTagMapping2) IsSetCreate() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTagMapping2) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.Metric = ""
	item.Key = ""
	item.TagIdKey = 0
	item.ClientEnv = 0
}

func (item *StatshouseGetTagMapping2) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Key); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.TagIdKey); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.ClientEnv)
}

// This method is general version of Write, use it instead!
func (item *StatshouseGetTagMapping2) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseGetTagMapping2) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = item.Header.Write(w, item.FieldsMask)
	w = basictl.StringWrite(w, item.Metric)
	w = basictl.StringWrite(w, item.Key)
	w = basictl.IntWrite(w, item.TagIdKey)
	w = basictl.IntWrite(w, item.ClientEnv)
	return w
}

func (item *StatshouseGetTagMapping2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4285ff56); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseGetTagMapping2) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseGetTagMapping2) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x4285ff56)
	return item.Write(w)
}

func (item *StatshouseGetTagMapping2) ReadResult(w []byte, ret *StatshouseGetTagMappingResult) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseGetTagMapping2) WriteResult(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *StatshouseGetTagMapping2) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *StatshouseGetTagMappingResult) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTagMapping2) WriteResultJSON(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *StatshouseGetTagMapping2) writeResultJSON(newTypeNames bool, short bool, w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *StatshouseGetTagMapping2) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTagMappingResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTagMapping2) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTagMappingResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *StatshouseGetTagMapping2) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret StatshouseGetTagMappingResult
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTagMapping2) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseGetTagMapping2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var rawHeader []byte
	var propMetricPresented bool
	var propKeyPresented bool
	var trueTypeCreatePresented bool
	var trueTypeCreateValue bool
	var propTagIdKeyPresented bool
	var propClientEnvPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "header":
				if rawHeader != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "header")
				}
				rawHeader = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "metric":
				if propMetricPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "metric")
				}
				if err := Json2ReadString(in, &item.Metric); err != nil {
					return err
				}
				propMetricPresented = true
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "key")
				}
				if err := Json2ReadString(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "create":
				if trueTypeCreatePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "create")
				}
				if err := Json2ReadBool(in, &trueTypeCreateValue); err != nil {
					return err
				}
				trueTypeCreatePresented = true
			case "tag_id_key":
				if propTagIdKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "tag_id_key")
				}
				if err := Json2ReadInt32(in, &item.TagIdKey); err != nil {
					return err
				}
				propTagIdKeyPresented = true
			case "client_env":
				if propClientEnvPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "client_env")
				}
				if err := Json2ReadInt32(in, &item.ClientEnv); err != nil {
					return err
				}
				propClientEnvPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.getTagMapping2", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propMetricPresented {
		item.Metric = ""
	}
	if !propKeyPresented {
		item.Key = ""
	}
	if !propTagIdKeyPresented {
		item.TagIdKey = 0
	}
	if !propClientEnvPresented {
		item.ClientEnv = 0
	}
	if trueTypeCreatePresented {
		if trueTypeCreateValue {
			item.FieldsMask |= 1 << 0
		}
	}
	var inHeaderPointer *basictl.JsonLexer
	inHeader := basictl.JsonLexer{Data: rawHeader}
	if rawHeader != nil {
		inHeaderPointer = &inHeader
	}
	if err := item.Header.ReadJSON(legacyTypeNames, inHeaderPointer, item.FieldsMask); err != nil {
		return err
	}

	// tries to set bit to zero if it is 1
	if trueTypeCreatePresented && !trueTypeCreateValue && (item.FieldsMask&(1<<0) != 0) {
		return ErrorInvalidJSON("statshouse.getTagMapping2", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseGetTagMapping2) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseGetTagMapping2) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseGetTagMapping2) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	w = item.Header.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	backupIndexMetric := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metric":`...)
	w = basictl.JSONWriteString(w, item.Metric)
	if (len(item.Metric) != 0) == false {
		w = w[:backupIndexMetric]
	}
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteString(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"create":true`...)
	}
	backupIndexTagIdKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tag_id_key":`...)
	w = basictl.JSONWriteInt32(w, item.TagIdKey)
	if (item.TagIdKey != 0) == false {
		w = w[:backupIndexTagIdKey]
	}
	backupIndexClientEnv := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"client_env":`...)
	w = basictl.JSONWriteInt32(w, item.ClientEnv)
	if (item.ClientEnv != 0) == false {
		w = w[:backupIndexClientEnv]
	}
	return append(w, '}')
}

func (item *StatshouseGetTagMapping2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseGetTagMapping2) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMapping2", err.Error())
	}
	return nil
}

type StatshouseGetTagMapping2Bytes struct {
	FieldsMask uint32
	Header     StatshouseCommonProxyHeaderBytes
	Metric     []byte
	Key        []byte
	// Create (TrueType) // Conditional: item.FieldsMask.0
	TagIdKey  int32
	ClientEnv int32
}

func (StatshouseGetTagMapping2Bytes) TLName() string { return "statshouse.getTagMapping2" }
func (StatshouseGetTagMapping2Bytes) TLTag() uint32  { return 0x4285ff56 }

func (item *StatshouseGetTagMapping2Bytes) SetCreate(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item StatshouseGetTagMapping2Bytes) IsSetCreate() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTagMapping2Bytes) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.Metric = item.Metric[:0]
	item.Key = item.Key[:0]
	item.TagIdKey = 0
	item.ClientEnv = 0
}

func (item *StatshouseGetTagMapping2Bytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Key); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.TagIdKey); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.ClientEnv)
}

// This method is general version of Write, use it instead!
func (item *StatshouseGetTagMapping2Bytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseGetTagMapping2Bytes) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = item.Header.Write(w, item.FieldsMask)
	w = basictl.StringWriteBytes(w, item.Metric)
	w = basictl.StringWriteBytes(w, item.Key)
	w = basictl.IntWrite(w, item.TagIdKey)
	w = basictl.IntWrite(w, item.ClientEnv)
	return w
}

func (item *StatshouseGetTagMapping2Bytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x4285ff56); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseGetTagMapping2Bytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseGetTagMapping2Bytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x4285ff56)
	return item.Write(w)
}

func (item *StatshouseGetTagMapping2Bytes) ReadResult(w []byte, ret *StatshouseGetTagMappingResult) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseGetTagMapping2Bytes) WriteResult(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *StatshouseGetTagMapping2Bytes) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *StatshouseGetTagMappingResult) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTagMapping2Bytes) WriteResultJSON(w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *StatshouseGetTagMapping2Bytes) writeResultJSON(newTypeNames bool, short bool, w []byte, ret StatshouseGetTagMappingResult) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *StatshouseGetTagMapping2Bytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTagMappingResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTagMapping2Bytes) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTagMappingResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *StatshouseGetTagMapping2Bytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret StatshouseGetTagMappingResult
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTagMapping2Bytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseGetTagMapping2Bytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var rawHeader []byte
	var propMetricPresented bool
	var propKeyPresented bool
	var trueTypeCreatePresented bool
	var trueTypeCreateValue bool
	var propTagIdKeyPresented bool
	var propClientEnvPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "header":
				if rawHeader != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "header")
				}
				rawHeader = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "metric":
				if propMetricPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "metric")
				}
				if err := Json2ReadStringBytes(in, &item.Metric); err != nil {
					return err
				}
				propMetricPresented = true
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "key")
				}
				if err := Json2ReadStringBytes(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "create":
				if trueTypeCreatePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "create")
				}
				if err := Json2ReadBool(in, &trueTypeCreateValue); err != nil {
					return err
				}
				trueTypeCreatePresented = true
			case "tag_id_key":
				if propTagIdKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "tag_id_key")
				}
				if err := Json2ReadInt32(in, &item.TagIdKey); err != nil {
					return err
				}
				propTagIdKeyPresented = true
			case "client_env":
				if propClientEnvPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMapping2", "client_env")
				}
				if err := Json2ReadInt32(in, &item.ClientEnv); err != nil {
					return err
				}
				propClientEnvPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.getTagMapping2", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propMetricPresented {
		item.Metric = item.Metric[:0]
	}
	if !propKeyPresented {
		item.Key = item.Key[:0]
	}
	if !propTagIdKeyPresented {
		item.TagIdKey = 0
	}
	if !propClientEnvPresented {
		item.ClientEnv = 0
	}
	if trueTypeCreatePresented {
		if trueTypeCreateValue {
			item.FieldsMask |= 1 << 0
		}
	}
	var inHeaderPointer *basictl.JsonLexer
	inHeader := basictl.JsonLexer{Data: rawHeader}
	if rawHeader != nil {
		inHeaderPointer = &inHeader
	}
	if err := item.Header.ReadJSON(legacyTypeNames, inHeaderPointer, item.FieldsMask); err != nil {
		return err
	}

	// tries to set bit to zero if it is 1
	if trueTypeCreatePresented && !trueTypeCreateValue && (item.FieldsMask&(1<<0) != 0) {
		return ErrorInvalidJSON("statshouse.getTagMapping2", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseGetTagMapping2Bytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseGetTagMapping2Bytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseGetTagMapping2Bytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	w = item.Header.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	backupIndexMetric := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metric":`...)
	w = basictl.JSONWriteStringBytes(w, item.Metric)
	if (len(item.Metric) != 0) == false {
		w = w[:backupIndexMetric]
	}
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteStringBytes(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"create":true`...)
	}
	backupIndexTagIdKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tag_id_key":`...)
	w = basictl.JSONWriteInt32(w, item.TagIdKey)
	if (item.TagIdKey != 0) == false {
		w = w[:backupIndexTagIdKey]
	}
	backupIndexClientEnv := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"client_env":`...)
	w = basictl.JSONWriteInt32(w, item.ClientEnv)
	if (item.ClientEnv != 0) == false {
		w = w[:backupIndexClientEnv]
	}
	return append(w, '}')
}

func (item *StatshouseGetTagMapping2Bytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseGetTagMapping2Bytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMapping2", err.Error())
	}
	return nil
}
