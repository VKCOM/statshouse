// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseGetTargets2 struct {
	FieldsMask   uint32
	Header       StatshouseCommonProxyHeader
	PromHostName string
	OldHash      string
}

func (StatshouseGetTargets2) TLName() string { return "statshouse.getTargets2" }
func (StatshouseGetTargets2) TLTag() uint32  { return 0x41df72a3 }

func (item *StatshouseGetTargets2) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.PromHostName = ""
	item.OldHash = ""
}

func (item *StatshouseGetTargets2) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.PromHostName); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.OldHash)
}

func (item *StatshouseGetTargets2) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = item.Header.Write(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringWrite(w, item.PromHostName); err != nil {
		return w, err
	}
	return basictl.StringWrite(w, item.OldHash)
}

func (item *StatshouseGetTargets2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x41df72a3); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTargets2) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x41df72a3)
	return item.Write(w)
}

func (item *StatshouseGetTargets2) ReadResult(w []byte, ret *StatshouseGetTargetsResult) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetTargets2) WriteResult(w []byte, ret StatshouseGetTargetsResult) (_ []byte, err error) {
	return ret.WriteBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetTargets2) ReadResultJSON(j interface{}, ret *StatshouseGetTargetsResult) error {
	if err := StatshouseGetTargetsResult__ReadJSON(ret, j, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTargets2) WriteResultJSON(w []byte, ret StatshouseGetTargetsResult) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseGetTargets2) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTargetsResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTargets2) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.getTargets2", err.Error())
	}
	var ret StatshouseGetTargetsResult
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTargets2) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetTargets2__ReadJSON(item *StatshouseGetTargets2, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetTargets2) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getTargets2", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jHeader := _jm["header"]
	delete(_jm, "header")
	_jPromHostName := _jm["prom_host_name"]
	delete(_jm, "prom_host_name")
	if err := JsonReadString(_jPromHostName, &item.PromHostName); err != nil {
		return err
	}
	_jOldHash := _jm["old_hash"]
	delete(_jm, "old_hash")
	if err := JsonReadString(_jOldHash, &item.OldHash); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getTargets2", k)
	}
	if err := StatshouseCommonProxyHeader__ReadJSON(&item.Header, _jHeader, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTargets2) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	if w, err = item.Header.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	if len(item.PromHostName) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"prom_host_name":`...)
		w = basictl.JSONWriteString(w, item.PromHostName)
	}
	if len(item.OldHash) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"old_hash":`...)
		w = basictl.JSONWriteString(w, item.OldHash)
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTargets2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTargets2) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getTargets2", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getTargets2", err.Error())
	}
	return nil
}

type StatshouseGetTargets2Bytes struct {
	FieldsMask   uint32
	Header       StatshouseCommonProxyHeaderBytes
	PromHostName []byte
	OldHash      []byte
}

func (StatshouseGetTargets2Bytes) TLName() string { return "statshouse.getTargets2" }
func (StatshouseGetTargets2Bytes) TLTag() uint32  { return 0x41df72a3 }

func (item *StatshouseGetTargets2Bytes) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.PromHostName = item.PromHostName[:0]
	item.OldHash = item.OldHash[:0]
}

func (item *StatshouseGetTargets2Bytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.PromHostName); err != nil {
		return w, err
	}
	return basictl.StringReadBytes(w, &item.OldHash)
}

func (item *StatshouseGetTargets2Bytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = item.Header.Write(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringWriteBytes(w, item.PromHostName); err != nil {
		return w, err
	}
	return basictl.StringWriteBytes(w, item.OldHash)
}

func (item *StatshouseGetTargets2Bytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x41df72a3); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTargets2Bytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x41df72a3)
	return item.Write(w)
}

func (item *StatshouseGetTargets2Bytes) ReadResult(w []byte, ret *StatshouseGetTargetsResultBytes) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetTargets2Bytes) WriteResult(w []byte, ret StatshouseGetTargetsResultBytes) (_ []byte, err error) {
	return ret.WriteBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetTargets2Bytes) ReadResultJSON(j interface{}, ret *StatshouseGetTargetsResultBytes) error {
	if err := StatshouseGetTargetsResultBytes__ReadJSON(ret, j, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTargets2Bytes) WriteResultJSON(w []byte, ret StatshouseGetTargetsResultBytes) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseGetTargets2Bytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTargetsResultBytes
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTargets2Bytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.getTargets2", err.Error())
	}
	var ret StatshouseGetTargetsResultBytes
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTargets2Bytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetTargets2Bytes__ReadJSON(item *StatshouseGetTargets2Bytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetTargets2Bytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getTargets2", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jHeader := _jm["header"]
	delete(_jm, "header")
	_jPromHostName := _jm["prom_host_name"]
	delete(_jm, "prom_host_name")
	if err := JsonReadStringBytes(_jPromHostName, &item.PromHostName); err != nil {
		return err
	}
	_jOldHash := _jm["old_hash"]
	delete(_jm, "old_hash")
	if err := JsonReadStringBytes(_jOldHash, &item.OldHash); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getTargets2", k)
	}
	if err := StatshouseCommonProxyHeaderBytes__ReadJSON(&item.Header, _jHeader, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTargets2Bytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	if w, err = item.Header.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	if len(item.PromHostName) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"prom_host_name":`...)
		w = basictl.JSONWriteStringBytes(w, item.PromHostName)
	}
	if len(item.OldHash) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"old_hash":`...)
		w = basictl.JSONWriteStringBytes(w, item.OldHash)
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTargets2Bytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTargets2Bytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getTargets2", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getTargets2", err.Error())
	}
	return nil
}
