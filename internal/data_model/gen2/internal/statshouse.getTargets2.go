// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseGetTargets2 struct {
	FieldsMask           uint32
	Header               StatshouseCommonProxyHeader
	PromHostName         string
	OldHash              string
	GaugeMetrics         bool // Conditional: item.FieldsMask.0
	MetricRelabelConfigs bool // Conditional: item.FieldsMask.1
}

func (StatshouseGetTargets2) TLName() string { return "statshouse.getTargets2" }
func (StatshouseGetTargets2) TLTag() uint32  { return 0x41df72a3 }

func (item *StatshouseGetTargets2) SetGaugeMetrics(v bool) {
	item.GaugeMetrics = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseGetTargets2) ClearGaugeMetrics() {
	item.GaugeMetrics = false
	item.FieldsMask &^= 1 << 0
}
func (item StatshouseGetTargets2) IsSetGaugeMetrics() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTargets2) SetMetricRelabelConfigs(v bool) {
	item.MetricRelabelConfigs = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseGetTargets2) ClearMetricRelabelConfigs() {
	item.MetricRelabelConfigs = false
	item.FieldsMask &^= 1 << 1
}
func (item StatshouseGetTargets2) IsSetMetricRelabelConfigs() bool {
	return item.FieldsMask&(1<<1) != 0
}

func (item *StatshouseGetTargets2) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.PromHostName = ""
	item.OldHash = ""
	item.GaugeMetrics = false
	item.MetricRelabelConfigs = false
}

func (item *StatshouseGetTargets2) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.PromHostName); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.OldHash); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = BoolReadBoxed(w, &item.GaugeMetrics); err != nil {
			return w, err
		}
	} else {
		item.GaugeMetrics = false
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = BoolReadBoxed(w, &item.MetricRelabelConfigs); err != nil {
			return w, err
		}
	} else {
		item.MetricRelabelConfigs = false
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseGetTargets2) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseGetTargets2) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = item.Header.Write(w, item.FieldsMask)
	w = basictl.StringWrite(w, item.PromHostName)
	w = basictl.StringWrite(w, item.OldHash)
	if item.FieldsMask&(1<<0) != 0 {
		w = BoolWriteBoxed(w, item.GaugeMetrics)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = BoolWriteBoxed(w, item.MetricRelabelConfigs)
	}
	return w
}

func (item *StatshouseGetTargets2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x41df72a3); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseGetTargets2) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseGetTargets2) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x41df72a3)
	return item.Write(w)
}

func (item *StatshouseGetTargets2) ReadResult(w []byte, ret *StatshouseGetTargetsResult) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetTargets2) WriteResult(w []byte, ret StatshouseGetTargetsResult) (_ []byte, err error) {
	w = ret.WriteBoxed(w, item.FieldsMask)
	return w, nil
}

func (item *StatshouseGetTargets2) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *StatshouseGetTargetsResult) error {
	if err := ret.ReadJSON(legacyTypeNames, in, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTargets2) WriteResultJSON(w []byte, ret StatshouseGetTargetsResult) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *StatshouseGetTargets2) writeResultJSON(newTypeNames bool, short bool, w []byte, ret StatshouseGetTargetsResult) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	return w, nil
}

func (item *StatshouseGetTargets2) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTargetsResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTargets2) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTargetsResult
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *StatshouseGetTargets2) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret StatshouseGetTargetsResult
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTargets2) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseGetTargets2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var rawHeader []byte
	var propPromHostNamePresented bool
	var propOldHashPresented bool
	var propGaugeMetricsPresented bool
	var propMetricRelabelConfigsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "header":
				if rawHeader != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "header")
				}
				rawHeader = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "prom_host_name":
				if propPromHostNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "prom_host_name")
				}
				if err := Json2ReadString(in, &item.PromHostName); err != nil {
					return err
				}
				propPromHostNamePresented = true
			case "old_hash":
				if propOldHashPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "old_hash")
				}
				if err := Json2ReadString(in, &item.OldHash); err != nil {
					return err
				}
				propOldHashPresented = true
			case "gauge_metrics":
				if propGaugeMetricsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "gauge_metrics")
				}
				if err := Json2ReadBool(in, &item.GaugeMetrics); err != nil {
					return err
				}
				propGaugeMetricsPresented = true
			case "metric_relabel_configs":
				if propMetricRelabelConfigsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "metric_relabel_configs")
				}
				if err := Json2ReadBool(in, &item.MetricRelabelConfigs); err != nil {
					return err
				}
				propMetricRelabelConfigsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.getTargets2", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propPromHostNamePresented {
		item.PromHostName = ""
	}
	if !propOldHashPresented {
		item.OldHash = ""
	}
	if !propGaugeMetricsPresented {
		item.GaugeMetrics = false
	}
	if !propMetricRelabelConfigsPresented {
		item.MetricRelabelConfigs = false
	}
	if propGaugeMetricsPresented {
		item.FieldsMask |= 1 << 0
	}
	if propMetricRelabelConfigsPresented {
		item.FieldsMask |= 1 << 1
	}
	var inHeaderPointer *basictl.JsonLexer
	inHeader := basictl.JsonLexer{Data: rawHeader}
	if rawHeader != nil {
		inHeaderPointer = &inHeader
	}
	if err := item.Header.ReadJSON(legacyTypeNames, inHeaderPointer, item.FieldsMask); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseGetTargets2) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseGetTargets2) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseGetTargets2) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	w = item.Header.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	backupIndexPromHostName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"prom_host_name":`...)
	w = basictl.JSONWriteString(w, item.PromHostName)
	if (len(item.PromHostName) != 0) == false {
		w = w[:backupIndexPromHostName]
	}
	backupIndexOldHash := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"old_hash":`...)
	w = basictl.JSONWriteString(w, item.OldHash)
	if (len(item.OldHash) != 0) == false {
		w = w[:backupIndexOldHash]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"gauge_metrics":`...)
		w = basictl.JSONWriteBool(w, item.GaugeMetrics)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric_relabel_configs":`...)
		w = basictl.JSONWriteBool(w, item.MetricRelabelConfigs)
	}
	return append(w, '}')
}

func (item *StatshouseGetTargets2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseGetTargets2) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.getTargets2", err.Error())
	}
	return nil
}

type StatshouseGetTargets2Bytes struct {
	FieldsMask           uint32
	Header               StatshouseCommonProxyHeaderBytes
	PromHostName         []byte
	OldHash              []byte
	GaugeMetrics         bool // Conditional: item.FieldsMask.0
	MetricRelabelConfigs bool // Conditional: item.FieldsMask.1
}

func (StatshouseGetTargets2Bytes) TLName() string { return "statshouse.getTargets2" }
func (StatshouseGetTargets2Bytes) TLTag() uint32  { return 0x41df72a3 }

func (item *StatshouseGetTargets2Bytes) SetGaugeMetrics(v bool) {
	item.GaugeMetrics = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseGetTargets2Bytes) ClearGaugeMetrics() {
	item.GaugeMetrics = false
	item.FieldsMask &^= 1 << 0
}
func (item StatshouseGetTargets2Bytes) IsSetGaugeMetrics() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseGetTargets2Bytes) SetMetricRelabelConfigs(v bool) {
	item.MetricRelabelConfigs = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseGetTargets2Bytes) ClearMetricRelabelConfigs() {
	item.MetricRelabelConfigs = false
	item.FieldsMask &^= 1 << 1
}
func (item StatshouseGetTargets2Bytes) IsSetMetricRelabelConfigs() bool {
	return item.FieldsMask&(1<<1) != 0
}

func (item *StatshouseGetTargets2Bytes) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.PromHostName = item.PromHostName[:0]
	item.OldHash = item.OldHash[:0]
	item.GaugeMetrics = false
	item.MetricRelabelConfigs = false
}

func (item *StatshouseGetTargets2Bytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.PromHostName); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.OldHash); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = BoolReadBoxed(w, &item.GaugeMetrics); err != nil {
			return w, err
		}
	} else {
		item.GaugeMetrics = false
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = BoolReadBoxed(w, &item.MetricRelabelConfigs); err != nil {
			return w, err
		}
	} else {
		item.MetricRelabelConfigs = false
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseGetTargets2Bytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseGetTargets2Bytes) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = item.Header.Write(w, item.FieldsMask)
	w = basictl.StringWriteBytes(w, item.PromHostName)
	w = basictl.StringWriteBytes(w, item.OldHash)
	if item.FieldsMask&(1<<0) != 0 {
		w = BoolWriteBoxed(w, item.GaugeMetrics)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = BoolWriteBoxed(w, item.MetricRelabelConfigs)
	}
	return w
}

func (item *StatshouseGetTargets2Bytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x41df72a3); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseGetTargets2Bytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseGetTargets2Bytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x41df72a3)
	return item.Write(w)
}

func (item *StatshouseGetTargets2Bytes) ReadResult(w []byte, ret *StatshouseGetTargetsResultBytes) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldsMask)
}

func (item *StatshouseGetTargets2Bytes) WriteResult(w []byte, ret StatshouseGetTargetsResultBytes) (_ []byte, err error) {
	w = ret.WriteBoxed(w, item.FieldsMask)
	return w, nil
}

func (item *StatshouseGetTargets2Bytes) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *StatshouseGetTargetsResultBytes) error {
	if err := ret.ReadJSON(legacyTypeNames, in, item.FieldsMask); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTargets2Bytes) WriteResultJSON(w []byte, ret StatshouseGetTargetsResultBytes) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *StatshouseGetTargets2Bytes) writeResultJSON(newTypeNames bool, short bool, w []byte, ret StatshouseGetTargetsResultBytes) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	return w, nil
}

func (item *StatshouseGetTargets2Bytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTargetsResultBytes
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseGetTargets2Bytes) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseGetTargetsResultBytes
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *StatshouseGetTargets2Bytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret StatshouseGetTargetsResultBytes
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseGetTargets2Bytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseGetTargets2Bytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var rawHeader []byte
	var propPromHostNamePresented bool
	var propOldHashPresented bool
	var propGaugeMetricsPresented bool
	var propMetricRelabelConfigsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "header":
				if rawHeader != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "header")
				}
				rawHeader = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "prom_host_name":
				if propPromHostNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "prom_host_name")
				}
				if err := Json2ReadStringBytes(in, &item.PromHostName); err != nil {
					return err
				}
				propPromHostNamePresented = true
			case "old_hash":
				if propOldHashPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "old_hash")
				}
				if err := Json2ReadStringBytes(in, &item.OldHash); err != nil {
					return err
				}
				propOldHashPresented = true
			case "gauge_metrics":
				if propGaugeMetricsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "gauge_metrics")
				}
				if err := Json2ReadBool(in, &item.GaugeMetrics); err != nil {
					return err
				}
				propGaugeMetricsPresented = true
			case "metric_relabel_configs":
				if propMetricRelabelConfigsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargets2", "metric_relabel_configs")
				}
				if err := Json2ReadBool(in, &item.MetricRelabelConfigs); err != nil {
					return err
				}
				propMetricRelabelConfigsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.getTargets2", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propPromHostNamePresented {
		item.PromHostName = item.PromHostName[:0]
	}
	if !propOldHashPresented {
		item.OldHash = item.OldHash[:0]
	}
	if !propGaugeMetricsPresented {
		item.GaugeMetrics = false
	}
	if !propMetricRelabelConfigsPresented {
		item.MetricRelabelConfigs = false
	}
	if propGaugeMetricsPresented {
		item.FieldsMask |= 1 << 0
	}
	if propMetricRelabelConfigsPresented {
		item.FieldsMask |= 1 << 1
	}
	var inHeaderPointer *basictl.JsonLexer
	inHeader := basictl.JsonLexer{Data: rawHeader}
	if rawHeader != nil {
		inHeaderPointer = &inHeader
	}
	if err := item.Header.ReadJSON(legacyTypeNames, inHeaderPointer, item.FieldsMask); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseGetTargets2Bytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseGetTargets2Bytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseGetTargets2Bytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	w = item.Header.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	backupIndexPromHostName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"prom_host_name":`...)
	w = basictl.JSONWriteStringBytes(w, item.PromHostName)
	if (len(item.PromHostName) != 0) == false {
		w = w[:backupIndexPromHostName]
	}
	backupIndexOldHash := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"old_hash":`...)
	w = basictl.JSONWriteStringBytes(w, item.OldHash)
	if (len(item.OldHash) != 0) == false {
		w = w[:backupIndexOldHash]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"gauge_metrics":`...)
		w = basictl.JSONWriteBool(w, item.GaugeMetrics)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric_relabel_configs":`...)
		w = basictl.JSONWriteBool(w, item.MetricRelabelConfigs)
	}
	return append(w, '}')
}

func (item *StatshouseGetTargets2Bytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseGetTargets2Bytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.getTargets2", err.Error())
	}
	return nil
}
