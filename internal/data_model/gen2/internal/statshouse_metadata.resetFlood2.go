// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseMetadataResetFlood2 struct {
	FieldMask uint32
	Metric    string
}

func (StatshouseMetadataResetFlood2) TLName() string { return "statshouse_metadata.resetFlood2" }
func (StatshouseMetadataResetFlood2) TLTag() uint32  { return 0x88d0fd5e }

func (item *StatshouseMetadataResetFlood2) Reset() {
	item.FieldMask = 0
	item.Metric = ""
}

func (item *StatshouseMetadataResetFlood2) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldMask); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.Metric)
}

func (item *StatshouseMetadataResetFlood2) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldMask)
	return basictl.StringWrite(w, item.Metric)
}

func (item *StatshouseMetadataResetFlood2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x88d0fd5e); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseMetadataResetFlood2) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x88d0fd5e)
	return item.Write(w)
}

func (item *StatshouseMetadataResetFlood2) ReadResult(w []byte, ret *StatshouseMetadataResetFloodResponse2) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseMetadataResetFlood2) WriteResult(w []byte, ret StatshouseMetadataResetFloodResponse2) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *StatshouseMetadataResetFlood2) ReadResultJSON(j interface{}, ret *StatshouseMetadataResetFloodResponse2) error {
	if err := StatshouseMetadataResetFloodResponse2__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseMetadataResetFlood2) WriteResultJSON(w []byte, ret StatshouseMetadataResetFloodResponse2) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseMetadataResetFlood2) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret StatshouseMetadataResetFloodResponse2
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseMetadataResetFlood2) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse_metadata.resetFlood2", err.Error())
	}
	var ret StatshouseMetadataResetFloodResponse2
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseMetadataResetFlood2) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseMetadataResetFlood2__ReadJSON(item *StatshouseMetadataResetFlood2, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseMetadataResetFlood2) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse_metadata.resetFlood2", "expected json object")
	}
	_jFieldMask := _jm["field_mask"]
	delete(_jm, "field_mask")
	if err := JsonReadUint32(_jFieldMask, &item.FieldMask); err != nil {
		return err
	}
	_jMetric := _jm["metric"]
	delete(_jm, "metric")
	if err := JsonReadString(_jMetric, &item.Metric); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse_metadata.resetFlood2", k)
	}
	return nil
}

func (item *StatshouseMetadataResetFlood2) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"field_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldMask)
	}
	if len(item.Metric) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric":`...)
		w = basictl.JSONWriteString(w, item.Metric)
	}
	return append(w, '}'), nil
}

func (item *StatshouseMetadataResetFlood2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseMetadataResetFlood2) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse_metadata.resetFlood2", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse_metadata.resetFlood2", err.Error())
	}
	return nil
}
