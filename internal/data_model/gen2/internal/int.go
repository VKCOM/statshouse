// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinTuple12IntReset(vec *[12]int32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple12IntRead(w []byte, vec *[12]int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple12IntWrite(w []byte, vec *[12]int32) []byte {
	for _, elem := range *vec {
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinTuple12IntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[12]int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[12]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 12 {
				return ErrorWrongSequenceLength("[12]int32", index+1, 12)
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[12]int32", "expected json array's end")
		}
	}
	if index != 12 {
		return ErrorWrongSequenceLength("[12]int32", index+1, 12)
	}
	return nil
}

func BuiltinTuple12IntWriteJSON(w []byte, vec *[12]int32) []byte {
	return BuiltinTuple12IntWriteJSONOpt(true, false, w, vec)
}
func BuiltinTuple12IntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[12]int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

func BuiltinTuple4IntReset(vec *[4]int32) {
	for i := range *vec {
		(*vec)[i] = 0
	}
}

func BuiltinTuple4IntRead(w []byte, vec *[4]int32) (_ []byte, err error) {
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinTuple4IntWrite(w []byte, vec *[4]int32) []byte {
	for _, elem := range *vec {
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinTuple4IntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[4]int32) error {
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[4]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if index == 4 {
				return ErrorWrongSequenceLength("[4]int32", index+1, 4)
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[4]int32", "expected json array's end")
		}
	}
	if index != 4 {
		return ErrorWrongSequenceLength("[4]int32", index+1, 4)
	}
	return nil
}

func BuiltinTuple4IntWriteJSON(w []byte, vec *[4]int32) []byte {
	return BuiltinTuple4IntWriteJSONOpt(true, false, w, vec)
}
func BuiltinTuple4IntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec *[4]int32) []byte {
	w = append(w, '[')
	for _, elem := range *vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

func BuiltinVectorIntRead(w []byte, vec *[]int32) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]int32, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = basictl.IntRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorIntWrite(w []byte, vec []int32) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = basictl.IntWrite(w, elem)
	}
	return w
}

func BuiltinVectorIntReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]int32) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int32", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue int32
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := Json2ReadInt32(in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]int32", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorIntWriteJSON(w []byte, vec []int32) []byte {
	return BuiltinVectorIntWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorIntWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []int32) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = basictl.JSONWriteInt32(w, elem)
	}
	return append(w, ']')
}

type Int int32

func (Int) TLName() string { return "int" }
func (Int) TLTag() uint32  { return 0xa8509bda }

func (item *Int) Reset() {
	ptr := (*int32)(item)
	*ptr = 0
}

func (item *Int) Read(w []byte) (_ []byte, err error) {
	ptr := (*int32)(item)
	return basictl.IntRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *Int) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *Int) Write(w []byte) []byte {
	ptr := (*int32)(item)
	return basictl.IntWrite(w, *ptr)
}

func (item *Int) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xa8509bda); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *Int) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *Int) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xa8509bda)
	return item.Write(w)
}

func (item Int) String() string {
	return string(item.WriteJSON(nil))
}

func (item *Int) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*int32)(item)
	if err := Json2ReadInt32(in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *Int) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *Int) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *Int) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*int32)(item)
	w = basictl.JSONWriteInt32(w, *ptr)
	return w
}
func (item *Int) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *Int) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("int", err.Error())
	}
	return nil
}
