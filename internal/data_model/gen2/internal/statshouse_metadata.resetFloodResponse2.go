// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseMetadataResetFloodResponse2 struct {
	BudgetBefore int32
	BudgetAfter  int32
}

func (StatshouseMetadataResetFloodResponse2) TLName() string {
	return "statshouse_metadata.resetFloodResponse2"
}
func (StatshouseMetadataResetFloodResponse2) TLTag() uint32 { return 0x9286abef }

func (item *StatshouseMetadataResetFloodResponse2) Reset() {
	item.BudgetBefore = 0
	item.BudgetAfter = 0
}

func (item *StatshouseMetadataResetFloodResponse2) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.BudgetBefore); err != nil {
		return w, err
	}
	return basictl.IntRead(w, &item.BudgetAfter)
}

func (item *StatshouseMetadataResetFloodResponse2) Write(w []byte) (_ []byte, err error) {
	w = basictl.IntWrite(w, item.BudgetBefore)
	return basictl.IntWrite(w, item.BudgetAfter), nil
}

func (item *StatshouseMetadataResetFloodResponse2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abef); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseMetadataResetFloodResponse2) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286abef)
	return item.Write(w)
}

func (item StatshouseMetadataResetFloodResponse2) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseMetadataResetFloodResponse2__ReadJSON(item *StatshouseMetadataResetFloodResponse2, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseMetadataResetFloodResponse2) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse_metadata.resetFloodResponse2", "expected json object")
	}
	_jBudgetBefore := _jm["budget_before"]
	delete(_jm, "budget_before")
	if err := JsonReadInt32(_jBudgetBefore, &item.BudgetBefore); err != nil {
		return err
	}
	_jBudgetAfter := _jm["budget_after"]
	delete(_jm, "budget_after")
	if err := JsonReadInt32(_jBudgetAfter, &item.BudgetAfter); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse_metadata.resetFloodResponse2", k)
	}
	return nil
}

func (item *StatshouseMetadataResetFloodResponse2) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.BudgetBefore != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"budget_before":`...)
		w = basictl.JSONWriteInt32(w, item.BudgetBefore)
	}
	if item.BudgetAfter != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"budget_after":`...)
		w = basictl.JSONWriteInt32(w, item.BudgetAfter)
	}
	return append(w, '}'), nil
}

func (item *StatshouseMetadataResetFloodResponse2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseMetadataResetFloodResponse2) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse_metadata.resetFloodResponse2", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse_metadata.resetFloodResponse2", err.Error())
	}
	return nil
}
