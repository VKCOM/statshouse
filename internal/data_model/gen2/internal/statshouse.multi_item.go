// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseMultiItem struct {
	FieldsMask uint32
	Metric     int32
	Keys       []int32
	T          uint32 // Conditional: item.FieldsMask.10
	Tail       StatshouseMultiValue
	Top        []StatshouseTopElement // Conditional: item.FieldsMask.11
}

func (StatshouseMultiItem) TLName() string { return "statshouse.multi_item" }
func (StatshouseMultiItem) TLTag() uint32  { return 0xc803e07 }

func (item *StatshouseMultiItem) SetT(v uint32) {
	item.T = v
	item.FieldsMask |= 1 << 10
}
func (item *StatshouseMultiItem) ClearT() {
	item.T = 0
	item.FieldsMask &^= 1 << 10
}
func (item StatshouseMultiItem) IsSetT() bool { return item.FieldsMask&(1<<10) != 0 }

func (item *StatshouseMultiItem) SetTop(v []StatshouseTopElement) {
	item.Top = v
	item.FieldsMask |= 1 << 11
}
func (item *StatshouseMultiItem) ClearTop() {
	item.Top = item.Top[:0]
	item.FieldsMask &^= 1 << 11
}
func (item StatshouseMultiItem) IsSetTop() bool { return item.FieldsMask&(1<<11) != 0 }

func (item *StatshouseMultiItem) Reset() {
	item.FieldsMask = 0
	item.Metric = 0
	item.Keys = item.Keys[:0]
	item.T = 0
	item.Tail.Reset()
	item.Top = item.Top[:0]
}

func (item *StatshouseMultiItem) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = VectorInt0Read(w, &item.Keys); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<10) != 0 {
		if w, err = basictl.NatRead(w, &item.T); err != nil {
			return w, err
		}
	} else {
		item.T = 0
	}
	if w, err = item.Tail.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<11) != 0 {
		if w, err = VectorStatshouseTopElement0Read(w, &item.Top); err != nil {
			return w, err
		}
	} else {
		item.Top = item.Top[:0]
	}
	return w, nil
}

func (item *StatshouseMultiItem) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.IntWrite(w, item.Metric)
	if w, err = VectorInt0Write(w, item.Keys); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<10) != 0 {
		w = basictl.NatWrite(w, item.T)
	}
	if w, err = item.Tail.Write(w, item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<11) != 0 {
		if w, err = VectorStatshouseTopElement0Write(w, item.Top); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *StatshouseMultiItem) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc803e07); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseMultiItem) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0xc803e07)
	return item.Write(w)
}

func (item StatshouseMultiItem) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseMultiItem__ReadJSON(item *StatshouseMultiItem, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseMultiItem) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.multi_item", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jMetric := _jm["metric"]
	delete(_jm, "metric")
	if err := JsonReadInt32(_jMetric, &item.Metric); err != nil {
		return err
	}
	_jKeys := _jm["keys"]
	delete(_jm, "keys")
	_jT := _jm["t"]
	delete(_jm, "t")
	_jTail := _jm["tail"]
	delete(_jm, "tail")
	_jTop := _jm["top"]
	delete(_jm, "top")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.multi_item", k)
	}
	if _jT != nil {
		item.FieldsMask |= 1 << 10
	}
	if _jTop != nil {
		item.FieldsMask |= 1 << 11
	}
	if err := VectorInt0ReadJSON(_jKeys, &item.Keys); err != nil {
		return err
	}
	if _jT != nil {
		if err := JsonReadUint32(_jT, &item.T); err != nil {
			return err
		}
	} else {
		item.T = 0
	}
	if err := StatshouseMultiValue__ReadJSON(&item.Tail, _jTail, item.FieldsMask); err != nil {
		return err
	}
	if _jTop != nil {
		if err := VectorStatshouseTopElement0ReadJSON(_jTop, &item.Top); err != nil {
			return err
		}
	} else {
		item.Top = item.Top[:0]
	}
	return nil
}

func (item *StatshouseMultiItem) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.Metric != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric":`...)
		w = basictl.JSONWriteInt32(w, item.Metric)
	}
	if len(item.Keys) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"keys":`...)
		if w, err = VectorInt0WriteJSON(w, item.Keys); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<10) != 0 {
		if item.T != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"t":`...)
			w = basictl.JSONWriteUint32(w, item.T)
		}
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tail":`...)
	if w, err = item.Tail.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<11) != 0 {
		if len(item.Top) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"top":`...)
			if w, err = VectorStatshouseTopElement0WriteJSON(w, item.Top); err != nil {
				return w, err
			}
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseMultiItem) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseMultiItem) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.multi_item", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.multi_item", err.Error())
	}
	return nil
}

type StatshouseMultiItemBytes struct {
	FieldsMask uint32
	Metric     int32
	Keys       []int32
	T          uint32 // Conditional: item.FieldsMask.10
	Tail       StatshouseMultiValueBytes
	Top        []StatshouseTopElementBytes // Conditional: item.FieldsMask.11
}

func (StatshouseMultiItemBytes) TLName() string { return "statshouse.multi_item" }
func (StatshouseMultiItemBytes) TLTag() uint32  { return 0xc803e07 }

func (item *StatshouseMultiItemBytes) SetT(v uint32) {
	item.T = v
	item.FieldsMask |= 1 << 10
}
func (item *StatshouseMultiItemBytes) ClearT() {
	item.T = 0
	item.FieldsMask &^= 1 << 10
}
func (item StatshouseMultiItemBytes) IsSetT() bool { return item.FieldsMask&(1<<10) != 0 }

func (item *StatshouseMultiItemBytes) SetTop(v []StatshouseTopElementBytes) {
	item.Top = v
	item.FieldsMask |= 1 << 11
}
func (item *StatshouseMultiItemBytes) ClearTop() {
	item.Top = item.Top[:0]
	item.FieldsMask &^= 1 << 11
}
func (item StatshouseMultiItemBytes) IsSetTop() bool { return item.FieldsMask&(1<<11) != 0 }

func (item *StatshouseMultiItemBytes) Reset() {
	item.FieldsMask = 0
	item.Metric = 0
	item.Keys = item.Keys[:0]
	item.T = 0
	item.Tail.Reset()
	item.Top = item.Top[:0]
}

func (item *StatshouseMultiItemBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = VectorInt0Read(w, &item.Keys); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<10) != 0 {
		if w, err = basictl.NatRead(w, &item.T); err != nil {
			return w, err
		}
	} else {
		item.T = 0
	}
	if w, err = item.Tail.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<11) != 0 {
		if w, err = VectorStatshouseTopElement0BytesRead(w, &item.Top); err != nil {
			return w, err
		}
	} else {
		item.Top = item.Top[:0]
	}
	return w, nil
}

func (item *StatshouseMultiItemBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.IntWrite(w, item.Metric)
	if w, err = VectorInt0Write(w, item.Keys); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<10) != 0 {
		w = basictl.NatWrite(w, item.T)
	}
	if w, err = item.Tail.Write(w, item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<11) != 0 {
		if w, err = VectorStatshouseTopElement0BytesWrite(w, item.Top); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *StatshouseMultiItemBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xc803e07); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseMultiItemBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0xc803e07)
	return item.Write(w)
}

func (item StatshouseMultiItemBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseMultiItemBytes__ReadJSON(item *StatshouseMultiItemBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseMultiItemBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.multi_item", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jMetric := _jm["metric"]
	delete(_jm, "metric")
	if err := JsonReadInt32(_jMetric, &item.Metric); err != nil {
		return err
	}
	_jKeys := _jm["keys"]
	delete(_jm, "keys")
	_jT := _jm["t"]
	delete(_jm, "t")
	_jTail := _jm["tail"]
	delete(_jm, "tail")
	_jTop := _jm["top"]
	delete(_jm, "top")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.multi_item", k)
	}
	if _jT != nil {
		item.FieldsMask |= 1 << 10
	}
	if _jTop != nil {
		item.FieldsMask |= 1 << 11
	}
	if err := VectorInt0ReadJSON(_jKeys, &item.Keys); err != nil {
		return err
	}
	if _jT != nil {
		if err := JsonReadUint32(_jT, &item.T); err != nil {
			return err
		}
	} else {
		item.T = 0
	}
	if err := StatshouseMultiValueBytes__ReadJSON(&item.Tail, _jTail, item.FieldsMask); err != nil {
		return err
	}
	if _jTop != nil {
		if err := VectorStatshouseTopElement0BytesReadJSON(_jTop, &item.Top); err != nil {
			return err
		}
	} else {
		item.Top = item.Top[:0]
	}
	return nil
}

func (item *StatshouseMultiItemBytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.Metric != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric":`...)
		w = basictl.JSONWriteInt32(w, item.Metric)
	}
	if len(item.Keys) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"keys":`...)
		if w, err = VectorInt0WriteJSON(w, item.Keys); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<10) != 0 {
		if item.T != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"t":`...)
			w = basictl.JSONWriteUint32(w, item.T)
		}
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tail":`...)
	if w, err = item.Tail.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<11) != 0 {
		if len(item.Top) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"top":`...)
			if w, err = VectorStatshouseTopElement0BytesWriteJSON(w, item.Top); err != nil {
				return w, err
			}
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseMultiItemBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseMultiItemBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.multi_item", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.multi_item", err.Error())
	}
	return nil
}

func VectorStatshouseMultiItem0Read(w []byte, vec *[]StatshouseMultiItem) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseMultiItem, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMultiItem0Write(w []byte, vec []StatshouseMultiItem) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMultiItem0ReadJSON(j interface{}, vec *[]StatshouseMultiItem) error {
	l, _arr, err := JsonReadArray("[]StatshouseMultiItem", j)
	if err != nil {
		return err
	}
	if cap(*vec) < l {
		*vec = make([]StatshouseMultiItem, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if err := StatshouseMultiItem__ReadJSON(&(*vec)[i], _arr[i]); err != nil {
			return err
		}
	}
	return nil
}

func VectorStatshouseMultiItem0WriteJSON(w []byte, vec []StatshouseMultiItem) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSON(w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

func VectorStatshouseMultiItem0BytesRead(w []byte, vec *[]StatshouseMultiItemBytes) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseMultiItemBytes, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMultiItem0BytesWrite(w []byte, vec []StatshouseMultiItemBytes) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorStatshouseMultiItem0BytesReadJSON(j interface{}, vec *[]StatshouseMultiItemBytes) error {
	l, _arr, err := JsonReadArray("[]StatshouseMultiItemBytes", j)
	if err != nil {
		return err
	}
	if cap(*vec) < l {
		*vec = make([]StatshouseMultiItemBytes, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if err := StatshouseMultiItemBytes__ReadJSON(&(*vec)[i], _arr[i]); err != nil {
			return err
		}
	}
	return nil
}

func VectorStatshouseMultiItem0BytesWriteJSON(w []byte, vec []StatshouseMultiItemBytes) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSON(w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}
