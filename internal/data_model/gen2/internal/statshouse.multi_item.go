// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorStatshouseMultiItemRead(w []byte, vec *[]StatshouseMultiItem) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseMultiItem, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseMultiItemWrite(w []byte, vec []StatshouseMultiItem) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorStatshouseMultiItemReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]StatshouseMultiItem) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseMultiItem", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue StatshouseMultiItem
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseMultiItem", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorStatshouseMultiItemWriteJSON(w []byte, vec []StatshouseMultiItem) []byte {
	return BuiltinVectorStatshouseMultiItemWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorStatshouseMultiItemWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []StatshouseMultiItem) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']')
}

func BuiltinVectorStatshouseMultiItemBytesRead(w []byte, vec *[]StatshouseMultiItemBytes) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseMultiItemBytes, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseMultiItemBytesWrite(w []byte, vec []StatshouseMultiItemBytes) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorStatshouseMultiItemBytesReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]StatshouseMultiItemBytes) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseMultiItemBytes", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue StatshouseMultiItemBytes
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseMultiItemBytes", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorStatshouseMultiItemBytesWriteJSON(w []byte, vec []StatshouseMultiItemBytes) []byte {
	return BuiltinVectorStatshouseMultiItemBytesWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorStatshouseMultiItemBytesWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []StatshouseMultiItemBytes) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']')
}

type StatshouseMultiItem struct {
	FieldsMask uint32
	Metric     int32
	Keys       []int32
	Skeys      []string // Conditional: item.FieldsMask.12
	// WeightMultiplier (TrueType) // Conditional: item.FieldsMask.17
	T    uint32 // Conditional: item.FieldsMask.10
	Tail StatshouseMultiValue
	Top  []StatshouseTopElement // Conditional: item.FieldsMask.11
}

func (StatshouseMultiItem) TLName() string { return "statshouse.multi_item" }
func (StatshouseMultiItem) TLTag() uint32  { return 0x0c803e07 }

func (item *StatshouseMultiItem) SetSkeys(v []string) {
	item.Skeys = v
	item.FieldsMask |= 1 << 12
}
func (item *StatshouseMultiItem) ClearSkeys() {
	item.Skeys = item.Skeys[:0]
	item.FieldsMask &^= 1 << 12
}
func (item StatshouseMultiItem) IsSetSkeys() bool { return item.FieldsMask&(1<<12) != 0 }

func (item *StatshouseMultiItem) SetWeightMultiplier(v bool) {
	if v {
		item.FieldsMask |= 1 << 17
	} else {
		item.FieldsMask &^= 1 << 17
	}
}
func (item StatshouseMultiItem) IsSetWeightMultiplier() bool { return item.FieldsMask&(1<<17) != 0 }

func (item *StatshouseMultiItem) SetT(v uint32) {
	item.T = v
	item.FieldsMask |= 1 << 10
}
func (item *StatshouseMultiItem) ClearT() {
	item.T = 0
	item.FieldsMask &^= 1 << 10
}
func (item StatshouseMultiItem) IsSetT() bool { return item.FieldsMask&(1<<10) != 0 }

func (item *StatshouseMultiItem) SetTop(v []StatshouseTopElement) {
	item.Top = v
	item.FieldsMask |= 1 << 11
}
func (item *StatshouseMultiItem) ClearTop() {
	item.Top = item.Top[:0]
	item.FieldsMask &^= 1 << 11
}
func (item StatshouseMultiItem) IsSetTop() bool { return item.FieldsMask&(1<<11) != 0 }

func (item *StatshouseMultiItem) Reset() {
	item.FieldsMask = 0
	item.Metric = 0
	item.Keys = item.Keys[:0]
	item.Skeys = item.Skeys[:0]
	item.T = 0
	item.Tail.Reset()
	item.Top = item.Top[:0]
}

func (item *StatshouseMultiItem) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorIntRead(w, &item.Keys); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<12) != 0 {
		if w, err = BuiltinVectorStringRead(w, &item.Skeys); err != nil {
			return w, err
		}
	} else {
		item.Skeys = item.Skeys[:0]
	}
	if item.FieldsMask&(1<<10) != 0 {
		if w, err = basictl.NatRead(w, &item.T); err != nil {
			return w, err
		}
	} else {
		item.T = 0
	}
	if w, err = item.Tail.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<11) != 0 {
		if w, err = BuiltinVectorStatshouseTopElementRead(w, &item.Top); err != nil {
			return w, err
		}
	} else {
		item.Top = item.Top[:0]
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseMultiItem) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseMultiItem) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.IntWrite(w, item.Metric)
	w = BuiltinVectorIntWrite(w, item.Keys)
	if item.FieldsMask&(1<<12) != 0 {
		w = BuiltinVectorStringWrite(w, item.Skeys)
	}
	if item.FieldsMask&(1<<10) != 0 {
		w = basictl.NatWrite(w, item.T)
	}
	w = item.Tail.Write(w, item.FieldsMask)
	if item.FieldsMask&(1<<11) != 0 {
		w = BuiltinVectorStatshouseTopElementWrite(w, item.Top)
	}
	return w
}

func (item *StatshouseMultiItem) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0c803e07); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseMultiItem) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseMultiItem) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0c803e07)
	return item.Write(w)
}

func (item StatshouseMultiItem) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseMultiItem) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propMetricPresented bool
	var propKeysPresented bool
	var propSkeysPresented bool
	var trueTypeWeightMultiplierPresented bool
	var trueTypeWeightMultiplierValue bool
	var propTPresented bool
	var rawTail []byte
	var propTopPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "metric":
				if propMetricPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "metric")
				}
				if err := Json2ReadInt32(in, &item.Metric); err != nil {
					return err
				}
				propMetricPresented = true
			case "keys":
				if propKeysPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "keys")
				}
				if err := BuiltinVectorIntReadJSON(legacyTypeNames, in, &item.Keys); err != nil {
					return err
				}
				propKeysPresented = true
			case "skeys":
				if propSkeysPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "skeys")
				}
				if err := BuiltinVectorStringReadJSON(legacyTypeNames, in, &item.Skeys); err != nil {
					return err
				}
				propSkeysPresented = true
			case "weightMultiplier":
				if trueTypeWeightMultiplierPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "weightMultiplier")
				}
				if err := Json2ReadBool(in, &trueTypeWeightMultiplierValue); err != nil {
					return err
				}
				trueTypeWeightMultiplierPresented = true
			case "t":
				if propTPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "t")
				}
				if err := Json2ReadUint32(in, &item.T); err != nil {
					return err
				}
				propTPresented = true
			case "tail":
				if rawTail != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "tail")
				}
				rawTail = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "top":
				if propTopPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "top")
				}
				if err := BuiltinVectorStatshouseTopElementReadJSON(legacyTypeNames, in, &item.Top); err != nil {
					return err
				}
				propTopPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.multi_item", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propMetricPresented {
		item.Metric = 0
	}
	if !propKeysPresented {
		item.Keys = item.Keys[:0]
	}
	if !propSkeysPresented {
		item.Skeys = item.Skeys[:0]
	}
	if !propTPresented {
		item.T = 0
	}
	if !propTopPresented {
		item.Top = item.Top[:0]
	}
	if propSkeysPresented {
		item.FieldsMask |= 1 << 12
	}
	if trueTypeWeightMultiplierPresented {
		if trueTypeWeightMultiplierValue {
			item.FieldsMask |= 1 << 17
		}
	}
	if propTPresented {
		item.FieldsMask |= 1 << 10
	}
	if propTopPresented {
		item.FieldsMask |= 1 << 11
	}
	var inTailPointer *basictl.JsonLexer
	inTail := basictl.JsonLexer{Data: rawTail}
	if rawTail != nil {
		inTailPointer = &inTail
	}
	if err := item.Tail.ReadJSON(legacyTypeNames, inTailPointer, item.FieldsMask); err != nil {
		return err
	}

	// tries to set bit to zero if it is 1
	if trueTypeWeightMultiplierPresented && !trueTypeWeightMultiplierValue && (item.FieldsMask&(1<<17) != 0) {
		return ErrorInvalidJSON("statshouse.multi_item", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseMultiItem) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseMultiItem) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseMultiItem) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexMetric := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metric":`...)
	w = basictl.JSONWriteInt32(w, item.Metric)
	if (item.Metric != 0) == false {
		w = w[:backupIndexMetric]
	}
	backupIndexKeys := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"keys":`...)
	w = BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, item.Keys)
	if (len(item.Keys) != 0) == false {
		w = w[:backupIndexKeys]
	}
	if item.FieldsMask&(1<<12) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"skeys":`...)
		w = BuiltinVectorStringWriteJSONOpt(newTypeNames, short, w, item.Skeys)
	}
	if item.FieldsMask&(1<<17) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"weightMultiplier":true`...)
	}
	if item.FieldsMask&(1<<10) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"t":`...)
		w = basictl.JSONWriteUint32(w, item.T)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tail":`...)
	w = item.Tail.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	if item.FieldsMask&(1<<11) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"top":`...)
		w = BuiltinVectorStatshouseTopElementWriteJSONOpt(newTypeNames, short, w, item.Top)
	}
	return append(w, '}')
}

func (item *StatshouseMultiItem) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseMultiItem) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.multi_item", err.Error())
	}
	return nil
}

type StatshouseMultiItemBytes struct {
	FieldsMask uint32
	Metric     int32
	Keys       []int32
	Skeys      [][]byte // Conditional: item.FieldsMask.12
	// WeightMultiplier (TrueType) // Conditional: item.FieldsMask.17
	T    uint32 // Conditional: item.FieldsMask.10
	Tail StatshouseMultiValueBytes
	Top  []StatshouseTopElementBytes // Conditional: item.FieldsMask.11
}

func (StatshouseMultiItemBytes) TLName() string { return "statshouse.multi_item" }
func (StatshouseMultiItemBytes) TLTag() uint32  { return 0x0c803e07 }

func (item *StatshouseMultiItemBytes) SetSkeys(v [][]byte) {
	item.Skeys = v
	item.FieldsMask |= 1 << 12
}
func (item *StatshouseMultiItemBytes) ClearSkeys() {
	item.Skeys = item.Skeys[:0]
	item.FieldsMask &^= 1 << 12
}
func (item StatshouseMultiItemBytes) IsSetSkeys() bool { return item.FieldsMask&(1<<12) != 0 }

func (item *StatshouseMultiItemBytes) SetWeightMultiplier(v bool) {
	if v {
		item.FieldsMask |= 1 << 17
	} else {
		item.FieldsMask &^= 1 << 17
	}
}
func (item StatshouseMultiItemBytes) IsSetWeightMultiplier() bool {
	return item.FieldsMask&(1<<17) != 0
}

func (item *StatshouseMultiItemBytes) SetT(v uint32) {
	item.T = v
	item.FieldsMask |= 1 << 10
}
func (item *StatshouseMultiItemBytes) ClearT() {
	item.T = 0
	item.FieldsMask &^= 1 << 10
}
func (item StatshouseMultiItemBytes) IsSetT() bool { return item.FieldsMask&(1<<10) != 0 }

func (item *StatshouseMultiItemBytes) SetTop(v []StatshouseTopElementBytes) {
	item.Top = v
	item.FieldsMask |= 1 << 11
}
func (item *StatshouseMultiItemBytes) ClearTop() {
	item.Top = item.Top[:0]
	item.FieldsMask &^= 1 << 11
}
func (item StatshouseMultiItemBytes) IsSetTop() bool { return item.FieldsMask&(1<<11) != 0 }

func (item *StatshouseMultiItemBytes) Reset() {
	item.FieldsMask = 0
	item.Metric = 0
	item.Keys = item.Keys[:0]
	item.Skeys = item.Skeys[:0]
	item.T = 0
	item.Tail.Reset()
	item.Top = item.Top[:0]
}

func (item *StatshouseMultiItemBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorIntRead(w, &item.Keys); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<12) != 0 {
		if w, err = BuiltinVectorStringBytesRead(w, &item.Skeys); err != nil {
			return w, err
		}
	} else {
		item.Skeys = item.Skeys[:0]
	}
	if item.FieldsMask&(1<<10) != 0 {
		if w, err = basictl.NatRead(w, &item.T); err != nil {
			return w, err
		}
	} else {
		item.T = 0
	}
	if w, err = item.Tail.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<11) != 0 {
		if w, err = BuiltinVectorStatshouseTopElementBytesRead(w, &item.Top); err != nil {
			return w, err
		}
	} else {
		item.Top = item.Top[:0]
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseMultiItemBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseMultiItemBytes) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.IntWrite(w, item.Metric)
	w = BuiltinVectorIntWrite(w, item.Keys)
	if item.FieldsMask&(1<<12) != 0 {
		w = BuiltinVectorStringBytesWrite(w, item.Skeys)
	}
	if item.FieldsMask&(1<<10) != 0 {
		w = basictl.NatWrite(w, item.T)
	}
	w = item.Tail.Write(w, item.FieldsMask)
	if item.FieldsMask&(1<<11) != 0 {
		w = BuiltinVectorStatshouseTopElementBytesWrite(w, item.Top)
	}
	return w
}

func (item *StatshouseMultiItemBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x0c803e07); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseMultiItemBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseMultiItemBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x0c803e07)
	return item.Write(w)
}

func (item StatshouseMultiItemBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseMultiItemBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propMetricPresented bool
	var propKeysPresented bool
	var propSkeysPresented bool
	var trueTypeWeightMultiplierPresented bool
	var trueTypeWeightMultiplierValue bool
	var propTPresented bool
	var rawTail []byte
	var propTopPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "metric":
				if propMetricPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "metric")
				}
				if err := Json2ReadInt32(in, &item.Metric); err != nil {
					return err
				}
				propMetricPresented = true
			case "keys":
				if propKeysPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "keys")
				}
				if err := BuiltinVectorIntReadJSON(legacyTypeNames, in, &item.Keys); err != nil {
					return err
				}
				propKeysPresented = true
			case "skeys":
				if propSkeysPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "skeys")
				}
				if err := BuiltinVectorStringBytesReadJSON(legacyTypeNames, in, &item.Skeys); err != nil {
					return err
				}
				propSkeysPresented = true
			case "weightMultiplier":
				if trueTypeWeightMultiplierPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "weightMultiplier")
				}
				if err := Json2ReadBool(in, &trueTypeWeightMultiplierValue); err != nil {
					return err
				}
				trueTypeWeightMultiplierPresented = true
			case "t":
				if propTPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "t")
				}
				if err := Json2ReadUint32(in, &item.T); err != nil {
					return err
				}
				propTPresented = true
			case "tail":
				if rawTail != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "tail")
				}
				rawTail = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "top":
				if propTopPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.multi_item", "top")
				}
				if err := BuiltinVectorStatshouseTopElementBytesReadJSON(legacyTypeNames, in, &item.Top); err != nil {
					return err
				}
				propTopPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.multi_item", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propMetricPresented {
		item.Metric = 0
	}
	if !propKeysPresented {
		item.Keys = item.Keys[:0]
	}
	if !propSkeysPresented {
		item.Skeys = item.Skeys[:0]
	}
	if !propTPresented {
		item.T = 0
	}
	if !propTopPresented {
		item.Top = item.Top[:0]
	}
	if propSkeysPresented {
		item.FieldsMask |= 1 << 12
	}
	if trueTypeWeightMultiplierPresented {
		if trueTypeWeightMultiplierValue {
			item.FieldsMask |= 1 << 17
		}
	}
	if propTPresented {
		item.FieldsMask |= 1 << 10
	}
	if propTopPresented {
		item.FieldsMask |= 1 << 11
	}
	var inTailPointer *basictl.JsonLexer
	inTail := basictl.JsonLexer{Data: rawTail}
	if rawTail != nil {
		inTailPointer = &inTail
	}
	if err := item.Tail.ReadJSON(legacyTypeNames, inTailPointer, item.FieldsMask); err != nil {
		return err
	}

	// tries to set bit to zero if it is 1
	if trueTypeWeightMultiplierPresented && !trueTypeWeightMultiplierValue && (item.FieldsMask&(1<<17) != 0) {
		return ErrorInvalidJSON("statshouse.multi_item", "fieldmask bit fields_mask.0 is indefinite because of the contradictions in values")
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseMultiItemBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseMultiItemBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseMultiItemBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexMetric := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metric":`...)
	w = basictl.JSONWriteInt32(w, item.Metric)
	if (item.Metric != 0) == false {
		w = w[:backupIndexMetric]
	}
	backupIndexKeys := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"keys":`...)
	w = BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, item.Keys)
	if (len(item.Keys) != 0) == false {
		w = w[:backupIndexKeys]
	}
	if item.FieldsMask&(1<<12) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"skeys":`...)
		w = BuiltinVectorStringBytesWriteJSONOpt(newTypeNames, short, w, item.Skeys)
	}
	if item.FieldsMask&(1<<17) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"weightMultiplier":true`...)
	}
	if item.FieldsMask&(1<<10) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"t":`...)
		w = basictl.JSONWriteUint32(w, item.T)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tail":`...)
	w = item.Tail.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	if item.FieldsMask&(1<<11) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"top":`...)
		w = BuiltinVectorStatshouseTopElementBytesWriteJSONOpt(newTypeNames, short, w, item.Top)
	}
	return append(w, '}')
}

func (item *StatshouseMultiItemBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseMultiItemBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.multi_item", err.Error())
	}
	return nil
}
