// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseCommonProxyHeader struct {
	// IngressProxy (TrueType) // Conditional: nat_fields_mask.31
	// AgentEnvStaging0 (TrueType) // Conditional: nat_fields_mask.30
	// AgentEnvStaging1 (TrueType) // Conditional: nat_fields_mask.29
	ShardReplica      int32
	ShardReplicaTotal int32
	AgentIp           [4]int32
	HostName          string
	ComponentTag      int32
	BuildArch         int32
	Owner             string // Conditional: nat_fields_mask.28
}

func (StatshouseCommonProxyHeader) TLName() string { return "statshouse.commonProxyHeader" }
func (StatshouseCommonProxyHeader) TLTag() uint32  { return 0x6c803d07 }

func (item *StatshouseCommonProxyHeader) SetIngressProxy(v bool, nat_fields_mask *uint32) {
	if nat_fields_mask != nil {
		if v {
			*nat_fields_mask |= 1 << 31
		} else {
			*nat_fields_mask &^= 1 << 31
		}
	}
}
func (item StatshouseCommonProxyHeader) IsSetIngressProxy(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<31) != 0
}

func (item *StatshouseCommonProxyHeader) SetAgentEnvStaging0(v bool, nat_fields_mask *uint32) {
	if nat_fields_mask != nil {
		if v {
			*nat_fields_mask |= 1 << 30
		} else {
			*nat_fields_mask &^= 1 << 30
		}
	}
}
func (item StatshouseCommonProxyHeader) IsSetAgentEnvStaging0(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<30) != 0
}

func (item *StatshouseCommonProxyHeader) SetAgentEnvStaging1(v bool, nat_fields_mask *uint32) {
	if nat_fields_mask != nil {
		if v {
			*nat_fields_mask |= 1 << 29
		} else {
			*nat_fields_mask &^= 1 << 29
		}
	}
}
func (item StatshouseCommonProxyHeader) IsSetAgentEnvStaging1(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<29) != 0
}

func (item *StatshouseCommonProxyHeader) SetOwner(v string, nat_fields_mask *uint32) {
	item.Owner = v
	if nat_fields_mask != nil {
		*nat_fields_mask |= 1 << 28
	}
}
func (item *StatshouseCommonProxyHeader) ClearOwner(nat_fields_mask *uint32) {
	item.Owner = ""
	if nat_fields_mask != nil {
		*nat_fields_mask &^= 1 << 28
	}
}
func (item StatshouseCommonProxyHeader) IsSetOwner(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<28) != 0
}

func (item *StatshouseCommonProxyHeader) Reset() {
	item.ShardReplica = 0
	item.ShardReplicaTotal = 0
	BuiltinTuple4IntReset(&item.AgentIp)
	item.HostName = ""
	item.ComponentTag = 0
	item.BuildArch = 0
	item.Owner = ""
}

func (item *StatshouseCommonProxyHeader) Read(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.ShardReplica); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.ShardReplicaTotal); err != nil {
		return w, err
	}
	if w, err = BuiltinTuple4IntRead(w, &item.AgentIp); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.HostName); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.ComponentTag); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.BuildArch); err != nil {
		return w, err
	}
	if nat_fields_mask&(1<<28) != 0 {
		if w, err = basictl.StringRead(w, &item.Owner); err != nil {
			return w, err
		}
	} else {
		item.Owner = ""
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseCommonProxyHeader) WriteGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_fields_mask), nil
}

func (item *StatshouseCommonProxyHeader) Write(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.IntWrite(w, item.ShardReplica)
	w = basictl.IntWrite(w, item.ShardReplicaTotal)
	w = BuiltinTuple4IntWrite(w, &item.AgentIp)
	w = basictl.StringWrite(w, item.HostName)
	w = basictl.IntWrite(w, item.ComponentTag)
	w = basictl.IntWrite(w, item.BuildArch)
	if nat_fields_mask&(1<<28) != 0 {
		w = basictl.StringWrite(w, item.Owner)
	}
	return w
}

func (item *StatshouseCommonProxyHeader) ReadBoxed(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x6c803d07); err != nil {
		return w, err
	}
	return item.Read(w, nat_fields_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseCommonProxyHeader) WriteBoxedGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_fields_mask), nil
}

func (item *StatshouseCommonProxyHeader) WriteBoxed(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x6c803d07)
	return item.Write(w, nat_fields_mask)
}

func (item *StatshouseCommonProxyHeader) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_fields_mask uint32) error {
	var propShardReplicaPresented bool
	var propShardReplicaTotalPresented bool
	var propAgentIpPresented bool
	var propHostNamePresented bool
	var propComponentTagPresented bool
	var propBuildArchPresented bool
	var propOwnerPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "ingress_proxy":
				return ErrorInvalidJSON("statshouse.commonProxyHeader", "implicit true field 'ingress_proxy' cannot be defined, set fieldmask instead")
			case "agent_env_staging_0":
				return ErrorInvalidJSON("statshouse.commonProxyHeader", "implicit true field 'agent_env_staging_0' cannot be defined, set fieldmask instead")
			case "agent_env_staging_1":
				return ErrorInvalidJSON("statshouse.commonProxyHeader", "implicit true field 'agent_env_staging_1' cannot be defined, set fieldmask instead")
			case "shard_replica":
				if propShardReplicaPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "shard_replica")
				}
				if err := Json2ReadInt32(in, &item.ShardReplica); err != nil {
					return err
				}
				propShardReplicaPresented = true
			case "shard_replica_total":
				if propShardReplicaTotalPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "shard_replica_total")
				}
				if err := Json2ReadInt32(in, &item.ShardReplicaTotal); err != nil {
					return err
				}
				propShardReplicaTotalPresented = true
			case "agent_ip":
				if propAgentIpPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "agent_ip")
				}
				if err := BuiltinTuple4IntReadJSON(legacyTypeNames, in, &item.AgentIp); err != nil {
					return err
				}
				propAgentIpPresented = true
			case "host_name":
				if propHostNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "host_name")
				}
				if err := Json2ReadString(in, &item.HostName); err != nil {
					return err
				}
				propHostNamePresented = true
			case "component_tag":
				if propComponentTagPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "component_tag")
				}
				if err := Json2ReadInt32(in, &item.ComponentTag); err != nil {
					return err
				}
				propComponentTagPresented = true
			case "build_arch":
				if propBuildArchPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "build_arch")
				}
				if err := Json2ReadInt32(in, &item.BuildArch); err != nil {
					return err
				}
				propBuildArchPresented = true
			case "owner":
				if propOwnerPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "owner")
				}
				if nat_fields_mask&(1<<28) == 0 {
					return ErrorInvalidJSON("statshouse.commonProxyHeader", "field 'owner' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := Json2ReadString(in, &item.Owner); err != nil {
					return err
				}
				propOwnerPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.commonProxyHeader", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propShardReplicaPresented {
		item.ShardReplica = 0
	}
	if !propShardReplicaTotalPresented {
		item.ShardReplicaTotal = 0
	}
	if !propAgentIpPresented {
		BuiltinTuple4IntReset(&item.AgentIp)
	}
	if !propHostNamePresented {
		item.HostName = ""
	}
	if !propComponentTagPresented {
		item.ComponentTag = 0
	}
	if !propBuildArchPresented {
		item.BuildArch = 0
	}
	if !propOwnerPresented {
		item.Owner = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseCommonProxyHeader) WriteJSONGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask), nil
}

func (item *StatshouseCommonProxyHeader) WriteJSON(w []byte, nat_fields_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask)
}
func (item *StatshouseCommonProxyHeader) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_fields_mask uint32) []byte {
	w = append(w, '{')
	backupIndexShardReplica := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"shard_replica":`...)
	w = basictl.JSONWriteInt32(w, item.ShardReplica)
	if (item.ShardReplica != 0) == false {
		w = w[:backupIndexShardReplica]
	}
	backupIndexShardReplicaTotal := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"shard_replica_total":`...)
	w = basictl.JSONWriteInt32(w, item.ShardReplicaTotal)
	if (item.ShardReplicaTotal != 0) == false {
		w = w[:backupIndexShardReplicaTotal]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"agent_ip":`...)
	w = BuiltinTuple4IntWriteJSONOpt(newTypeNames, short, w, &item.AgentIp)
	backupIndexHostName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"host_name":`...)
	w = basictl.JSONWriteString(w, item.HostName)
	if (len(item.HostName) != 0) == false {
		w = w[:backupIndexHostName]
	}
	backupIndexComponentTag := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"component_tag":`...)
	w = basictl.JSONWriteInt32(w, item.ComponentTag)
	if (item.ComponentTag != 0) == false {
		w = w[:backupIndexComponentTag]
	}
	backupIndexBuildArch := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"build_arch":`...)
	w = basictl.JSONWriteInt32(w, item.BuildArch)
	if (item.BuildArch != 0) == false {
		w = w[:backupIndexBuildArch]
	}
	if nat_fields_mask&(1<<28) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"owner":`...)
		w = basictl.JSONWriteString(w, item.Owner)
	}
	return append(w, '}')
}

type StatshouseCommonProxyHeaderBytes struct {
	// IngressProxy (TrueType) // Conditional: nat_fields_mask.31
	// AgentEnvStaging0 (TrueType) // Conditional: nat_fields_mask.30
	// AgentEnvStaging1 (TrueType) // Conditional: nat_fields_mask.29
	ShardReplica      int32
	ShardReplicaTotal int32
	AgentIp           [4]int32
	HostName          []byte
	ComponentTag      int32
	BuildArch         int32
	Owner             []byte // Conditional: nat_fields_mask.28
}

func (StatshouseCommonProxyHeaderBytes) TLName() string { return "statshouse.commonProxyHeader" }
func (StatshouseCommonProxyHeaderBytes) TLTag() uint32  { return 0x6c803d07 }

func (item *StatshouseCommonProxyHeaderBytes) SetIngressProxy(v bool, nat_fields_mask *uint32) {
	if nat_fields_mask != nil {
		if v {
			*nat_fields_mask |= 1 << 31
		} else {
			*nat_fields_mask &^= 1 << 31
		}
	}
}
func (item StatshouseCommonProxyHeaderBytes) IsSetIngressProxy(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<31) != 0
}

func (item *StatshouseCommonProxyHeaderBytes) SetAgentEnvStaging0(v bool, nat_fields_mask *uint32) {
	if nat_fields_mask != nil {
		if v {
			*nat_fields_mask |= 1 << 30
		} else {
			*nat_fields_mask &^= 1 << 30
		}
	}
}
func (item StatshouseCommonProxyHeaderBytes) IsSetAgentEnvStaging0(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<30) != 0
}

func (item *StatshouseCommonProxyHeaderBytes) SetAgentEnvStaging1(v bool, nat_fields_mask *uint32) {
	if nat_fields_mask != nil {
		if v {
			*nat_fields_mask |= 1 << 29
		} else {
			*nat_fields_mask &^= 1 << 29
		}
	}
}
func (item StatshouseCommonProxyHeaderBytes) IsSetAgentEnvStaging1(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<29) != 0
}

func (item *StatshouseCommonProxyHeaderBytes) SetOwner(v []byte, nat_fields_mask *uint32) {
	item.Owner = v
	if nat_fields_mask != nil {
		*nat_fields_mask |= 1 << 28
	}
}
func (item *StatshouseCommonProxyHeaderBytes) ClearOwner(nat_fields_mask *uint32) {
	item.Owner = item.Owner[:0]
	if nat_fields_mask != nil {
		*nat_fields_mask &^= 1 << 28
	}
}
func (item StatshouseCommonProxyHeaderBytes) IsSetOwner(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<28) != 0
}

func (item *StatshouseCommonProxyHeaderBytes) Reset() {
	item.ShardReplica = 0
	item.ShardReplicaTotal = 0
	BuiltinTuple4IntReset(&item.AgentIp)
	item.HostName = item.HostName[:0]
	item.ComponentTag = 0
	item.BuildArch = 0
	item.Owner = item.Owner[:0]
}

func (item *StatshouseCommonProxyHeaderBytes) Read(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.ShardReplica); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.ShardReplicaTotal); err != nil {
		return w, err
	}
	if w, err = BuiltinTuple4IntRead(w, &item.AgentIp); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.HostName); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.ComponentTag); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.BuildArch); err != nil {
		return w, err
	}
	if nat_fields_mask&(1<<28) != 0 {
		if w, err = basictl.StringReadBytes(w, &item.Owner); err != nil {
			return w, err
		}
	} else {
		item.Owner = item.Owner[:0]
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseCommonProxyHeaderBytes) WriteGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_fields_mask), nil
}

func (item *StatshouseCommonProxyHeaderBytes) Write(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.IntWrite(w, item.ShardReplica)
	w = basictl.IntWrite(w, item.ShardReplicaTotal)
	w = BuiltinTuple4IntWrite(w, &item.AgentIp)
	w = basictl.StringWriteBytes(w, item.HostName)
	w = basictl.IntWrite(w, item.ComponentTag)
	w = basictl.IntWrite(w, item.BuildArch)
	if nat_fields_mask&(1<<28) != 0 {
		w = basictl.StringWriteBytes(w, item.Owner)
	}
	return w
}

func (item *StatshouseCommonProxyHeaderBytes) ReadBoxed(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x6c803d07); err != nil {
		return w, err
	}
	return item.Read(w, nat_fields_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseCommonProxyHeaderBytes) WriteBoxedGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_fields_mask), nil
}

func (item *StatshouseCommonProxyHeaderBytes) WriteBoxed(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x6c803d07)
	return item.Write(w, nat_fields_mask)
}

func (item *StatshouseCommonProxyHeaderBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_fields_mask uint32) error {
	var propShardReplicaPresented bool
	var propShardReplicaTotalPresented bool
	var propAgentIpPresented bool
	var propHostNamePresented bool
	var propComponentTagPresented bool
	var propBuildArchPresented bool
	var propOwnerPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "ingress_proxy":
				return ErrorInvalidJSON("statshouse.commonProxyHeader", "implicit true field 'ingress_proxy' cannot be defined, set fieldmask instead")
			case "agent_env_staging_0":
				return ErrorInvalidJSON("statshouse.commonProxyHeader", "implicit true field 'agent_env_staging_0' cannot be defined, set fieldmask instead")
			case "agent_env_staging_1":
				return ErrorInvalidJSON("statshouse.commonProxyHeader", "implicit true field 'agent_env_staging_1' cannot be defined, set fieldmask instead")
			case "shard_replica":
				if propShardReplicaPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "shard_replica")
				}
				if err := Json2ReadInt32(in, &item.ShardReplica); err != nil {
					return err
				}
				propShardReplicaPresented = true
			case "shard_replica_total":
				if propShardReplicaTotalPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "shard_replica_total")
				}
				if err := Json2ReadInt32(in, &item.ShardReplicaTotal); err != nil {
					return err
				}
				propShardReplicaTotalPresented = true
			case "agent_ip":
				if propAgentIpPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "agent_ip")
				}
				if err := BuiltinTuple4IntReadJSON(legacyTypeNames, in, &item.AgentIp); err != nil {
					return err
				}
				propAgentIpPresented = true
			case "host_name":
				if propHostNamePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "host_name")
				}
				if err := Json2ReadStringBytes(in, &item.HostName); err != nil {
					return err
				}
				propHostNamePresented = true
			case "component_tag":
				if propComponentTagPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "component_tag")
				}
				if err := Json2ReadInt32(in, &item.ComponentTag); err != nil {
					return err
				}
				propComponentTagPresented = true
			case "build_arch":
				if propBuildArchPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "build_arch")
				}
				if err := Json2ReadInt32(in, &item.BuildArch); err != nil {
					return err
				}
				propBuildArchPresented = true
			case "owner":
				if propOwnerPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.commonProxyHeader", "owner")
				}
				if nat_fields_mask&(1<<28) == 0 {
					return ErrorInvalidJSON("statshouse.commonProxyHeader", "field 'owner' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := Json2ReadStringBytes(in, &item.Owner); err != nil {
					return err
				}
				propOwnerPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.commonProxyHeader", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propShardReplicaPresented {
		item.ShardReplica = 0
	}
	if !propShardReplicaTotalPresented {
		item.ShardReplicaTotal = 0
	}
	if !propAgentIpPresented {
		BuiltinTuple4IntReset(&item.AgentIp)
	}
	if !propHostNamePresented {
		item.HostName = item.HostName[:0]
	}
	if !propComponentTagPresented {
		item.ComponentTag = 0
	}
	if !propBuildArchPresented {
		item.BuildArch = 0
	}
	if !propOwnerPresented {
		item.Owner = item.Owner[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseCommonProxyHeaderBytes) WriteJSONGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask), nil
}

func (item *StatshouseCommonProxyHeaderBytes) WriteJSON(w []byte, nat_fields_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask)
}
func (item *StatshouseCommonProxyHeaderBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_fields_mask uint32) []byte {
	w = append(w, '{')
	backupIndexShardReplica := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"shard_replica":`...)
	w = basictl.JSONWriteInt32(w, item.ShardReplica)
	if (item.ShardReplica != 0) == false {
		w = w[:backupIndexShardReplica]
	}
	backupIndexShardReplicaTotal := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"shard_replica_total":`...)
	w = basictl.JSONWriteInt32(w, item.ShardReplicaTotal)
	if (item.ShardReplicaTotal != 0) == false {
		w = w[:backupIndexShardReplicaTotal]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"agent_ip":`...)
	w = BuiltinTuple4IntWriteJSONOpt(newTypeNames, short, w, &item.AgentIp)
	backupIndexHostName := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"host_name":`...)
	w = basictl.JSONWriteStringBytes(w, item.HostName)
	if (len(item.HostName) != 0) == false {
		w = w[:backupIndexHostName]
	}
	backupIndexComponentTag := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"component_tag":`...)
	w = basictl.JSONWriteInt32(w, item.ComponentTag)
	if (item.ComponentTag != 0) == false {
		w = w[:backupIndexComponentTag]
	}
	backupIndexBuildArch := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"build_arch":`...)
	w = basictl.JSONWriteInt32(w, item.BuildArch)
	if (item.BuildArch != 0) == false {
		w = w[:backupIndexBuildArch]
	}
	if nat_fields_mask&(1<<28) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"owner":`...)
		w = basictl.JSONWriteStringBytes(w, item.Owner)
	}
	return append(w, '}')
}
