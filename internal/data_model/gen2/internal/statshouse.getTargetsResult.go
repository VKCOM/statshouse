// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseGetTargetsResult struct {
	Targets      []StatshousePromTarget
	Hash         string
	GaugeMetrics []string // Conditional: nat_fields_mask.0
}

func (StatshouseGetTargetsResult) TLName() string { return "statshouse.getTargetsResult" }
func (StatshouseGetTargetsResult) TLTag() uint32  { return 0x51ac86df }

func (item *StatshouseGetTargetsResult) SetGaugeMetrics(v []string, nat_fields_mask *uint32) {
	item.GaugeMetrics = v
	if nat_fields_mask != nil {
		*nat_fields_mask |= 1 << 0
	}
}
func (item *StatshouseGetTargetsResult) ClearGaugeMetrics(nat_fields_mask *uint32) {
	item.GaugeMetrics = item.GaugeMetrics[:0]
	if nat_fields_mask != nil {
		*nat_fields_mask &^= 1 << 0
	}
}
func (item StatshouseGetTargetsResult) IsSetGaugeMetrics(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<0) != 0
}

func (item *StatshouseGetTargetsResult) Reset() {
	item.Targets = item.Targets[:0]
	item.Hash = ""
	item.GaugeMetrics = item.GaugeMetrics[:0]
}

func (item *StatshouseGetTargetsResult) Read(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = BuiltinVectorStatshousePromTargetRead(w, &item.Targets, nat_fields_mask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Hash); err != nil {
		return w, err
	}
	if nat_fields_mask&(1<<0) != 0 {
		if w, err = BuiltinVectorStringRead(w, &item.GaugeMetrics); err != nil {
			return w, err
		}
	} else {
		item.GaugeMetrics = item.GaugeMetrics[:0]
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseGetTargetsResult) WriteGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_fields_mask), nil
}

func (item *StatshouseGetTargetsResult) Write(w []byte, nat_fields_mask uint32) []byte {
	w = BuiltinVectorStatshousePromTargetWrite(w, item.Targets, nat_fields_mask)
	w = basictl.StringWrite(w, item.Hash)
	if nat_fields_mask&(1<<0) != 0 {
		w = BuiltinVectorStringWrite(w, item.GaugeMetrics)
	}
	return w
}

func (item *StatshouseGetTargetsResult) ReadBoxed(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x51ac86df); err != nil {
		return w, err
	}
	return item.Read(w, nat_fields_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseGetTargetsResult) WriteBoxedGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_fields_mask), nil
}

func (item *StatshouseGetTargetsResult) WriteBoxed(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x51ac86df)
	return item.Write(w, nat_fields_mask)
}

func (item *StatshouseGetTargetsResult) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_fields_mask uint32) error {
	var rawTargets []byte
	var propHashPresented bool
	var propGaugeMetricsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "targets":
				if rawTargets != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargetsResult", "targets")
				}
				rawTargets = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "hash":
				if propHashPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargetsResult", "hash")
				}
				if err := Json2ReadString(in, &item.Hash); err != nil {
					return err
				}
				propHashPresented = true
			case "gauge_metrics":
				if propGaugeMetricsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargetsResult", "gauge_metrics")
				}
				if nat_fields_mask&(1<<0) == 0 {
					return ErrorInvalidJSON("statshouse.getTargetsResult", "field 'gauge_metrics' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := BuiltinVectorStringReadJSON(legacyTypeNames, in, &item.GaugeMetrics); err != nil {
					return err
				}
				propGaugeMetricsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.getTargetsResult", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propHashPresented {
		item.Hash = ""
	}
	if !propGaugeMetricsPresented {
		item.GaugeMetrics = item.GaugeMetrics[:0]
	}
	var inTargetsPointer *basictl.JsonLexer
	inTargets := basictl.JsonLexer{Data: rawTargets}
	if rawTargets != nil {
		inTargetsPointer = &inTargets
	}
	if err := BuiltinVectorStatshousePromTargetReadJSON(legacyTypeNames, inTargetsPointer, &item.Targets, nat_fields_mask); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseGetTargetsResult) WriteJSONGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask), nil
}

func (item *StatshouseGetTargetsResult) WriteJSON(w []byte, nat_fields_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask)
}
func (item *StatshouseGetTargetsResult) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_fields_mask uint32) []byte {
	w = append(w, '{')
	backupIndexTargets := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"targets":`...)
	w = BuiltinVectorStatshousePromTargetWriteJSONOpt(newTypeNames, short, w, item.Targets, nat_fields_mask)
	if (len(item.Targets) != 0) == false {
		w = w[:backupIndexTargets]
	}
	backupIndexHash := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"hash":`...)
	w = basictl.JSONWriteString(w, item.Hash)
	if (len(item.Hash) != 0) == false {
		w = w[:backupIndexHash]
	}
	if nat_fields_mask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"gauge_metrics":`...)
		w = BuiltinVectorStringWriteJSONOpt(newTypeNames, short, w, item.GaugeMetrics)
	}
	return append(w, '}')
}

type StatshouseGetTargetsResultBytes struct {
	Targets      []StatshousePromTargetBytes
	Hash         []byte
	GaugeMetrics [][]byte // Conditional: nat_fields_mask.0
}

func (StatshouseGetTargetsResultBytes) TLName() string { return "statshouse.getTargetsResult" }
func (StatshouseGetTargetsResultBytes) TLTag() uint32  { return 0x51ac86df }

func (item *StatshouseGetTargetsResultBytes) SetGaugeMetrics(v [][]byte, nat_fields_mask *uint32) {
	item.GaugeMetrics = v
	if nat_fields_mask != nil {
		*nat_fields_mask |= 1 << 0
	}
}
func (item *StatshouseGetTargetsResultBytes) ClearGaugeMetrics(nat_fields_mask *uint32) {
	item.GaugeMetrics = item.GaugeMetrics[:0]
	if nat_fields_mask != nil {
		*nat_fields_mask &^= 1 << 0
	}
}
func (item StatshouseGetTargetsResultBytes) IsSetGaugeMetrics(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<0) != 0
}

func (item *StatshouseGetTargetsResultBytes) Reset() {
	item.Targets = item.Targets[:0]
	item.Hash = item.Hash[:0]
	item.GaugeMetrics = item.GaugeMetrics[:0]
}

func (item *StatshouseGetTargetsResultBytes) Read(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = BuiltinVectorStatshousePromTargetBytesRead(w, &item.Targets, nat_fields_mask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Hash); err != nil {
		return w, err
	}
	if nat_fields_mask&(1<<0) != 0 {
		if w, err = BuiltinVectorStringBytesRead(w, &item.GaugeMetrics); err != nil {
			return w, err
		}
	} else {
		item.GaugeMetrics = item.GaugeMetrics[:0]
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseGetTargetsResultBytes) WriteGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_fields_mask), nil
}

func (item *StatshouseGetTargetsResultBytes) Write(w []byte, nat_fields_mask uint32) []byte {
	w = BuiltinVectorStatshousePromTargetBytesWrite(w, item.Targets, nat_fields_mask)
	w = basictl.StringWriteBytes(w, item.Hash)
	if nat_fields_mask&(1<<0) != 0 {
		w = BuiltinVectorStringBytesWrite(w, item.GaugeMetrics)
	}
	return w
}

func (item *StatshouseGetTargetsResultBytes) ReadBoxed(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x51ac86df); err != nil {
		return w, err
	}
	return item.Read(w, nat_fields_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseGetTargetsResultBytes) WriteBoxedGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_fields_mask), nil
}

func (item *StatshouseGetTargetsResultBytes) WriteBoxed(w []byte, nat_fields_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x51ac86df)
	return item.Write(w, nat_fields_mask)
}

func (item *StatshouseGetTargetsResultBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_fields_mask uint32) error {
	var rawTargets []byte
	var propHashPresented bool
	var propGaugeMetricsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "targets":
				if rawTargets != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargetsResult", "targets")
				}
				rawTargets = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "hash":
				if propHashPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargetsResult", "hash")
				}
				if err := Json2ReadStringBytes(in, &item.Hash); err != nil {
					return err
				}
				propHashPresented = true
			case "gauge_metrics":
				if propGaugeMetricsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTargetsResult", "gauge_metrics")
				}
				if nat_fields_mask&(1<<0) == 0 {
					return ErrorInvalidJSON("statshouse.getTargetsResult", "field 'gauge_metrics' is defined, while corresponding implicit fieldmask bit is 0")
				}
				if err := BuiltinVectorStringBytesReadJSON(legacyTypeNames, in, &item.GaugeMetrics); err != nil {
					return err
				}
				propGaugeMetricsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.getTargetsResult", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propHashPresented {
		item.Hash = item.Hash[:0]
	}
	if !propGaugeMetricsPresented {
		item.GaugeMetrics = item.GaugeMetrics[:0]
	}
	var inTargetsPointer *basictl.JsonLexer
	inTargets := basictl.JsonLexer{Data: rawTargets}
	if rawTargets != nil {
		inTargetsPointer = &inTargets
	}
	if err := BuiltinVectorStatshousePromTargetBytesReadJSON(legacyTypeNames, inTargetsPointer, &item.Targets, nat_fields_mask); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseGetTargetsResultBytes) WriteJSONGeneral(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask), nil
}

func (item *StatshouseGetTargetsResultBytes) WriteJSON(w []byte, nat_fields_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_fields_mask)
}
func (item *StatshouseGetTargetsResultBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_fields_mask uint32) []byte {
	w = append(w, '{')
	backupIndexTargets := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"targets":`...)
	w = BuiltinVectorStatshousePromTargetBytesWriteJSONOpt(newTypeNames, short, w, item.Targets, nat_fields_mask)
	if (len(item.Targets) != 0) == false {
		w = w[:backupIndexTargets]
	}
	backupIndexHash := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"hash":`...)
	w = basictl.JSONWriteStringBytes(w, item.Hash)
	if (len(item.Hash) != 0) == false {
		w = w[:backupIndexHash]
	}
	if nat_fields_mask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"gauge_metrics":`...)
		w = BuiltinVectorStringBytesWriteJSONOpt(newTypeNames, short, w, item.GaugeMetrics)
	}
	return append(w, '}')
}
