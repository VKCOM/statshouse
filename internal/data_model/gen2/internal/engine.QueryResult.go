// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

var _EngineQueryResult = [3]UnionElement{
	{TLTag: 0xac4d6fe9, TLName: "engine.queryResult", TLString: "engine.queryResult#ac4d6fe9"},
	{TLTag: 0x2b4dd0ba, TLName: "engine.queryResultError", TLString: "engine.queryResultError#2b4dd0ba"},
	{TLTag: 0xee2879b0, TLName: "engine.queryResultAio", TLString: "engine.queryResultAio#ee2879b0"},
}

type EngineQueryResult struct {
	valueQueryResult EngineQueryResult0
	valueError       EngineQueryResultError
	index            int
}

func (item EngineQueryResult) TLName() string { return _EngineQueryResult[item.index].TLName }
func (item EngineQueryResult) TLTag() uint32  { return _EngineQueryResult[item.index].TLTag }

func (item *EngineQueryResult) Reset() { item.ResetToQueryResult() }

func (item *EngineQueryResult) IsQueryResult() bool { return item.index == 0 }

func (item *EngineQueryResult) AsQueryResult() (*EngineQueryResult0, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueQueryResult, true
}
func (item *EngineQueryResult) ResetToQueryResult() *EngineQueryResult0 {
	item.index = 0
	item.valueQueryResult.Reset()
	return &item.valueQueryResult
}
func (item *EngineQueryResult) SetQueryResult(value EngineQueryResult0) {
	item.index = 0
	item.valueQueryResult = value
}

func (item *EngineQueryResult) IsError() bool { return item.index == 1 }

func (item *EngineQueryResult) AsError() (*EngineQueryResultError, bool) {
	if item.index != 1 {
		return nil, false
	}
	return &item.valueError, true
}
func (item *EngineQueryResult) ResetToError() *EngineQueryResultError {
	item.index = 1
	item.valueError.Reset()
	return &item.valueError
}
func (item *EngineQueryResult) SetError(value EngineQueryResultError) {
	item.index = 1
	item.valueError = value
}

func (item *EngineQueryResult) IsAio() bool { return item.index == 2 }

func (item *EngineQueryResult) AsAio() (EngineQueryResultAio, bool) {
	var value EngineQueryResultAio
	return value, item.index == 2
}
func (item *EngineQueryResult) ResetToAio() { item.index = 2 }
func (item *EngineQueryResult) SetAio()     { item.index = 2 }

func (item *EngineQueryResult) ReadBoxed(w []byte) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0xac4d6fe9:
		item.index = 0
		return item.valueQueryResult.Read(w)
	case 0x2b4dd0ba:
		item.index = 1
		return item.valueError.Read(w)
	case 0xee2879b0:
		item.index = 2
		return w, nil
	default:
		return w, ErrorInvalidUnionTag("engine.QueryResult", tag)
	}
}

// This method is general version of WriteBoxed, use it instead!
func (item *EngineQueryResult) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *EngineQueryResult) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, _EngineQueryResult[item.index].TLTag)
	switch item.index {
	case 0:
		w = item.valueQueryResult.Write(w)
	case 1:
		w = item.valueError.Write(w)
	case 2:
		return w
	}
	return w
}

func (item *EngineQueryResult) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	_tag, _value, err := Json2ReadUnion("engine.QueryResult", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "engine.queryResult#ac4d6fe9", "engine.queryResult", "#ac4d6fe9":
		if !legacyTypeNames && _tag == "engine.queryResult#ac4d6fe9" {
			return ErrorInvalidUnionLegacyTagJSON("engine.QueryResult", "engine.queryResult#ac4d6fe9")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueQueryResult.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "engine.queryResultError#2b4dd0ba", "engine.queryResultError", "#2b4dd0ba":
		if !legacyTypeNames && _tag == "engine.queryResultError#2b4dd0ba" {
			return ErrorInvalidUnionLegacyTagJSON("engine.QueryResult", "engine.queryResultError#2b4dd0ba")
		}
		item.index = 1
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueError.ReadJSON(legacyTypeNames, in2Pointer); err != nil {
			return err
		}
	case "engine.queryResultAio#ee2879b0", "engine.queryResultAio", "#ee2879b0":
		if !legacyTypeNames && _tag == "engine.queryResultAio#ee2879b0" {
			return ErrorInvalidUnionLegacyTagJSON("engine.QueryResult", "engine.queryResultAio#ee2879b0")
		}
		item.index = 2
	default:
		return ErrorInvalidUnionTagJSON("engine.QueryResult", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *EngineQueryResult) WriteJSONGeneral(w []byte) ([]byte, error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *EngineQueryResult) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *EngineQueryResult) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	switch item.index {
	case 0:
		if newTypeNames {
			w = append(w, `{"type":"engine.queryResult"`...)
		} else {
			w = append(w, `{"type":"engine.queryResult#ac4d6fe9"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueQueryResult.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	case 1:
		if newTypeNames {
			w = append(w, `{"type":"engine.queryResultError"`...)
		} else {
			w = append(w, `{"type":"engine.queryResultError#2b4dd0ba"`...)
		}
		w = append(w, `,"value":`...)
		w = item.valueError.WriteJSONOpt(newTypeNames, short, w)
		return append(w, '}')
	case 2:
		if newTypeNames {
			w = append(w, `{"type":"engine.queryResultAio"`...)
		} else {
			w = append(w, `{"type":"engine.queryResultAio#ee2879b0"`...)
		}
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item EngineQueryResult) String() string {
	return string(item.WriteJSON(nil))
}

func (item *EngineQueryResult) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *EngineQueryResult) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("engine.QueryResult", err.Error())
	}
	return nil
}

func (item EngineQueryResult0) AsUnion() EngineQueryResult {
	var ret EngineQueryResult
	ret.SetQueryResult(item)
	return ret
}

type EngineQueryResult0 struct {
	Size int32
}

func (EngineQueryResult0) TLName() string { return "engine.queryResult" }
func (EngineQueryResult0) TLTag() uint32  { return 0xac4d6fe9 }

func (item *EngineQueryResult0) Reset() {
	item.Size = 0
}

func (item *EngineQueryResult0) Read(w []byte) (_ []byte, err error) {
	return basictl.IntRead(w, &item.Size)
}

// This method is general version of Write, use it instead!
func (item *EngineQueryResult0) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *EngineQueryResult0) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.Size)
	return w
}

func (item *EngineQueryResult0) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xac4d6fe9); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *EngineQueryResult0) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *EngineQueryResult0) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xac4d6fe9)
	return item.Write(w)
}

func (item EngineQueryResult0) String() string {
	return string(item.WriteJSON(nil))
}

func (item *EngineQueryResult0) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propSizePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "size":
				if propSizePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.queryResult", "size")
				}
				if err := Json2ReadInt32(in, &item.Size); err != nil {
					return err
				}
				propSizePresented = true
			default:
				return ErrorInvalidJSONExcessElement("engine.queryResult", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propSizePresented {
		item.Size = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *EngineQueryResult0) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *EngineQueryResult0) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *EngineQueryResult0) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexSize := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"size":`...)
	w = basictl.JSONWriteInt32(w, item.Size)
	if (item.Size != 0) == false {
		w = w[:backupIndexSize]
	}
	return append(w, '}')
}

func (item *EngineQueryResult0) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *EngineQueryResult0) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("engine.queryResult", err.Error())
	}
	return nil
}

func (item EngineQueryResultAio) AsUnion() EngineQueryResult {
	var ret EngineQueryResult
	ret.SetAio()
	return ret
}

type EngineQueryResultAio struct {
}

func (EngineQueryResultAio) TLName() string { return "engine.queryResultAio" }
func (EngineQueryResultAio) TLTag() uint32  { return 0xee2879b0 }

func (item *EngineQueryResultAio) Reset() {}

func (item *EngineQueryResultAio) Read(w []byte) (_ []byte, err error) { return w, nil }

// This method is general version of Write, use it instead!
func (item *EngineQueryResultAio) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *EngineQueryResultAio) Write(w []byte) []byte {
	return w
}

func (item *EngineQueryResultAio) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xee2879b0); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *EngineQueryResultAio) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *EngineQueryResultAio) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0xee2879b0)
	return item.Write(w)
}

func (item EngineQueryResultAio) String() string {
	return string(item.WriteJSON(nil))
}

func (item *EngineQueryResultAio) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return ErrorInvalidJSON("engine.queryResultAio", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *EngineQueryResultAio) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *EngineQueryResultAio) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *EngineQueryResultAio) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *EngineQueryResultAio) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *EngineQueryResultAio) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("engine.queryResultAio", err.Error())
	}
	return nil
}

func (item EngineQueryResultError) AsUnion() EngineQueryResult {
	var ret EngineQueryResult
	ret.SetError(item)
	return ret
}

type EngineQueryResultError struct {
	ErrorCode   int32
	ErrorString string
}

func (EngineQueryResultError) TLName() string { return "engine.queryResultError" }
func (EngineQueryResultError) TLTag() uint32  { return 0x2b4dd0ba }

func (item *EngineQueryResultError) Reset() {
	item.ErrorCode = 0
	item.ErrorString = ""
}

func (item *EngineQueryResultError) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.IntRead(w, &item.ErrorCode); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.ErrorString)
}

// This method is general version of Write, use it instead!
func (item *EngineQueryResultError) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *EngineQueryResultError) Write(w []byte) []byte {
	w = basictl.IntWrite(w, item.ErrorCode)
	w = basictl.StringWrite(w, item.ErrorString)
	return w
}

func (item *EngineQueryResultError) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x2b4dd0ba); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *EngineQueryResultError) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *EngineQueryResultError) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x2b4dd0ba)
	return item.Write(w)
}

func (item EngineQueryResultError) String() string {
	return string(item.WriteJSON(nil))
}

func (item *EngineQueryResultError) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propErrorCodePresented bool
	var propErrorStringPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "error_code":
				if propErrorCodePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.queryResultError", "error_code")
				}
				if err := Json2ReadInt32(in, &item.ErrorCode); err != nil {
					return err
				}
				propErrorCodePresented = true
			case "error_string":
				if propErrorStringPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.queryResultError", "error_string")
				}
				if err := Json2ReadString(in, &item.ErrorString); err != nil {
					return err
				}
				propErrorStringPresented = true
			default:
				return ErrorInvalidJSONExcessElement("engine.queryResultError", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propErrorCodePresented {
		item.ErrorCode = 0
	}
	if !propErrorStringPresented {
		item.ErrorString = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *EngineQueryResultError) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *EngineQueryResultError) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *EngineQueryResultError) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexErrorCode := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"error_code":`...)
	w = basictl.JSONWriteInt32(w, item.ErrorCode)
	if (item.ErrorCode != 0) == false {
		w = w[:backupIndexErrorCode]
	}
	backupIndexErrorString := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"error_string":`...)
	w = basictl.JSONWriteString(w, item.ErrorString)
	if (len(item.ErrorString) != 0) == false {
		w = w[:backupIndexErrorString]
	}
	return append(w, '}')
}

func (item *EngineQueryResultError) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *EngineQueryResultError) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("engine.queryResultError", err.Error())
	}
	return nil
}
