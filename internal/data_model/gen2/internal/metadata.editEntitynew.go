// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataEditEntitynew struct {
	FieldsMask uint32
	Event      MetadataEvent
	// Create (TrueType) // Conditional: item.FieldsMask.0
	// Delete (TrueType) // Conditional: item.FieldsMask.1
}

func (MetadataEditEntitynew) TLName() string { return "metadata.editEntitynew" }
func (MetadataEditEntitynew) TLTag() uint32  { return 0x86df475f }

func (item *MetadataEditEntitynew) SetCreate(v bool) {
	if v {
		item.FieldsMask |= 1 << 0
	} else {
		item.FieldsMask &^= 1 << 0
	}
}
func (item MetadataEditEntitynew) IsSetCreate() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *MetadataEditEntitynew) SetDelete(v bool) {
	if v {
		item.FieldsMask |= 1 << 1
	} else {
		item.FieldsMask &^= 1 << 1
	}
}
func (item MetadataEditEntitynew) IsSetDelete() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *MetadataEditEntitynew) Reset() {
	item.FieldsMask = 0
	item.Event.Reset()
}

func (item *MetadataEditEntitynew) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Event.Read(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *MetadataEditEntitynew) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = item.Event.Write(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *MetadataEditEntitynew) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x86df475f); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MetadataEditEntitynew) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x86df475f)
	return item.Write(w)
}

func (item *MetadataEditEntitynew) ReadResult(w []byte, ret *MetadataEvent) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *MetadataEditEntitynew) WriteResult(w []byte, ret MetadataEvent) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *MetadataEditEntitynew) ReadResultJSON(j interface{}, ret *MetadataEvent) error {
	if err := MetadataEvent__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *MetadataEditEntitynew) WriteResultJSON(w []byte, ret MetadataEvent) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *MetadataEditEntitynew) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret MetadataEvent
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *MetadataEditEntitynew) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("metadata.editEntitynew", err.Error())
	}
	var ret MetadataEvent
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item MetadataEditEntitynew) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func MetadataEditEntitynew__ReadJSON(item *MetadataEditEntitynew, j interface{}) error {
	return item.readJSON(j)
}
func (item *MetadataEditEntitynew) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("metadata.editEntitynew", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jEvent := _jm["event"]
	delete(_jm, "event")
	_jCreate := _jm["create"]
	delete(_jm, "create")
	_jDelete := _jm["delete"]
	delete(_jm, "delete")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.editEntitynew", k)
	}
	if _jCreate != nil {
		_bit := false
		if err := JsonReadBool(_jCreate, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 0
		} else {
			item.FieldsMask &^= 1 << 0
		}
	}
	if _jDelete != nil {
		_bit := false
		if err := JsonReadBool(_jDelete, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldsMask |= 1 << 1
		} else {
			item.FieldsMask &^= 1 << 1
		}
	}
	if err := MetadataEvent__ReadJSON(&item.Event, _jEvent); err != nil {
		return err
	}
	return nil
}

func (item *MetadataEditEntitynew) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"event":`...)
	if w, err = item.Event.WriteJSON(w); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"create":true`...)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"delete":true`...)
	}
	return append(w, '}'), nil
}

func (item *MetadataEditEntitynew) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *MetadataEditEntitynew) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("metadata.editEntitynew", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("metadata.editEntitynew", err.Error())
	}
	return nil
}
