// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func (item StatshouseMetadataGetMappingResponse) AsUnion() StatshouseMetadataGetMappingResponseUnion {
	var ret StatshouseMetadataGetMappingResponseUnion
	ret.SetGetMappingResponse(item)
	return ret
}

// AsUnion will be here
type StatshouseMetadataGetMappingResponse struct {
	Id int32
}

func (StatshouseMetadataGetMappingResponse) TLName() string {
	return "statshouse_metadata.getMappingResponse"
}
func (StatshouseMetadataGetMappingResponse) TLTag() uint32 { return 0x9286abfc }

func (item *StatshouseMetadataGetMappingResponse) Reset() {
	item.Id = 0
}

func (item *StatshouseMetadataGetMappingResponse) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return basictl.IntRead(w, &item.Id)
}

func (item *StatshouseMetadataGetMappingResponse) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return basictl.IntWrite(w, item.Id), nil
}

func (item *StatshouseMetadataGetMappingResponse) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abfc); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *StatshouseMetadataGetMappingResponse) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286abfc)
	return item.Write(w, nat_field_mask)
}

func StatshouseMetadataGetMappingResponse__ReadJSON(item *StatshouseMetadataGetMappingResponse, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *StatshouseMetadataGetMappingResponse) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse_metadata.getMappingResponse", "expected json object")
	}
	_jId := _jm["id"]
	delete(_jm, "id")
	if err := JsonReadInt32(_jId, &item.Id); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse_metadata.getMappingResponse", k)
	}
	return nil
}

func (item *StatshouseMetadataGetMappingResponse) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if item.Id != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"id":`...)
		w = basictl.JSONWriteInt32(w, item.Id)
	}
	return append(w, '}'), nil
}

func (item StatshouseMetadataGetMappingResponseCreated) AsUnion() StatshouseMetadataGetMappingResponseUnion {
	var ret StatshouseMetadataGetMappingResponseUnion
	ret.SetCreated(item)
	return ret
}

// AsUnion will be here
type StatshouseMetadataGetMappingResponseCreated struct {
	Id int32
}

func (StatshouseMetadataGetMappingResponseCreated) TLName() string {
	return "statshouse_metadata.getMappingResponseCreated"
}
func (StatshouseMetadataGetMappingResponseCreated) TLTag() uint32 { return 0x9286abbb }

func (item *StatshouseMetadataGetMappingResponseCreated) Reset() {
	item.Id = 0
}

func (item *StatshouseMetadataGetMappingResponseCreated) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return basictl.IntRead(w, &item.Id)
}

func (item *StatshouseMetadataGetMappingResponseCreated) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return basictl.IntWrite(w, item.Id), nil
}

func (item *StatshouseMetadataGetMappingResponseCreated) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abbb); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *StatshouseMetadataGetMappingResponseCreated) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286abbb)
	return item.Write(w, nat_field_mask)
}

func StatshouseMetadataGetMappingResponseCreated__ReadJSON(item *StatshouseMetadataGetMappingResponseCreated, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *StatshouseMetadataGetMappingResponseCreated) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse_metadata.getMappingResponseCreated", "expected json object")
	}
	_jId := _jm["id"]
	delete(_jm, "id")
	if err := JsonReadInt32(_jId, &item.Id); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse_metadata.getMappingResponseCreated", k)
	}
	return nil
}

func (item *StatshouseMetadataGetMappingResponseCreated) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if item.Id != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"id":`...)
		w = basictl.JSONWriteInt32(w, item.Id)
	}
	return append(w, '}'), nil
}

func (item StatshouseMetadataGetMappingResponseFloodLimitError) AsUnion() StatshouseMetadataGetMappingResponseUnion {
	var ret StatshouseMetadataGetMappingResponseUnion
	ret.SetFloodLimitError()
	return ret
}

// AsUnion will be here
type StatshouseMetadataGetMappingResponseFloodLimitError struct {
}

func (StatshouseMetadataGetMappingResponseFloodLimitError) TLName() string {
	return "statshouse_metadata.getMappingResponseFloodLimitError"
}
func (StatshouseMetadataGetMappingResponseFloodLimitError) TLTag() uint32 { return 0x9286abfd }

func (item *StatshouseMetadataGetMappingResponseFloodLimitError) Reset() {}
func (item *StatshouseMetadataGetMappingResponseFloodLimitError) Read(w []byte, nat_field_mask uint32) ([]byte, error) {
	return w, nil
}
func (item *StatshouseMetadataGetMappingResponseFloodLimitError) Write(w []byte, nat_field_mask uint32) ([]byte, error) {
	return w, nil
}
func (item *StatshouseMetadataGetMappingResponseFloodLimitError) ReadBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	return basictl.NatReadExactTag(w, 0x9286abfd)
}
func (item *StatshouseMetadataGetMappingResponseFloodLimitError) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	return basictl.NatWrite(w, 0x9286abfd), nil
}

func StatshouseMetadataGetMappingResponseFloodLimitError__ReadJSON(item *StatshouseMetadataGetMappingResponseFloodLimitError, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *StatshouseMetadataGetMappingResponseFloodLimitError) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse_metadata.getMappingResponseFloodLimitError", "expected json object")
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse_metadata.getMappingResponseFloodLimitError", k)
	}
	return nil
}

func (item *StatshouseMetadataGetMappingResponseFloodLimitError) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	return append(w, '}'), nil
}

func (item StatshouseMetadataGetMappingResponseKeyNotExists) AsUnion() StatshouseMetadataGetMappingResponseUnion {
	var ret StatshouseMetadataGetMappingResponseUnion
	ret.SetKeyNotExists()
	return ret
}

// AsUnion will be here
type StatshouseMetadataGetMappingResponseKeyNotExists struct {
}

func (StatshouseMetadataGetMappingResponseKeyNotExists) TLName() string {
	return "statshouse_metadata.getMappingResponseKeyNotExists"
}
func (StatshouseMetadataGetMappingResponseKeyNotExists) TLTag() uint32 { return 0x9286abff }

func (item *StatshouseMetadataGetMappingResponseKeyNotExists) Reset() {}
func (item *StatshouseMetadataGetMappingResponseKeyNotExists) Read(w []byte, nat_field_mask uint32) ([]byte, error) {
	return w, nil
}
func (item *StatshouseMetadataGetMappingResponseKeyNotExists) Write(w []byte, nat_field_mask uint32) ([]byte, error) {
	return w, nil
}
func (item *StatshouseMetadataGetMappingResponseKeyNotExists) ReadBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	return basictl.NatReadExactTag(w, 0x9286abff)
}
func (item *StatshouseMetadataGetMappingResponseKeyNotExists) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	return basictl.NatWrite(w, 0x9286abff), nil
}

func StatshouseMetadataGetMappingResponseKeyNotExists__ReadJSON(item *StatshouseMetadataGetMappingResponseKeyNotExists, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *StatshouseMetadataGetMappingResponseKeyNotExists) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse_metadata.getMappingResponseKeyNotExists", "expected json object")
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse_metadata.getMappingResponseKeyNotExists", k)
	}
	return nil
}

func (item *StatshouseMetadataGetMappingResponseKeyNotExists) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	return append(w, '}'), nil
}

var _StatshouseMetadataGetMappingResponseUnion = [4]UnionElement{
	{TLTag: 0x9286abfc, TLName: "statshouse_metadata.getMappingResponse", TLString: "statshouse_metadata.getMappingResponse#9286abfc"},
	{TLTag: 0x9286abfd, TLName: "statshouse_metadata.getMappingResponseFloodLimitError", TLString: "statshouse_metadata.getMappingResponseFloodLimitError#9286abfd"},
	{TLTag: 0x9286abff, TLName: "statshouse_metadata.getMappingResponseKeyNotExists", TLString: "statshouse_metadata.getMappingResponseKeyNotExists#9286abff"},
	{TLTag: 0x9286abbb, TLName: "statshouse_metadata.getMappingResponseCreated", TLString: "statshouse_metadata.getMappingResponseCreated#9286abbb"},
}

type StatshouseMetadataGetMappingResponseUnion struct {
	valueGetMappingResponse StatshouseMetadataGetMappingResponse
	valueCreated            StatshouseMetadataGetMappingResponseCreated
	index                   int
}

func (item StatshouseMetadataGetMappingResponseUnion) TLName() string {
	return _StatshouseMetadataGetMappingResponseUnion[item.index].TLName
}
func (item StatshouseMetadataGetMappingResponseUnion) TLTag() uint32 {
	return _StatshouseMetadataGetMappingResponseUnion[item.index].TLTag
}

func (item *StatshouseMetadataGetMappingResponseUnion) Reset() { item.ResetToGetMappingResponse() }

func (item *StatshouseMetadataGetMappingResponseUnion) IsGetMappingResponse() bool {
	return item.index == 0
}

func (item *StatshouseMetadataGetMappingResponseUnion) AsGetMappingResponse() (*StatshouseMetadataGetMappingResponse, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueGetMappingResponse, true
}
func (item *StatshouseMetadataGetMappingResponseUnion) ResetToGetMappingResponse() *StatshouseMetadataGetMappingResponse {
	item.index = 0
	item.valueGetMappingResponse.Reset()
	return &item.valueGetMappingResponse
}
func (item *StatshouseMetadataGetMappingResponseUnion) SetGetMappingResponse(value StatshouseMetadataGetMappingResponse) {
	item.index = 0
	item.valueGetMappingResponse = value
}

func (item *StatshouseMetadataGetMappingResponseUnion) IsFloodLimitError() bool {
	return item.index == 1
}

func (item *StatshouseMetadataGetMappingResponseUnion) AsFloodLimitError() (StatshouseMetadataGetMappingResponseFloodLimitError, bool) {
	var value StatshouseMetadataGetMappingResponseFloodLimitError
	return value, item.index == 1
}
func (item *StatshouseMetadataGetMappingResponseUnion) ResetToFloodLimitError() { item.index = 1 }
func (item *StatshouseMetadataGetMappingResponseUnion) SetFloodLimitError()     { item.index = 1 }

func (item *StatshouseMetadataGetMappingResponseUnion) IsKeyNotExists() bool { return item.index == 2 }

func (item *StatshouseMetadataGetMappingResponseUnion) AsKeyNotExists() (StatshouseMetadataGetMappingResponseKeyNotExists, bool) {
	var value StatshouseMetadataGetMappingResponseKeyNotExists
	return value, item.index == 2
}
func (item *StatshouseMetadataGetMappingResponseUnion) ResetToKeyNotExists() { item.index = 2 }
func (item *StatshouseMetadataGetMappingResponseUnion) SetKeyNotExists()     { item.index = 2 }

func (item *StatshouseMetadataGetMappingResponseUnion) IsCreated() bool { return item.index == 3 }

func (item *StatshouseMetadataGetMappingResponseUnion) AsCreated() (*StatshouseMetadataGetMappingResponseCreated, bool) {
	if item.index != 3 {
		return nil, false
	}
	return &item.valueCreated, true
}
func (item *StatshouseMetadataGetMappingResponseUnion) ResetToCreated() *StatshouseMetadataGetMappingResponseCreated {
	item.index = 3
	item.valueCreated.Reset()
	return &item.valueCreated
}
func (item *StatshouseMetadataGetMappingResponseUnion) SetCreated(value StatshouseMetadataGetMappingResponseCreated) {
	item.index = 3
	item.valueCreated = value
}

func (item *StatshouseMetadataGetMappingResponseUnion) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x9286abfc:
		item.index = 0
		return item.valueGetMappingResponse.Read(w, nat_field_mask)
	case 0x9286abfd:
		item.index = 1
		return w, nil
	case 0x9286abff:
		item.index = 2
		return w, nil
	case 0x9286abbb:
		item.index = 3
		return item.valueCreated.Read(w, nat_field_mask)
	default:
		return w, ErrorInvalidUnionTag("statshouse_metadata.GetMappingResponse", tag)
	}
}

func (item *StatshouseMetadataGetMappingResponseUnion) WriteBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, _StatshouseMetadataGetMappingResponseUnion[item.index].TLTag)
	switch item.index {
	case 0:
		return item.valueGetMappingResponse.Write(w, nat_field_mask)
	case 1:
		return w, nil
	case 2:
		return w, nil
	case 3:
		return item.valueCreated.Write(w, nat_field_mask)
	default: // Impossible due to panic above
		return w, nil
	}
}

func StatshouseMetadataGetMappingResponseUnion__ReadJSON(item *StatshouseMetadataGetMappingResponseUnion, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *StatshouseMetadataGetMappingResponseUnion) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _tag, err := JsonReadUnionType("statshouse_metadata.GetMappingResponse", j)
	if err != nil {
		return err
	}
	jvalue := _jm["value"]
	switch _tag {
	case "statshouse_metadata.getMappingResponse#9286abfc", "statshouse_metadata.getMappingResponse", "#9286abfc":
		item.index = 0
		if err := StatshouseMetadataGetMappingResponse__ReadJSON(&item.valueGetMappingResponse, jvalue, nat_field_mask); err != nil {
			return err
		}
		delete(_jm, "value")
	case "statshouse_metadata.getMappingResponseFloodLimitError#9286abfd", "statshouse_metadata.getMappingResponseFloodLimitError", "#9286abfd":
		item.index = 1
	case "statshouse_metadata.getMappingResponseKeyNotExists#9286abff", "statshouse_metadata.getMappingResponseKeyNotExists", "#9286abff":
		item.index = 2
	case "statshouse_metadata.getMappingResponseCreated#9286abbb", "statshouse_metadata.getMappingResponseCreated", "#9286abbb":
		item.index = 3
		if err := StatshouseMetadataGetMappingResponseCreated__ReadJSON(&item.valueCreated, jvalue, nat_field_mask); err != nil {
			return err
		}
		delete(_jm, "value")
	default:
		return ErrorInvalidUnionTagJSON("statshouse_metadata.GetMappingResponse", _tag)
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse_metadata.GetMappingResponse", k)
	}
	return nil
}

func (item *StatshouseMetadataGetMappingResponseUnion) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	switch item.index {
	case 0:
		w = append(w, `{"type":"statshouse_metadata.getMappingResponse#9286abfc","value":`...)
		if w, err = item.valueGetMappingResponse.WriteJSON(w, nat_field_mask); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	case 1:
		return append(w, `{"type":"statshouse_metadata.getMappingResponseFloodLimitError#9286abfd"}`...), nil
	case 2:
		return append(w, `{"type":"statshouse_metadata.getMappingResponseKeyNotExists#9286abff"}`...), nil
	case 3:
		w = append(w, `{"type":"statshouse_metadata.getMappingResponseCreated#9286abbb","value":`...)
		if w, err = item.valueCreated.WriteJSON(w, nat_field_mask); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	default: // Impossible due to panic above
		return w, nil
	}
}
