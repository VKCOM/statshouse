// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type KvEngineHealthcheck struct {
}

func (KvEngineHealthcheck) TLName() string { return "kv_engine.healthcheck" }
func (KvEngineHealthcheck) TLTag() uint32  { return 0x2c1259aa }

func (item *KvEngineHealthcheck) Reset()                         {}
func (item *KvEngineHealthcheck) Read(w []byte) ([]byte, error)  { return w, nil }
func (item *KvEngineHealthcheck) Write(w []byte) ([]byte, error) { return w, nil }
func (item *KvEngineHealthcheck) ReadBoxed(w []byte) ([]byte, error) {
	return basictl.NatReadExactTag(w, 0x2c1259aa)
}
func (item *KvEngineHealthcheck) WriteBoxed(w []byte) ([]byte, error) {
	return basictl.NatWrite(w, 0x2c1259aa), nil
}

func (item *KvEngineHealthcheck) ReadResult(w []byte, ret *bool) (_ []byte, err error) {
	return BoolReadBoxed(w, ret)
}

func (item *KvEngineHealthcheck) WriteResult(w []byte, ret bool) (_ []byte, err error) {
	return BoolWriteBoxed(w, ret)
}

func (item *KvEngineHealthcheck) ReadResultJSON(j interface{}, ret *bool) error {
	if err := JsonReadBool(j, ret); err != nil {
		return err
	}
	return nil
}

func (item *KvEngineHealthcheck) WriteResultJSON(w []byte, ret bool) (_ []byte, err error) {
	return item.writeResultJSON(false, w, ret)
}

func (item *KvEngineHealthcheck) writeResultJSON(short bool, w []byte, ret bool) (_ []byte, err error) {
	w = basictl.JSONWriteBool(w, ret)
	return w, nil
}

func (item *KvEngineHealthcheck) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret bool
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *KvEngineHealthcheck) ReadResultWriteResultJSONShort(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret bool
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(true, w, ret)
	return r, w, err
}

func (item *KvEngineHealthcheck) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("kv_engine.healthcheck", err.Error())
	}
	var ret bool
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item KvEngineHealthcheck) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func KvEngineHealthcheck__ReadJSON(item *KvEngineHealthcheck, j interface{}) error {
	return item.readJSON(j)
}
func (item *KvEngineHealthcheck) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("kv_engine.healthcheck", "expected json object")
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("kv_engine.healthcheck", k)
	}
	return nil
}

func (item *KvEngineHealthcheck) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *KvEngineHealthcheck) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	return append(w, '}'), nil
}

func (item *KvEngineHealthcheck) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *KvEngineHealthcheck) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("kv_engine.healthcheck", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("kv_engine.healthcheck", err.Error())
	}
	return nil
}
