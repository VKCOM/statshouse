// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseGetTagMappingBootstrapResult struct {
	Mappings []StatshouseMapping
}

func (StatshouseGetTagMappingBootstrapResult) TLName() string {
	return "statshouse.getTagMappingBootstrapResult"
}
func (StatshouseGetTagMappingBootstrapResult) TLTag() uint32 { return 0x486a40de }

func (item *StatshouseGetTagMappingBootstrapResult) Reset() {
	item.Mappings = item.Mappings[:0]
}

func (item *StatshouseGetTagMappingBootstrapResult) Read(w []byte) (_ []byte, err error) {
	return BuiltinVectorStatshouseMappingRead(w, &item.Mappings)
}

func (item *StatshouseGetTagMappingBootstrapResult) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseGetTagMappingBootstrapResult) Write(w []byte) []byte {
	w = BuiltinVectorStatshouseMappingWrite(w, item.Mappings)
	return w
}

func (item *StatshouseGetTagMappingBootstrapResult) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x486a40de); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTagMappingBootstrapResult) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseGetTagMappingBootstrapResult) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x486a40de)
	return item.Write(w)
}

func (item StatshouseGetTagMappingBootstrapResult) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseGetTagMappingBootstrapResult) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *StatshouseGetTagMappingBootstrapResult) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propMappingsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "mappings":
				if propMappingsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMappingBootstrapResult", "mappings")
				}
				if err := BuiltinVectorStatshouseMappingReadJSONGeneral(tctx, in, &item.Mappings); err != nil {
					return err
				}
				propMappingsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.getTagMappingBootstrapResult", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propMappingsPresented {
		item.Mappings = item.Mappings[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseGetTagMappingBootstrapResult) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *StatshouseGetTagMappingBootstrapResult) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *StatshouseGetTagMappingBootstrapResult) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexMappings := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"mappings":`...)
	w = BuiltinVectorStatshouseMappingWriteJSONOpt(tctx, w, item.Mappings)
	if (len(item.Mappings) != 0) == false {
		w = w[:backupIndexMappings]
	}
	return append(w, '}')
}

func (item *StatshouseGetTagMappingBootstrapResult) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseGetTagMappingBootstrapResult) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMappingBootstrapResult", err.Error())
	}
	return nil
}

type StatshouseGetTagMappingBootstrapResultBytes struct {
	Mappings []StatshouseMappingBytes
}

func (StatshouseGetTagMappingBootstrapResultBytes) TLName() string {
	return "statshouse.getTagMappingBootstrapResult"
}
func (StatshouseGetTagMappingBootstrapResultBytes) TLTag() uint32 { return 0x486a40de }

func (item *StatshouseGetTagMappingBootstrapResultBytes) Reset() {
	item.Mappings = item.Mappings[:0]
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) Read(w []byte) (_ []byte, err error) {
	return BuiltinVectorStatshouseMappingBytesRead(w, &item.Mappings)
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) Write(w []byte) []byte {
	w = BuiltinVectorStatshouseMappingBytesWrite(w, item.Mappings)
	return w
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x486a40de); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x486a40de)
	return item.Write(w)
}

func (item StatshouseGetTagMappingBootstrapResultBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	tctx := basictl.JSONReadContext{LegacyTypeNames: legacyTypeNames}
	return item.ReadJSONGeneral(&tctx, in)
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer) error {
	var propMappingsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "mappings":
				if propMappingsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.getTagMappingBootstrapResult", "mappings")
				}
				if err := BuiltinVectorStatshouseMappingBytesReadJSONGeneral(tctx, in, &item.Mappings); err != nil {
					return err
				}
				propMappingsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.getTagMappingBootstrapResult", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propMappingsPresented {
		item.Mappings = item.Mappings[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseGetTagMappingBootstrapResultBytes) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w), nil
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) WriteJSON(w []byte) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w)
}
func (item *StatshouseGetTagMappingBootstrapResultBytes) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte) []byte {
	w = append(w, '{')
	backupIndexMappings := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"mappings":`...)
	w = BuiltinVectorStatshouseMappingBytesWriteJSONOpt(tctx, w, item.Mappings)
	if (len(item.Mappings) != 0) == false {
		w = w[:backupIndexMappings]
	}
	return append(w, '}')
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMappingBootstrapResult", err.Error())
	}
	return nil
}
