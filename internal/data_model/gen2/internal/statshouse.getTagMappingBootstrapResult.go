// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseGetTagMappingBootstrapResult struct {
	Mappings []StatshouseMapping
}

func (StatshouseGetTagMappingBootstrapResult) TLName() string {
	return "statshouse.getTagMappingBootstrapResult"
}
func (StatshouseGetTagMappingBootstrapResult) TLTag() uint32 { return 0x486a40de }

func (item *StatshouseGetTagMappingBootstrapResult) Reset() {
	item.Mappings = item.Mappings[:0]
}

func (item *StatshouseGetTagMappingBootstrapResult) Read(w []byte) (_ []byte, err error) {
	return VectorStatshouseMapping0Read(w, &item.Mappings)
}

func (item *StatshouseGetTagMappingBootstrapResult) Write(w []byte) (_ []byte, err error) {
	return VectorStatshouseMapping0Write(w, item.Mappings)
}

func (item *StatshouseGetTagMappingBootstrapResult) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x486a40de); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTagMappingBootstrapResult) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x486a40de)
	return item.Write(w)
}

func (item StatshouseGetTagMappingBootstrapResult) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetTagMappingBootstrapResult__ReadJSON(item *StatshouseGetTagMappingBootstrapResult, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetTagMappingBootstrapResult) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getTagMappingBootstrapResult", "expected json object")
	}
	_jMappings := _jm["mappings"]
	delete(_jm, "mappings")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getTagMappingBootstrapResult", k)
	}
	if err := VectorStatshouseMapping0ReadJSON(_jMappings, &item.Mappings); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTagMappingBootstrapResult) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.Mappings) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"mappings":`...)
		if w, err = VectorStatshouseMapping0WriteJSON(w, item.Mappings); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTagMappingBootstrapResult) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTagMappingBootstrapResult) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getTagMappingBootstrapResult", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMappingBootstrapResult", err.Error())
	}
	return nil
}

type StatshouseGetTagMappingBootstrapResultBytes struct {
	Mappings []StatshouseMappingBytes
}

func (StatshouseGetTagMappingBootstrapResultBytes) TLName() string {
	return "statshouse.getTagMappingBootstrapResult"
}
func (StatshouseGetTagMappingBootstrapResultBytes) TLTag() uint32 { return 0x486a40de }

func (item *StatshouseGetTagMappingBootstrapResultBytes) Reset() {
	item.Mappings = item.Mappings[:0]
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) Read(w []byte) (_ []byte, err error) {
	return VectorStatshouseMapping0BytesRead(w, &item.Mappings)
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) Write(w []byte) (_ []byte, err error) {
	return VectorStatshouseMapping0BytesWrite(w, item.Mappings)
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x486a40de); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x486a40de)
	return item.Write(w)
}

func (item StatshouseGetTagMappingBootstrapResultBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseGetTagMappingBootstrapResultBytes__ReadJSON(item *StatshouseGetTagMappingBootstrapResultBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseGetTagMappingBootstrapResultBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.getTagMappingBootstrapResult", "expected json object")
	}
	_jMappings := _jm["mappings"]
	delete(_jm, "mappings")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.getTagMappingBootstrapResult", k)
	}
	if err := VectorStatshouseMapping0BytesReadJSON(_jMappings, &item.Mappings); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.Mappings) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"mappings":`...)
		if w, err = VectorStatshouseMapping0BytesWriteJSON(w, item.Mappings); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseGetTagMappingBootstrapResultBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.getTagMappingBootstrapResult", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.getTagMappingBootstrapResult", err.Error())
	}
	return nil
}
