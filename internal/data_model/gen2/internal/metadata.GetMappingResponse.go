// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

var _MetadataGetMappingResponse = [4]UnionElement{
	{TLTag: 0x9286abfc, TLName: "metadata.getMappingResponse", TLString: "metadata.getMappingResponse#9286abfc"},
	{TLTag: 0x9286abfd, TLName: "metadata.getMappingResponseFloodLimitError", TLString: "metadata.getMappingResponseFloodLimitError#9286abfd"},
	{TLTag: 0x9286abff, TLName: "metadata.getMappingResponseKeyNotExists", TLString: "metadata.getMappingResponseKeyNotExists#9286abff"},
	{TLTag: 0x9286abbb, TLName: "metadata.getMappingResponseCreated", TLString: "metadata.getMappingResponseCreated#9286abbb"},
}

type MetadataGetMappingResponse struct {
	valueGetMappingResponse MetadataGetMappingResponse0
	valueCreated            MetadataGetMappingResponseCreated
	index                   int
}

func (item MetadataGetMappingResponse) TLName() string {
	return _MetadataGetMappingResponse[item.index].TLName
}
func (item MetadataGetMappingResponse) TLTag() uint32 {
	return _MetadataGetMappingResponse[item.index].TLTag
}

func (item *MetadataGetMappingResponse) Reset() { item.ResetToGetMappingResponse() }

func (item *MetadataGetMappingResponse) IsGetMappingResponse() bool { return item.index == 0 }

func (item *MetadataGetMappingResponse) AsGetMappingResponse() (*MetadataGetMappingResponse0, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueGetMappingResponse, true
}
func (item *MetadataGetMappingResponse) ResetToGetMappingResponse() *MetadataGetMappingResponse0 {
	item.index = 0
	item.valueGetMappingResponse.Reset()
	return &item.valueGetMappingResponse
}
func (item *MetadataGetMappingResponse) SetGetMappingResponse(value MetadataGetMappingResponse0) {
	item.index = 0
	item.valueGetMappingResponse = value
}

func (item *MetadataGetMappingResponse) IsFloodLimitError() bool { return item.index == 1 }

func (item *MetadataGetMappingResponse) AsFloodLimitError() (MetadataGetMappingResponseFloodLimitError, bool) {
	var value MetadataGetMappingResponseFloodLimitError
	return value, item.index == 1
}
func (item *MetadataGetMappingResponse) ResetToFloodLimitError() { item.index = 1 }
func (item *MetadataGetMappingResponse) SetFloodLimitError()     { item.index = 1 }

func (item *MetadataGetMappingResponse) IsKeyNotExists() bool { return item.index == 2 }

func (item *MetadataGetMappingResponse) AsKeyNotExists() (MetadataGetMappingResponseKeyNotExists, bool) {
	var value MetadataGetMappingResponseKeyNotExists
	return value, item.index == 2
}
func (item *MetadataGetMappingResponse) ResetToKeyNotExists() { item.index = 2 }
func (item *MetadataGetMappingResponse) SetKeyNotExists()     { item.index = 2 }

func (item *MetadataGetMappingResponse) IsCreated() bool { return item.index == 3 }

func (item *MetadataGetMappingResponse) AsCreated() (*MetadataGetMappingResponseCreated, bool) {
	if item.index != 3 {
		return nil, false
	}
	return &item.valueCreated, true
}
func (item *MetadataGetMappingResponse) ResetToCreated() *MetadataGetMappingResponseCreated {
	item.index = 3
	item.valueCreated.Reset()
	return &item.valueCreated
}
func (item *MetadataGetMappingResponse) SetCreated(value MetadataGetMappingResponseCreated) {
	item.index = 3
	item.valueCreated = value
}

func (item *MetadataGetMappingResponse) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x9286abfc:
		item.index = 0
		return item.valueGetMappingResponse.Read(w, nat_field_mask)
	case 0x9286abfd:
		item.index = 1
		return w, nil
	case 0x9286abff:
		item.index = 2
		return w, nil
	case 0x9286abbb:
		item.index = 3
		return item.valueCreated.Read(w, nat_field_mask)
	default:
		return w, ErrorInvalidUnionTag("metadata.GetMappingResponse", tag)
	}
}

func (item *MetadataGetMappingResponse) WriteBoxedGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponse) WriteBoxed(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, _MetadataGetMappingResponse[item.index].TLTag)
	switch item.index {
	case 0:
		w = item.valueGetMappingResponse.Write(w, nat_field_mask)
	case 1:
		return w
	case 2:
		return w
	case 3:
		w = item.valueCreated.Write(w, nat_field_mask)
	}
	return w
}

func (item *MetadataGetMappingResponse) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, nat_field_mask uint32) error {
	_tag, _value, err := Json2ReadUnion("metadata.GetMappingResponse", in)
	if err != nil {
		return err
	}
	switch _tag {
	case "metadata.getMappingResponse#9286abfc", "metadata.getMappingResponse", "#9286abfc":
		if tctx.IsTL2 && _tag != "metadata.getMappingResponse" {
			return ErrorInvalidUnionLegacyTagJSON("metadata.GetMappingResponse", _tag)
		}
		if !tctx.LegacyTypeNames && _tag == "metadata.getMappingResponse#9286abfc" {
			return ErrorInvalidUnionLegacyTagJSON("metadata.GetMappingResponse", "metadata.getMappingResponse#9286abfc")
		}
		item.index = 0
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueGetMappingResponse.ReadJSONGeneral(tctx, in2Pointer, nat_field_mask); err != nil {
			return err
		}
	case "metadata.getMappingResponseFloodLimitError#9286abfd", "metadata.getMappingResponseFloodLimitError", "#9286abfd":
		if tctx.IsTL2 && _tag != "metadata.getMappingResponseFloodLimitError" {
			return ErrorInvalidUnionLegacyTagJSON("metadata.GetMappingResponse", _tag)
		}
		if !tctx.LegacyTypeNames && _tag == "metadata.getMappingResponseFloodLimitError#9286abfd" {
			return ErrorInvalidUnionLegacyTagJSON("metadata.GetMappingResponse", "metadata.getMappingResponseFloodLimitError#9286abfd")
		}
		item.index = 1
	case "metadata.getMappingResponseKeyNotExists#9286abff", "metadata.getMappingResponseKeyNotExists", "#9286abff":
		if tctx.IsTL2 && _tag != "metadata.getMappingResponseKeyNotExists" {
			return ErrorInvalidUnionLegacyTagJSON("metadata.GetMappingResponse", _tag)
		}
		if !tctx.LegacyTypeNames && _tag == "metadata.getMappingResponseKeyNotExists#9286abff" {
			return ErrorInvalidUnionLegacyTagJSON("metadata.GetMappingResponse", "metadata.getMappingResponseKeyNotExists#9286abff")
		}
		item.index = 2
	case "metadata.getMappingResponseCreated#9286abbb", "metadata.getMappingResponseCreated", "#9286abbb":
		if tctx.IsTL2 && _tag != "metadata.getMappingResponseCreated" {
			return ErrorInvalidUnionLegacyTagJSON("metadata.GetMappingResponse", _tag)
		}
		if !tctx.LegacyTypeNames && _tag == "metadata.getMappingResponseCreated#9286abbb" {
			return ErrorInvalidUnionLegacyTagJSON("metadata.GetMappingResponse", "metadata.getMappingResponseCreated#9286abbb")
		}
		item.index = 3
		var in2Pointer *basictl.JsonLexer
		if _value != nil {
			in2 := basictl.JsonLexer{Data: _value}
			in2Pointer = &in2
		}
		if err := item.valueCreated.ReadJSONGeneral(tctx, in2Pointer, nat_field_mask); err != nil {
			return err
		}
	default:
		return ErrorInvalidUnionTagJSON("metadata.GetMappingResponse", _tag)
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataGetMappingResponse) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte, nat_field_mask uint32) ([]byte, error) {
	return item.WriteJSONOpt(tctx, w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponse) WriteJSON(w []byte, nat_field_mask uint32) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w, nat_field_mask)
}
func (item *MetadataGetMappingResponse) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, nat_field_mask uint32) []byte {
	switch item.index {
	case 0:
		if tctx.IsTL2 {
			w = append(w, `{"type":"metadata.getMappingResponse"`...)
		} else {
			if tctx.LegacyTypeNames {
				w = append(w, `{"type":"metadata.getMappingResponse#9286abfc"`...)
			} else {
				w = append(w, `{"type":"metadata.getMappingResponse"`...)
			}
		}
		w = append(w, `,"value":`...)
		w = item.valueGetMappingResponse.WriteJSONOpt(tctx, w, nat_field_mask)
		return append(w, '}')
	case 1:
		if tctx.IsTL2 {
			w = append(w, `{"type":"metadata.getMappingResponseFloodLimitError"`...)
		} else {
			if tctx.LegacyTypeNames {
				w = append(w, `{"type":"metadata.getMappingResponseFloodLimitError#9286abfd"`...)
			} else {
				w = append(w, `{"type":"metadata.getMappingResponseFloodLimitError"`...)
			}
		}
		return append(w, '}')
	case 2:
		if tctx.IsTL2 {
			w = append(w, `{"type":"metadata.getMappingResponseKeyNotExists"`...)
		} else {
			if tctx.LegacyTypeNames {
				w = append(w, `{"type":"metadata.getMappingResponseKeyNotExists#9286abff"`...)
			} else {
				w = append(w, `{"type":"metadata.getMappingResponseKeyNotExists"`...)
			}
		}
		return append(w, '}')
	case 3:
		if tctx.IsTL2 {
			w = append(w, `{"type":"metadata.getMappingResponseCreated"`...)
		} else {
			if tctx.LegacyTypeNames {
				w = append(w, `{"type":"metadata.getMappingResponseCreated#9286abbb"`...)
			} else {
				w = append(w, `{"type":"metadata.getMappingResponseCreated"`...)
			}
		}
		w = append(w, `,"value":`...)
		w = item.valueCreated.WriteJSONOpt(tctx, w, nat_field_mask)
		return append(w, '}')
	default: // Impossible due to panic above
		return w
	}
}

func (item MetadataGetMappingResponse0) AsUnion() MetadataGetMappingResponse {
	var ret MetadataGetMappingResponse
	ret.SetGetMappingResponse(item)
	return ret
}

type MetadataGetMappingResponse0 struct {
	Id int32
}

func (MetadataGetMappingResponse0) TLName() string { return "metadata.getMappingResponse" }
func (MetadataGetMappingResponse0) TLTag() uint32  { return 0x9286abfc }

func (item *MetadataGetMappingResponse0) Reset() {
	item.Id = 0
}

func (item *MetadataGetMappingResponse0) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return basictl.IntRead(w, &item.Id)
}

func (item *MetadataGetMappingResponse0) WriteGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponse0) Write(w []byte, nat_field_mask uint32) []byte {
	w = basictl.IntWrite(w, item.Id)
	return w
}

func (item *MetadataGetMappingResponse0) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abfc); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataGetMappingResponse0) WriteBoxedGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponse0) WriteBoxed(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x9286abfc)
	return item.Write(w, nat_field_mask)
}

func (item *MetadataGetMappingResponse0) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, nat_field_mask uint32) error {
	var propIdPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "id":
				if propIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getMappingResponse", "id")
				}
				if err := Json2ReadInt32(in, &item.Id); err != nil {
					return err
				}
				propIdPresented = true
			default:
				return ErrorInvalidJSONExcessElement("metadata.getMappingResponse", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propIdPresented {
		item.Id = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataGetMappingResponse0) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponse0) WriteJSON(w []byte, nat_field_mask uint32) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w, nat_field_mask)
}
func (item *MetadataGetMappingResponse0) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, nat_field_mask uint32) []byte {
	w = append(w, '{')
	backupIndexId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"id":`...)
	w = basictl.JSONWriteInt32(w, item.Id)
	if (item.Id != 0) == false {
		w = w[:backupIndexId]
	}
	return append(w, '}')
}

func (item MetadataGetMappingResponseCreated) AsUnion() MetadataGetMappingResponse {
	var ret MetadataGetMappingResponse
	ret.SetCreated(item)
	return ret
}

type MetadataGetMappingResponseCreated struct {
	Id int32
}

func (MetadataGetMappingResponseCreated) TLName() string { return "metadata.getMappingResponseCreated" }
func (MetadataGetMappingResponseCreated) TLTag() uint32  { return 0x9286abbb }

func (item *MetadataGetMappingResponseCreated) Reset() {
	item.Id = 0
}

func (item *MetadataGetMappingResponseCreated) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return basictl.IntRead(w, &item.Id)
}

func (item *MetadataGetMappingResponseCreated) WriteGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponseCreated) Write(w []byte, nat_field_mask uint32) []byte {
	w = basictl.IntWrite(w, item.Id)
	return w
}

func (item *MetadataGetMappingResponseCreated) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abbb); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataGetMappingResponseCreated) WriteBoxedGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponseCreated) WriteBoxed(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x9286abbb)
	return item.Write(w, nat_field_mask)
}

func (item *MetadataGetMappingResponseCreated) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, nat_field_mask uint32) error {
	var propIdPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "id":
				if propIdPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.getMappingResponseCreated", "id")
				}
				if err := Json2ReadInt32(in, &item.Id); err != nil {
					return err
				}
				propIdPresented = true
			default:
				return ErrorInvalidJSONExcessElement("metadata.getMappingResponseCreated", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propIdPresented {
		item.Id = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataGetMappingResponseCreated) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponseCreated) WriteJSON(w []byte, nat_field_mask uint32) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w, nat_field_mask)
}
func (item *MetadataGetMappingResponseCreated) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, nat_field_mask uint32) []byte {
	w = append(w, '{')
	backupIndexId := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"id":`...)
	w = basictl.JSONWriteInt32(w, item.Id)
	if (item.Id != 0) == false {
		w = w[:backupIndexId]
	}
	return append(w, '}')
}

func (item MetadataGetMappingResponseFloodLimitError) AsUnion() MetadataGetMappingResponse {
	var ret MetadataGetMappingResponse
	ret.SetFloodLimitError()
	return ret
}

type MetadataGetMappingResponseFloodLimitError struct {
}

func (MetadataGetMappingResponseFloodLimitError) TLName() string {
	return "metadata.getMappingResponseFloodLimitError"
}
func (MetadataGetMappingResponseFloodLimitError) TLTag() uint32 { return 0x9286abfd }

func (item *MetadataGetMappingResponseFloodLimitError) Reset() {}

func (item *MetadataGetMappingResponseFloodLimitError) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return w, nil
}

func (item *MetadataGetMappingResponseFloodLimitError) WriteGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponseFloodLimitError) Write(w []byte, nat_field_mask uint32) []byte {
	return w
}

func (item *MetadataGetMappingResponseFloodLimitError) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abfd); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataGetMappingResponseFloodLimitError) WriteBoxedGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponseFloodLimitError) WriteBoxed(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x9286abfd)
	return item.Write(w, nat_field_mask)
}

func (item *MetadataGetMappingResponseFloodLimitError) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, nat_field_mask uint32) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return ErrorInvalidJSON("metadata.getMappingResponseFloodLimitError", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataGetMappingResponseFloodLimitError) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponseFloodLimitError) WriteJSON(w []byte, nat_field_mask uint32) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w, nat_field_mask)
}
func (item *MetadataGetMappingResponseFloodLimitError) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, nat_field_mask uint32) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item MetadataGetMappingResponseKeyNotExists) AsUnion() MetadataGetMappingResponse {
	var ret MetadataGetMappingResponse
	ret.SetKeyNotExists()
	return ret
}

type MetadataGetMappingResponseKeyNotExists struct {
}

func (MetadataGetMappingResponseKeyNotExists) TLName() string {
	return "metadata.getMappingResponseKeyNotExists"
}
func (MetadataGetMappingResponseKeyNotExists) TLTag() uint32 { return 0x9286abff }

func (item *MetadataGetMappingResponseKeyNotExists) Reset() {}

func (item *MetadataGetMappingResponseKeyNotExists) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return w, nil
}

func (item *MetadataGetMappingResponseKeyNotExists) WriteGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponseKeyNotExists) Write(w []byte, nat_field_mask uint32) []byte {
	return w
}

func (item *MetadataGetMappingResponseKeyNotExists) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abff); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataGetMappingResponseKeyNotExists) WriteBoxedGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponseKeyNotExists) WriteBoxed(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x9286abff)
	return item.Write(w, nat_field_mask)
}

func (item *MetadataGetMappingResponseKeyNotExists) ReadJSONGeneral(tctx *basictl.JSONReadContext, in *basictl.JsonLexer, nat_field_mask uint32) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return ErrorInvalidJSON("metadata.getMappingResponseKeyNotExists", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataGetMappingResponseKeyNotExists) WriteJSONGeneral(tctx *basictl.JSONWriteContext, w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(tctx, w, nat_field_mask), nil
}

func (item *MetadataGetMappingResponseKeyNotExists) WriteJSON(w []byte, nat_field_mask uint32) []byte {
	tctx := basictl.JSONWriteContext{}
	return item.WriteJSONOpt(&tctx, w, nat_field_mask)
}
func (item *MetadataGetMappingResponseKeyNotExists) WriteJSONOpt(tctx *basictl.JSONWriteContext, w []byte, nat_field_mask uint32) []byte {
	w = append(w, '{')
	return append(w, '}')
}
