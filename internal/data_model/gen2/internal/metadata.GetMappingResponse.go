// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

var _MetadataGetMappingResponse = [4]UnionElement{
	{TLTag: 0x9286abfc, TLName: "metadata.getMappingResponse", TLString: "metadata.getMappingResponse#9286abfc"},
	{TLTag: 0x9286abfd, TLName: "metadata.getMappingResponseFloodLimitError", TLString: "metadata.getMappingResponseFloodLimitError#9286abfd"},
	{TLTag: 0x9286abff, TLName: "metadata.getMappingResponseKeyNotExists", TLString: "metadata.getMappingResponseKeyNotExists#9286abff"},
	{TLTag: 0x9286abbb, TLName: "metadata.getMappingResponseCreated", TLString: "metadata.getMappingResponseCreated#9286abbb"},
}

type MetadataGetMappingResponse struct {
	valueGetMappingResponse MetadataGetMappingResponse0
	valueCreated            MetadataGetMappingResponseCreated
	index                   int
}

func (item MetadataGetMappingResponse) TLName() string {
	return _MetadataGetMappingResponse[item.index].TLName
}
func (item MetadataGetMappingResponse) TLTag() uint32 {
	return _MetadataGetMappingResponse[item.index].TLTag
}

func (item *MetadataGetMappingResponse) Reset() { item.ResetToGetMappingResponse() }

func (item *MetadataGetMappingResponse) IsGetMappingResponse() bool { return item.index == 0 }

func (item *MetadataGetMappingResponse) AsGetMappingResponse() (*MetadataGetMappingResponse0, bool) {
	if item.index != 0 {
		return nil, false
	}
	return &item.valueGetMappingResponse, true
}
func (item *MetadataGetMappingResponse) ResetToGetMappingResponse() *MetadataGetMappingResponse0 {
	item.index = 0
	item.valueGetMappingResponse.Reset()
	return &item.valueGetMappingResponse
}
func (item *MetadataGetMappingResponse) SetGetMappingResponse(value MetadataGetMappingResponse0) {
	item.index = 0
	item.valueGetMappingResponse = value
}

func (item *MetadataGetMappingResponse) IsFloodLimitError() bool { return item.index == 1 }

func (item *MetadataGetMappingResponse) AsFloodLimitError() (MetadataGetMappingResponseFloodLimitError, bool) {
	var value MetadataGetMappingResponseFloodLimitError
	return value, item.index == 1
}
func (item *MetadataGetMappingResponse) ResetToFloodLimitError() { item.index = 1 }
func (item *MetadataGetMappingResponse) SetFloodLimitError()     { item.index = 1 }

func (item *MetadataGetMappingResponse) IsKeyNotExists() bool { return item.index == 2 }

func (item *MetadataGetMappingResponse) AsKeyNotExists() (MetadataGetMappingResponseKeyNotExists, bool) {
	var value MetadataGetMappingResponseKeyNotExists
	return value, item.index == 2
}
func (item *MetadataGetMappingResponse) ResetToKeyNotExists() { item.index = 2 }
func (item *MetadataGetMappingResponse) SetKeyNotExists()     { item.index = 2 }

func (item *MetadataGetMappingResponse) IsCreated() bool { return item.index == 3 }

func (item *MetadataGetMappingResponse) AsCreated() (*MetadataGetMappingResponseCreated, bool) {
	if item.index != 3 {
		return nil, false
	}
	return &item.valueCreated, true
}
func (item *MetadataGetMappingResponse) ResetToCreated() *MetadataGetMappingResponseCreated {
	item.index = 3
	item.valueCreated.Reset()
	return &item.valueCreated
}
func (item *MetadataGetMappingResponse) SetCreated(value MetadataGetMappingResponseCreated) {
	item.index = 3
	item.valueCreated = value
}

func (item *MetadataGetMappingResponse) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	var tag uint32
	if w, err = basictl.NatRead(w, &tag); err != nil {
		return w, err
	}
	switch tag {
	case 0x9286abfc:
		item.index = 0
		return item.valueGetMappingResponse.Read(w, nat_field_mask)
	case 0x9286abfd:
		item.index = 1
		return w, nil
	case 0x9286abff:
		item.index = 2
		return w, nil
	case 0x9286abbb:
		item.index = 3
		return item.valueCreated.Read(w, nat_field_mask)
	default:
		return w, ErrorInvalidUnionTag("metadata.GetMappingResponse", tag)
	}
}

func (item *MetadataGetMappingResponse) WriteBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = basictl.NatWrite(w, _MetadataGetMappingResponse[item.index].TLTag)
	switch item.index {
	case 0:
		return item.valueGetMappingResponse.Write(w, nat_field_mask)
	case 1:
		return w, nil
	case 2:
		return w, nil
	case 3:
		return item.valueCreated.Write(w, nat_field_mask)
	default: // Impossible due to panic above
		return w, nil
	}
}

func MetadataGetMappingResponse__ReadJSON(item *MetadataGetMappingResponse, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *MetadataGetMappingResponse) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _tag, err := JsonReadUnionType("metadata.GetMappingResponse", j)
	if err != nil {
		return err
	}
	jvalue := _jm["value"]
	switch _tag {
	case "metadata.getMappingResponse#9286abfc", "metadata.getMappingResponse", "#9286abfc":
		item.index = 0
		if err := MetadataGetMappingResponse0__ReadJSON(&item.valueGetMappingResponse, jvalue, nat_field_mask); err != nil {
			return err
		}
		delete(_jm, "value")
	case "metadata.getMappingResponseFloodLimitError#9286abfd", "metadata.getMappingResponseFloodLimitError", "#9286abfd":
		item.index = 1
	case "metadata.getMappingResponseKeyNotExists#9286abff", "metadata.getMappingResponseKeyNotExists", "#9286abff":
		item.index = 2
	case "metadata.getMappingResponseCreated#9286abbb", "metadata.getMappingResponseCreated", "#9286abbb":
		item.index = 3
		if err := MetadataGetMappingResponseCreated__ReadJSON(&item.valueCreated, jvalue, nat_field_mask); err != nil {
			return err
		}
		delete(_jm, "value")
	default:
		return ErrorInvalidUnionTagJSON("metadata.GetMappingResponse", _tag)
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.GetMappingResponse", k)
	}
	return nil
}

func (item *MetadataGetMappingResponse) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w, nat_field_mask)
}
func (item *MetadataGetMappingResponse) WriteJSONOpt(short bool, w []byte, nat_field_mask uint32) (_ []byte, err error) {
	switch item.index {
	case 0:
		w = append(w, `{"type":"metadata.getMappingResponse#9286abfc","value":`...)
		if w, err = item.valueGetMappingResponse.WriteJSONOpt(short, w, nat_field_mask); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	case 1:
		return append(w, `{"type":"metadata.getMappingResponseFloodLimitError#9286abfd"}`...), nil
	case 2:
		return append(w, `{"type":"metadata.getMappingResponseKeyNotExists#9286abff"}`...), nil
	case 3:
		w = append(w, `{"type":"metadata.getMappingResponseCreated#9286abbb","value":`...)
		if w, err = item.valueCreated.WriteJSONOpt(short, w, nat_field_mask); err != nil {
			return w, err
		}
		return append(w, '}'), nil
	default: // Impossible due to panic above
		return w, nil
	}
}

func (item MetadataGetMappingResponse0) AsUnion() MetadataGetMappingResponse {
	var ret MetadataGetMappingResponse
	ret.SetGetMappingResponse(item)
	return ret
}

type MetadataGetMappingResponse0 struct {
	Id int32
}

func (MetadataGetMappingResponse0) TLName() string { return "metadata.getMappingResponse" }
func (MetadataGetMappingResponse0) TLTag() uint32  { return 0x9286abfc }

func (item *MetadataGetMappingResponse0) Reset() {
	item.Id = 0
}

func (item *MetadataGetMappingResponse0) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return basictl.IntRead(w, &item.Id)
}

func (item *MetadataGetMappingResponse0) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return basictl.IntWrite(w, item.Id), nil
}

func (item *MetadataGetMappingResponse0) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abfc); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataGetMappingResponse0) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286abfc)
	return item.Write(w, nat_field_mask)
}

func MetadataGetMappingResponse0__ReadJSON(item *MetadataGetMappingResponse0, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *MetadataGetMappingResponse0) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("metadata.getMappingResponse", "expected json object")
	}
	_jId := _jm["id"]
	delete(_jm, "id")
	if err := JsonReadInt32(_jId, &item.Id); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.getMappingResponse", k)
	}
	return nil
}

func (item *MetadataGetMappingResponse0) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w, nat_field_mask)
}
func (item *MetadataGetMappingResponse0) WriteJSONOpt(short bool, w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if item.Id != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"id":`...)
		w = basictl.JSONWriteInt32(w, item.Id)
	}
	return append(w, '}'), nil
}

func (item MetadataGetMappingResponseCreated) AsUnion() MetadataGetMappingResponse {
	var ret MetadataGetMappingResponse
	ret.SetCreated(item)
	return ret
}

type MetadataGetMappingResponseCreated struct {
	Id int32
}

func (MetadataGetMappingResponseCreated) TLName() string { return "metadata.getMappingResponseCreated" }
func (MetadataGetMappingResponseCreated) TLTag() uint32  { return 0x9286abbb }

func (item *MetadataGetMappingResponseCreated) Reset() {
	item.Id = 0
}

func (item *MetadataGetMappingResponseCreated) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return basictl.IntRead(w, &item.Id)
}

func (item *MetadataGetMappingResponseCreated) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return basictl.IntWrite(w, item.Id), nil
}

func (item *MetadataGetMappingResponseCreated) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abbb); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataGetMappingResponseCreated) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286abbb)
	return item.Write(w, nat_field_mask)
}

func MetadataGetMappingResponseCreated__ReadJSON(item *MetadataGetMappingResponseCreated, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *MetadataGetMappingResponseCreated) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("metadata.getMappingResponseCreated", "expected json object")
	}
	_jId := _jm["id"]
	delete(_jm, "id")
	if err := JsonReadInt32(_jId, &item.Id); err != nil {
		return err
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.getMappingResponseCreated", k)
	}
	return nil
}

func (item *MetadataGetMappingResponseCreated) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w, nat_field_mask)
}
func (item *MetadataGetMappingResponseCreated) WriteJSONOpt(short bool, w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if item.Id != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"id":`...)
		w = basictl.JSONWriteInt32(w, item.Id)
	}
	return append(w, '}'), nil
}

func (item MetadataGetMappingResponseFloodLimitError) AsUnion() MetadataGetMappingResponse {
	var ret MetadataGetMappingResponse
	ret.SetFloodLimitError()
	return ret
}

type MetadataGetMappingResponseFloodLimitError struct {
}

func (MetadataGetMappingResponseFloodLimitError) TLName() string {
	return "metadata.getMappingResponseFloodLimitError"
}
func (MetadataGetMappingResponseFloodLimitError) TLTag() uint32 { return 0x9286abfd }

func (item *MetadataGetMappingResponseFloodLimitError) Reset() {}

func (item *MetadataGetMappingResponseFloodLimitError) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return w, nil
}

func (item *MetadataGetMappingResponseFloodLimitError) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return w, nil
}

func (item *MetadataGetMappingResponseFloodLimitError) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abfd); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataGetMappingResponseFloodLimitError) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286abfd)
	return item.Write(w, nat_field_mask)
}

func MetadataGetMappingResponseFloodLimitError__ReadJSON(item *MetadataGetMappingResponseFloodLimitError, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *MetadataGetMappingResponseFloodLimitError) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("metadata.getMappingResponseFloodLimitError", "expected json object")
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.getMappingResponseFloodLimitError", k)
	}
	return nil
}

func (item *MetadataGetMappingResponseFloodLimitError) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w, nat_field_mask)
}
func (item *MetadataGetMappingResponseFloodLimitError) WriteJSONOpt(short bool, w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	return append(w, '}'), nil
}

func (item MetadataGetMappingResponseKeyNotExists) AsUnion() MetadataGetMappingResponse {
	var ret MetadataGetMappingResponse
	ret.SetKeyNotExists()
	return ret
}

type MetadataGetMappingResponseKeyNotExists struct {
}

func (MetadataGetMappingResponseKeyNotExists) TLName() string {
	return "metadata.getMappingResponseKeyNotExists"
}
func (MetadataGetMappingResponseKeyNotExists) TLTag() uint32 { return 0x9286abff }

func (item *MetadataGetMappingResponseKeyNotExists) Reset() {}

func (item *MetadataGetMappingResponseKeyNotExists) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return w, nil
}

func (item *MetadataGetMappingResponseKeyNotExists) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return w, nil
}

func (item *MetadataGetMappingResponseKeyNotExists) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abff); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataGetMappingResponseKeyNotExists) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286abff)
	return item.Write(w, nat_field_mask)
}

func MetadataGetMappingResponseKeyNotExists__ReadJSON(item *MetadataGetMappingResponseKeyNotExists, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *MetadataGetMappingResponseKeyNotExists) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("metadata.getMappingResponseKeyNotExists", "expected json object")
	}
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.getMappingResponseKeyNotExists", k)
	}
	return nil
}

func (item *MetadataGetMappingResponseKeyNotExists) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w, nat_field_mask)
}
func (item *MetadataGetMappingResponseKeyNotExists) WriteJSONOpt(short bool, w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	return append(w, '}'), nil
}
