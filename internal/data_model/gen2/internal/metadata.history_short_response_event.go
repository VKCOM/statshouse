// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorMetadataHistoryShortResponseEventRead(w []byte, vec *[]MetadataHistoryShortResponseEvent, nat_t uint32) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]MetadataHistoryShortResponseEvent, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w, nat_t); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorMetadataHistoryShortResponseEventWrite(w []byte, vec []MetadataHistoryShortResponseEvent, nat_t uint32) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w, nat_t)
	}
	return w
}

func BuiltinVectorMetadataHistoryShortResponseEventReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]MetadataHistoryShortResponseEvent, nat_t uint32) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]MetadataHistoryShortResponseEvent", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue MetadataHistoryShortResponseEvent
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in, nat_t); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]MetadataHistoryShortResponseEvent", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorMetadataHistoryShortResponseEventWriteJSON(w []byte, vec []MetadataHistoryShortResponseEvent, nat_t uint32) []byte {
	return BuiltinVectorMetadataHistoryShortResponseEventWriteJSONOpt(true, false, w, vec, nat_t)
}
func BuiltinVectorMetadataHistoryShortResponseEventWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []MetadataHistoryShortResponseEvent, nat_t uint32) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w, nat_t)
	}
	return append(w, ']')
}

type MetadataHistoryShortResponseEvent struct {
	Version  int64
	Metadata string
}

func (MetadataHistoryShortResponseEvent) TLName() string {
	return "metadata.history_short_response_event"
}
func (MetadataHistoryShortResponseEvent) TLTag() uint32 { return 0x1186baaf }

func (item *MetadataHistoryShortResponseEvent) Reset() {
	item.Version = 0
	item.Metadata = ""
}

func (item *MetadataHistoryShortResponseEvent) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.Version); err != nil {
		return w, err
	}
	return basictl.StringRead(w, &item.Metadata)
}

// This method is general version of Write, use it instead!
func (item *MetadataHistoryShortResponseEvent) WriteGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.Write(w, nat_field_mask), nil
}

func (item *MetadataHistoryShortResponseEvent) Write(w []byte, nat_field_mask uint32) []byte {
	w = basictl.LongWrite(w, item.Version)
	w = basictl.StringWrite(w, item.Metadata)
	return w
}

func (item *MetadataHistoryShortResponseEvent) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1186baaf); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

// This method is general version of WriteBoxed, use it instead!
func (item *MetadataHistoryShortResponseEvent) WriteBoxedGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_field_mask), nil
}

func (item *MetadataHistoryShortResponseEvent) WriteBoxed(w []byte, nat_field_mask uint32) []byte {
	w = basictl.NatWrite(w, 0x1186baaf)
	return item.Write(w, nat_field_mask)
}

func (item *MetadataHistoryShortResponseEvent) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_field_mask uint32) error {
	var propVersionPresented bool
	var propMetadataPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "version":
				if propVersionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.history_short_response_event", "version")
				}
				if err := Json2ReadInt64(in, &item.Version); err != nil {
					return err
				}
				propVersionPresented = true
			case "metadata":
				if propMetadataPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("metadata.history_short_response_event", "metadata")
				}
				if err := Json2ReadString(in, &item.Metadata); err != nil {
					return err
				}
				propMetadataPresented = true
			default:
				return ErrorInvalidJSONExcessElement("metadata.history_short_response_event", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propVersionPresented {
		item.Version = 0
	}
	if !propMetadataPresented {
		item.Metadata = ""
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *MetadataHistoryShortResponseEvent) WriteJSONGeneral(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w, nat_field_mask), nil
}

func (item *MetadataHistoryShortResponseEvent) WriteJSON(w []byte, nat_field_mask uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_field_mask)
}
func (item *MetadataHistoryShortResponseEvent) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_field_mask uint32) []byte {
	w = append(w, '{')
	backupIndexVersion := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"version":`...)
	w = basictl.JSONWriteInt64(w, item.Version)
	if (item.Version != 0) == false {
		w = w[:backupIndexVersion]
	}
	backupIndexMetadata := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metadata":`...)
	w = basictl.JSONWriteString(w, item.Metadata)
	if (len(item.Metadata) != 0) == false {
		w = w[:backupIndexMetadata]
	}
	return append(w, '}')
}
