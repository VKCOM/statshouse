// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type KvEnginePut struct {
	Key   int64
	Value int64
}

func (KvEnginePut) TLName() string { return "kv_engine.put" }
func (KvEnginePut) TLTag() uint32  { return 0x2c7349ba }

func (item *KvEnginePut) Reset() {
	item.Key = 0
	item.Value = 0
}

func (item *KvEnginePut) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.Key); err != nil {
		return w, err
	}
	return basictl.LongRead(w, &item.Value)
}

// This method is general version of Write, use it instead!
func (item *KvEnginePut) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *KvEnginePut) Write(w []byte) []byte {
	w = basictl.LongWrite(w, item.Key)
	w = basictl.LongWrite(w, item.Value)
	return w
}

func (item *KvEnginePut) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x2c7349ba); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *KvEnginePut) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *KvEnginePut) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x2c7349ba)
	return item.Write(w)
}

func (item *KvEnginePut) ReadResult(w []byte, ret *KvEngineChangeResponse) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *KvEnginePut) WriteResult(w []byte, ret KvEngineChangeResponse) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *KvEnginePut) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *KvEngineChangeResponse) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *KvEnginePut) WriteResultJSON(w []byte, ret KvEngineChangeResponse) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *KvEnginePut) writeResultJSON(newTypeNames bool, short bool, w []byte, ret KvEngineChangeResponse) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *KvEnginePut) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret KvEngineChangeResponse
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *KvEnginePut) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret KvEngineChangeResponse
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *KvEnginePut) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret KvEngineChangeResponse
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item KvEnginePut) String() string {
	return string(item.WriteJSON(nil))
}

func (item *KvEnginePut) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propKeyPresented bool
	var propValuePresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("kv_engine.put", "key")
				}
				if err := Json2ReadInt64(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "value":
				if propValuePresented {
					return ErrorInvalidJSONWithDuplicatingKeys("kv_engine.put", "value")
				}
				if err := Json2ReadInt64(in, &item.Value); err != nil {
					return err
				}
				propValuePresented = true
			default:
				return ErrorInvalidJSONExcessElement("kv_engine.put", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propKeyPresented {
		item.Key = 0
	}
	if !propValuePresented {
		item.Value = 0
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *KvEnginePut) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *KvEnginePut) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *KvEnginePut) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteInt64(w, item.Key)
	if (item.Key != 0) == false {
		w = w[:backupIndexKey]
	}
	backupIndexValue := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"value":`...)
	w = basictl.JSONWriteInt64(w, item.Value)
	if (item.Value != 0) == false {
		w = w[:backupIndexValue]
	}
	return append(w, '}')
}

func (item *KvEnginePut) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *KvEnginePut) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("kv_engine.put", err.Error())
	}
	return nil
}
