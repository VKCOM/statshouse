// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorStatshouseApiFilterRead(w []byte, vec *[]StatshouseApiFilter) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseApiFilter, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseApiFilterWrite(w []byte, vec []StatshouseApiFilter) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorStatshouseApiFilterReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]StatshouseApiFilter) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseApiFilter", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue StatshouseApiFilter
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseApiFilter", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorStatshouseApiFilterWriteJSON(w []byte, vec []StatshouseApiFilter) []byte {
	return BuiltinVectorStatshouseApiFilterWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorStatshouseApiFilterWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []StatshouseApiFilter) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']')
}

type StatshouseApiFilter struct {
	FieldsMask uint32
	Key        string
	Values     []StatshouseApiTagValue
}

func (StatshouseApiFilter) TLName() string { return "statshouseApi.filter" }
func (StatshouseApiFilter) TLTag() uint32  { return 0x511276a6 }

func (item *StatshouseApiFilter) Reset() {
	item.FieldsMask = 0
	item.Key = ""
	item.Values = item.Values[:0]
}

func (item *StatshouseApiFilter) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Key); err != nil {
		return w, err
	}
	return BuiltinVectorStatshouseApiTagValueRead(w, &item.Values)
}

// This method is general version of Write, use it instead!
func (item *StatshouseApiFilter) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseApiFilter) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.StringWrite(w, item.Key)
	w = BuiltinVectorStatshouseApiTagValueWrite(w, item.Values)
	return w
}

func (item *StatshouseApiFilter) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x511276a6); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseApiFilter) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseApiFilter) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x511276a6)
	return item.Write(w)
}

func (item StatshouseApiFilter) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseApiFilter) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propKeyPresented bool
	var propValuesPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.filter", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "key":
				if propKeyPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.filter", "key")
				}
				if err := Json2ReadString(in, &item.Key); err != nil {
					return err
				}
				propKeyPresented = true
			case "values":
				if propValuesPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.filter", "values")
				}
				if err := BuiltinVectorStatshouseApiTagValueReadJSON(legacyTypeNames, in, &item.Values); err != nil {
					return err
				}
				propValuesPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouseApi.filter", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propKeyPresented {
		item.Key = ""
	}
	if !propValuesPresented {
		item.Values = item.Values[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseApiFilter) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseApiFilter) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseApiFilter) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexKey := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"key":`...)
	w = basictl.JSONWriteString(w, item.Key)
	if (len(item.Key) != 0) == false {
		w = w[:backupIndexKey]
	}
	backupIndexValues := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"values":`...)
	w = BuiltinVectorStatshouseApiTagValueWriteJSONOpt(newTypeNames, short, w, item.Values)
	if (len(item.Values) != 0) == false {
		w = w[:backupIndexValues]
	}
	return append(w, '}')
}

func (item *StatshouseApiFilter) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseApiFilter) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouseApi.filter", err.Error())
	}
	return nil
}
