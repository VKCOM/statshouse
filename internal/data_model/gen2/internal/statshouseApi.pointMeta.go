// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorStatshouseApiPointMetaRead(w []byte, vec *[]StatshouseApiPointMeta) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseApiPointMeta, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseApiPointMetaWrite(w []byte, vec []StatshouseApiPointMeta) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = elem.Write(w)
	}
	return w
}

func BuiltinVectorStatshouseApiPointMetaReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[]StatshouseApiPointMeta) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseApiPointMeta", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue StatshouseApiPointMeta
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := (*vec)[index].ReadJSON(legacyTypeNames, in); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[]StatshouseApiPointMeta", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorStatshouseApiPointMetaWriteJSON(w []byte, vec []StatshouseApiPointMeta) []byte {
	return BuiltinVectorStatshouseApiPointMetaWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorStatshouseApiPointMetaWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec []StatshouseApiPointMeta) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = elem.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, ']')
}

type StatshouseApiPointMeta struct {
	FieldsMask uint32
	TimeShift  int64
	From       int64
	To         int64
	Tags       map[string]string
	What       StatshouseApiFunction // Conditional: item.FieldsMask.1
}

func (StatshouseApiPointMeta) TLName() string { return "statshouseApi.pointMeta" }
func (StatshouseApiPointMeta) TLTag() uint32  { return 0x5c2bf296 }

func (item *StatshouseApiPointMeta) SetWhat(v StatshouseApiFunction) {
	item.What = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseApiPointMeta) ClearWhat() {
	item.What.Reset()
	item.FieldsMask &^= 1 << 1
}
func (item StatshouseApiPointMeta) IsSetWhat() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseApiPointMeta) Reset() {
	item.FieldsMask = 0
	item.TimeShift = 0
	item.From = 0
	item.To = 0
	BuiltinVectorDictionaryFieldStringReset(item.Tags)
	item.What.Reset()
}

func (item *StatshouseApiPointMeta) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.TimeShift); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.From); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.To); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorDictionaryFieldStringRead(w, &item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = item.What.ReadBoxed(w); err != nil {
			return w, err
		}
	} else {
		item.What.Reset()
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseApiPointMeta) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseApiPointMeta) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.LongWrite(w, item.TimeShift)
	w = basictl.LongWrite(w, item.From)
	w = basictl.LongWrite(w, item.To)
	w = BuiltinVectorDictionaryFieldStringWrite(w, item.Tags)
	if item.FieldsMask&(1<<1) != 0 {
		w = item.What.WriteBoxed(w)
	}
	return w
}

func (item *StatshouseApiPointMeta) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5c2bf296); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseApiPointMeta) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseApiPointMeta) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x5c2bf296)
	return item.Write(w)
}

func (item StatshouseApiPointMeta) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseApiPointMeta) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propTimeShiftPresented bool
	var propFromPresented bool
	var propToPresented bool
	var propTagsPresented bool
	var propWhatPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.pointMeta", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "time_shift":
				if propTimeShiftPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.pointMeta", "time_shift")
				}
				if err := Json2ReadInt64(in, &item.TimeShift); err != nil {
					return err
				}
				propTimeShiftPresented = true
			case "from":
				if propFromPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.pointMeta", "from")
				}
				if err := Json2ReadInt64(in, &item.From); err != nil {
					return err
				}
				propFromPresented = true
			case "to":
				if propToPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.pointMeta", "to")
				}
				if err := Json2ReadInt64(in, &item.To); err != nil {
					return err
				}
				propToPresented = true
			case "tags":
				if propTagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.pointMeta", "tags")
				}
				if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, &item.Tags); err != nil {
					return err
				}
				propTagsPresented = true
			case "what":
				if propWhatPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouseApi.pointMeta", "what")
				}
				if err := item.What.ReadJSON(legacyTypeNames, in); err != nil {
					return err
				}
				propWhatPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouseApi.pointMeta", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propTimeShiftPresented {
		item.TimeShift = 0
	}
	if !propFromPresented {
		item.From = 0
	}
	if !propToPresented {
		item.To = 0
	}
	if !propTagsPresented {
		BuiltinVectorDictionaryFieldStringReset(item.Tags)
	}
	if !propWhatPresented {
		item.What.Reset()
	}
	if propWhatPresented {
		item.FieldsMask |= 1 << 1
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseApiPointMeta) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseApiPointMeta) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseApiPointMeta) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	backupIndexTimeShift := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"time_shift":`...)
	w = basictl.JSONWriteInt64(w, item.TimeShift)
	if (item.TimeShift != 0) == false {
		w = w[:backupIndexTimeShift]
	}
	backupIndexFrom := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"from":`...)
	w = basictl.JSONWriteInt64(w, item.From)
	if (item.From != 0) == false {
		w = w[:backupIndexFrom]
	}
	backupIndexTo := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"to":`...)
	w = basictl.JSONWriteInt64(w, item.To)
	if (item.To != 0) == false {
		w = w[:backupIndexTo]
	}
	backupIndexTags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tags":`...)
	w = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, item.Tags)
	if (len(item.Tags) != 0) == false {
		w = w[:backupIndexTags]
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"what":`...)
		w = item.What.WriteJSONOpt(newTypeNames, short, w)
	}
	return append(w, '}')
}

func (item *StatshouseApiPointMeta) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseApiPointMeta) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouseApi.pointMeta", err.Error())
	}
	return nil
}
