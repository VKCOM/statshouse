// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorStatshouseApiPointMetaRead(w []byte, vec *[]StatshouseApiPointMeta) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([]StatshouseApiPointMeta, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = (*vec)[i].Read(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseApiPointMetaWrite(w []byte, vec []StatshouseApiPointMeta) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = elem.Write(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorStatshouseApiPointMetaReadJSON(j interface{}, vec *[]StatshouseApiPointMeta) error {
	l, _arr, err := JsonReadArray("[]StatshouseApiPointMeta", j)
	if err != nil {
		return err
	}
	if cap(*vec) < l {
		*vec = make([]StatshouseApiPointMeta, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if err := StatshouseApiPointMeta__ReadJSON(&(*vec)[i], _arr[i]); err != nil {
			return err
		}
	}
	return nil
}

func BuiltinVectorStatshouseApiPointMetaWriteJSON(w []byte, vec []StatshouseApiPointMeta) (_ []byte, err error) {
	return BuiltinVectorStatshouseApiPointMetaWriteJSONOpt(false, w, vec)
}
func BuiltinVectorStatshouseApiPointMetaWriteJSONOpt(short bool, w []byte, vec []StatshouseApiPointMeta) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = elem.WriteJSONOpt(short, w); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}

type StatshouseApiPointMeta struct {
	FieldsMask uint32
	TimeShift  int64
	From       int64
	To         int64
	Tags       map[string]string
	What       StatshouseApiFunction // Conditional: item.FieldsMask.1
}

func (StatshouseApiPointMeta) TLName() string { return "statshouseApi.pointMeta" }
func (StatshouseApiPointMeta) TLTag() uint32  { return 0x5c2bf296 }

func (item *StatshouseApiPointMeta) SetWhat(v StatshouseApiFunction) {
	item.What = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseApiPointMeta) ClearWhat() {
	item.What.Reset()
	item.FieldsMask &^= 1 << 1
}
func (item StatshouseApiPointMeta) IsSetWhat() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseApiPointMeta) Reset() {
	item.FieldsMask = 0
	item.TimeShift = 0
	item.From = 0
	item.To = 0
	BuiltinVectorDictionaryFieldStringReset(item.Tags)
	item.What.Reset()
}

func (item *StatshouseApiPointMeta) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.TimeShift); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.From); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.To); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorDictionaryFieldStringRead(w, &item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = item.What.ReadBoxed(w); err != nil {
			return w, err
		}
	} else {
		item.What.Reset()
	}
	return w, nil
}

func (item *StatshouseApiPointMeta) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = basictl.LongWrite(w, item.TimeShift)
	w = basictl.LongWrite(w, item.From)
	w = basictl.LongWrite(w, item.To)
	if w, err = BuiltinVectorDictionaryFieldStringWrite(w, item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = item.What.WriteBoxed(w); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *StatshouseApiPointMeta) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x5c2bf296); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseApiPointMeta) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x5c2bf296)
	return item.Write(w)
}

func (item StatshouseApiPointMeta) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseApiPointMeta__ReadJSON(item *StatshouseApiPointMeta, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseApiPointMeta) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouseApi.pointMeta", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jTimeShift := _jm["time_shift"]
	delete(_jm, "time_shift")
	if err := JsonReadInt64(_jTimeShift, &item.TimeShift); err != nil {
		return err
	}
	_jFrom := _jm["from"]
	delete(_jm, "from")
	if err := JsonReadInt64(_jFrom, &item.From); err != nil {
		return err
	}
	_jTo := _jm["to"]
	delete(_jm, "to")
	if err := JsonReadInt64(_jTo, &item.To); err != nil {
		return err
	}
	_jTags := _jm["tags"]
	delete(_jm, "tags")
	_jWhat := _jm["what"]
	delete(_jm, "what")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouseApi.pointMeta", k)
	}
	if _jWhat != nil {
		item.FieldsMask |= 1 << 1
	}
	if err := BuiltinVectorDictionaryFieldStringReadJSON(_jTags, &item.Tags); err != nil {
		return err
	}
	if _jWhat != nil {
		if err := StatshouseApiFunction__ReadJSON(&item.What, _jWhat); err != nil {
			return err
		}
	} else {
		item.What.Reset()
	}
	return nil
}

func (item *StatshouseApiPointMeta) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *StatshouseApiPointMeta) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.TimeShift != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"time_shift":`...)
		w = basictl.JSONWriteInt64(w, item.TimeShift)
	}
	if item.From != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"from":`...)
		w = basictl.JSONWriteInt64(w, item.From)
	}
	if item.To != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"to":`...)
		w = basictl.JSONWriteInt64(w, item.To)
	}
	if len(item.Tags) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"tags":`...)
		if w, err = BuiltinVectorDictionaryFieldStringWriteJSONOpt(short, w, item.Tags); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"what":`...)
		if w, err = item.What.WriteJSONOpt(short, w); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseApiPointMeta) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseApiPointMeta) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouseApi.pointMeta", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouseApi.pointMeta", err.Error())
	}
	return nil
}
