// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EngineReadWriteMode struct {
	ReadEnabled  bool // Conditional: nat_fields_mask.0
	WriteEnabled bool // Conditional: nat_fields_mask.1
}

func (EngineReadWriteMode) TLName() string { return "engine.mode" }
func (EngineReadWriteMode) TLTag() uint32  { return 0xb9b7b6c9 }

func (item *EngineReadWriteMode) SetReadEnabled(v bool, nat_fields_mask *uint32) {
	item.ReadEnabled = v
	if nat_fields_mask != nil {
		*nat_fields_mask |= 1 << 0
	}
}
func (item *EngineReadWriteMode) ClearReadEnabled(nat_fields_mask *uint32) {
	item.ReadEnabled = false
	if nat_fields_mask != nil {
		*nat_fields_mask &^= 1 << 0
	}
}
func (item EngineReadWriteMode) IsSetReadEnabled(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<0) != 0
}

func (item *EngineReadWriteMode) SetWriteEnabled(v bool, nat_fields_mask *uint32) {
	item.WriteEnabled = v
	if nat_fields_mask != nil {
		*nat_fields_mask |= 1 << 1
	}
}
func (item *EngineReadWriteMode) ClearWriteEnabled(nat_fields_mask *uint32) {
	item.WriteEnabled = false
	if nat_fields_mask != nil {
		*nat_fields_mask &^= 1 << 1
	}
}
func (item EngineReadWriteMode) IsSetWriteEnabled(nat_fields_mask uint32) bool {
	return nat_fields_mask&(1<<1) != 0
}

func (item *EngineReadWriteMode) Reset() {
	item.ReadEnabled = false
	item.WriteEnabled = false
}

func (item *EngineReadWriteMode) Read(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if nat_fields_mask&(1<<0) != 0 {
		if w, err = BoolReadBoxed(w, &item.ReadEnabled); err != nil {
			return w, err
		}
	} else {
		item.ReadEnabled = false
	}
	if nat_fields_mask&(1<<1) != 0 {
		if w, err = BoolReadBoxed(w, &item.WriteEnabled); err != nil {
			return w, err
		}
	} else {
		item.WriteEnabled = false
	}
	return w, nil
}

func (item *EngineReadWriteMode) Write(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if nat_fields_mask&(1<<0) != 0 {
		if w, err = BoolWriteBoxed(w, item.ReadEnabled); err != nil {
			return w, err
		}
	}
	if nat_fields_mask&(1<<1) != 0 {
		if w, err = BoolWriteBoxed(w, item.WriteEnabled); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *EngineReadWriteMode) ReadBoxed(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xb9b7b6c9); err != nil {
		return w, err
	}
	return item.Read(w, nat_fields_mask)
}

func (item *EngineReadWriteMode) WriteBoxed(w []byte, nat_fields_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0xb9b7b6c9)
	return item.Write(w, nat_fields_mask)
}

func EngineReadWriteMode__ReadJSON(item *EngineReadWriteMode, j interface{}, nat_fields_mask uint32) error {
	return item.readJSON(j, nat_fields_mask)
}
func (item *EngineReadWriteMode) readJSON(j interface{}, nat_fields_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("engine.mode", "expected json object")
	}
	_jReadEnabled := _jm["read_enabled"]
	delete(_jm, "read_enabled")
	_jWriteEnabled := _jm["write_enabled"]
	delete(_jm, "write_enabled")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("engine.mode", k)
	}
	if nat_fields_mask&(1<<0) == 0 && _jReadEnabled != nil {
		return ErrorInvalidJSON("engine.mode", "field 'read_enabled' is defined, while corresponding implicit fieldmask bit is 0")
	}
	if nat_fields_mask&(1<<1) == 0 && _jWriteEnabled != nil {
		return ErrorInvalidJSON("engine.mode", "field 'write_enabled' is defined, while corresponding implicit fieldmask bit is 0")
	}
	if nat_fields_mask&(1<<0) != 0 {
		if err := JsonReadBool(_jReadEnabled, &item.ReadEnabled); err != nil {
			return err
		}
	} else {
		item.ReadEnabled = false
	}
	if nat_fields_mask&(1<<1) != 0 {
		if err := JsonReadBool(_jWriteEnabled, &item.WriteEnabled); err != nil {
			return err
		}
	} else {
		item.WriteEnabled = false
	}
	return nil
}

func (item *EngineReadWriteMode) WriteJSON(w []byte, nat_fields_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if nat_fields_mask&(1<<0) != 0 {
		if item.ReadEnabled {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"read_enabled":`...)
			w = basictl.JSONWriteBool(w, item.ReadEnabled)
		}
	}
	if nat_fields_mask&(1<<1) != 0 {
		if item.WriteEnabled {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"write_enabled":`...)
			w = basictl.JSONWriteBool(w, item.WriteEnabled)
		}
	}
	return append(w, '}'), nil
}
