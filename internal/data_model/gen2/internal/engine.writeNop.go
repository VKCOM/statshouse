// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EngineWriteNop struct {
}

func (EngineWriteNop) TLName() string { return "engine.writeNop" }
func (EngineWriteNop) TLTag() uint32  { return 0x58160af4 }

func (item *EngineWriteNop) Reset() {}

func (item *EngineWriteNop) Read(w []byte) (_ []byte, err error) { return w, nil }

func (item *EngineWriteNop) Write(w []byte) (_ []byte, err error) { return w, nil }

func (item *EngineWriteNop) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x58160af4); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *EngineWriteNop) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x58160af4)
	return item.Write(w)
}

func (item *EngineWriteNop) ReadResult(w []byte, ret *True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *EngineWriteNop) WriteResult(w []byte, ret True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *EngineWriteNop) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *EngineWriteNop) WriteResultJSON(w []byte, ret True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *EngineWriteNop) writeResultJSON(newTypeNames bool, short bool, w []byte, ret True) (_ []byte, err error) {
	if w, err = ret.WriteJSONOpt(newTypeNames, short, w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *EngineWriteNop) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *EngineWriteNop) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *EngineWriteNop) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item EngineWriteNop) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *EngineWriteNop) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return ErrorInvalidJSON("engine.writeNop", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

func (item *EngineWriteNop) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *EngineWriteNop) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	return append(w, '}'), nil
}

func (item *EngineWriteNop) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *EngineWriteNop) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("engine.writeNop", err.Error())
	}
	return nil
}
