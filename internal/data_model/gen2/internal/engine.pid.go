// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EnginePid struct {
}

func (EnginePid) TLName() string { return "engine.pid" }
func (EnginePid) TLTag() uint32  { return 0x559d6e36 }

func (item *EnginePid) Reset() {}

func (item *EnginePid) Read(w []byte) (_ []byte, err error) { return w, nil }

// This method is general version of Write, use it instead!
func (item *EnginePid) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *EnginePid) Write(w []byte) []byte {
	return w
}

func (item *EnginePid) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x559d6e36); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *EnginePid) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *EnginePid) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x559d6e36)
	return item.Write(w)
}

func (item *EnginePid) ReadResult(w []byte, ret *NetPid) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *EnginePid) WriteResult(w []byte, ret NetPid) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *EnginePid) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *NetPid) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *EnginePid) WriteResultJSON(w []byte, ret NetPid) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *EnginePid) writeResultJSON(newTypeNames bool, short bool, w []byte, ret NetPid) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *EnginePid) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret NetPid
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *EnginePid) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret NetPid
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *EnginePid) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret NetPid
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item EnginePid) String() string {
	return string(item.WriteJSON(nil))
}

func (item *EnginePid) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			return ErrorInvalidJSON("engine.pid", "this object can't have properties")
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *EnginePid) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *EnginePid) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *EnginePid) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	return append(w, '}')
}

func (item *EnginePid) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *EnginePid) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("engine.pid", err.Error())
	}
	return nil
}
