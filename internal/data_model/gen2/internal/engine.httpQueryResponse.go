// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EngineHttpQueryResponse struct {
	FieldsMask        uint32
	ReturnCode        int32             // Conditional: item.FieldsMask.0
	Data              string            // Conditional: item.FieldsMask.1
	ContentType       string            // Conditional: item.FieldsMask.2
	AdditionalHeaders map[string]string // Conditional: item.FieldsMask.3
}

func (EngineHttpQueryResponse) TLName() string { return "engine.httpQueryResponse" }
func (EngineHttpQueryResponse) TLTag() uint32  { return 0x284852fc }

func (item *EngineHttpQueryResponse) SetReturnCode(v int32) {
	item.ReturnCode = v
	item.FieldsMask |= 1 << 0
}
func (item *EngineHttpQueryResponse) ClearReturnCode() {
	item.ReturnCode = 0
	item.FieldsMask &^= 1 << 0
}
func (item EngineHttpQueryResponse) IsSetReturnCode() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *EngineHttpQueryResponse) SetData(v string) {
	item.Data = v
	item.FieldsMask |= 1 << 1
}
func (item *EngineHttpQueryResponse) ClearData() {
	item.Data = ""
	item.FieldsMask &^= 1 << 1
}
func (item EngineHttpQueryResponse) IsSetData() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *EngineHttpQueryResponse) SetContentType(v string) {
	item.ContentType = v
	item.FieldsMask |= 1 << 2
}
func (item *EngineHttpQueryResponse) ClearContentType() {
	item.ContentType = ""
	item.FieldsMask &^= 1 << 2
}
func (item EngineHttpQueryResponse) IsSetContentType() bool { return item.FieldsMask&(1<<2) != 0 }

func (item *EngineHttpQueryResponse) SetAdditionalHeaders(v map[string]string) {
	item.AdditionalHeaders = v
	item.FieldsMask |= 1 << 3
}
func (item *EngineHttpQueryResponse) ClearAdditionalHeaders() {
	VectorDictionaryFieldString0Reset(item.AdditionalHeaders)
	item.FieldsMask &^= 1 << 3
}
func (item EngineHttpQueryResponse) IsSetAdditionalHeaders() bool { return item.FieldsMask&(1<<3) != 0 }

func (item *EngineHttpQueryResponse) Reset() {
	item.FieldsMask = 0
	item.ReturnCode = 0
	item.Data = ""
	item.ContentType = ""
	VectorDictionaryFieldString0Reset(item.AdditionalHeaders)
}

func (item *EngineHttpQueryResponse) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.ReturnCode); err != nil {
			return w, err
		}
	} else {
		item.ReturnCode = 0
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = basictl.StringRead(w, &item.Data); err != nil {
			return w, err
		}
	} else {
		item.Data = ""
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.StringRead(w, &item.ContentType); err != nil {
			return w, err
		}
	} else {
		item.ContentType = ""
	}
	if item.FieldsMask&(1<<3) != 0 {
		if w, err = VectorDictionaryFieldString0Read(w, &item.AdditionalHeaders); err != nil {
			return w, err
		}
	} else {
		VectorDictionaryFieldString0Reset(item.AdditionalHeaders)
	}
	return w, nil
}

func (item *EngineHttpQueryResponse) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.ReturnCode)
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = basictl.StringWrite(w, item.Data); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if w, err = basictl.StringWrite(w, item.ContentType); err != nil {
			return w, err
		}
	}
	if item.FieldsMask&(1<<3) != 0 {
		if w, err = VectorDictionaryFieldString0Write(w, item.AdditionalHeaders); err != nil {
			return w, err
		}
	}
	return w, nil
}

func (item *EngineHttpQueryResponse) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x284852fc); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *EngineHttpQueryResponse) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x284852fc)
	return item.Write(w)
}

func (item EngineHttpQueryResponse) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func EngineHttpQueryResponse__ReadJSON(item *EngineHttpQueryResponse, j interface{}) error {
	return item.readJSON(j)
}
func (item *EngineHttpQueryResponse) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("engine.httpQueryResponse", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jReturnCode := _jm["return_code"]
	delete(_jm, "return_code")
	_jData := _jm["data"]
	delete(_jm, "data")
	_jContentType := _jm["content_type"]
	delete(_jm, "content_type")
	_jAdditionalHeaders := _jm["additional_headers"]
	delete(_jm, "additional_headers")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("engine.httpQueryResponse", k)
	}
	if _jReturnCode != nil {
		item.FieldsMask |= 1 << 0
	}
	if _jData != nil {
		item.FieldsMask |= 1 << 1
	}
	if _jContentType != nil {
		item.FieldsMask |= 1 << 2
	}
	if _jAdditionalHeaders != nil {
		item.FieldsMask |= 1 << 3
	}
	if _jReturnCode != nil {
		if err := JsonReadInt32(_jReturnCode, &item.ReturnCode); err != nil {
			return err
		}
	} else {
		item.ReturnCode = 0
	}
	if _jData != nil {
		if err := JsonReadString(_jData, &item.Data); err != nil {
			return err
		}
	} else {
		item.Data = ""
	}
	if _jContentType != nil {
		if err := JsonReadString(_jContentType, &item.ContentType); err != nil {
			return err
		}
	} else {
		item.ContentType = ""
	}
	if _jAdditionalHeaders != nil {
		if err := VectorDictionaryFieldString0ReadJSON(_jAdditionalHeaders, &item.AdditionalHeaders); err != nil {
			return err
		}
	} else {
		VectorDictionaryFieldString0Reset(item.AdditionalHeaders)
	}
	return nil
}

func (item *EngineHttpQueryResponse) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	if item.FieldsMask&(1<<0) != 0 {
		if item.ReturnCode != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"return_code":`...)
			w = basictl.JSONWriteInt32(w, item.ReturnCode)
		}
	}
	if item.FieldsMask&(1<<1) != 0 {
		if len(item.Data) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"data":`...)
			w = basictl.JSONWriteString(w, item.Data)
		}
	}
	if item.FieldsMask&(1<<2) != 0 {
		if len(item.ContentType) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"content_type":`...)
			w = basictl.JSONWriteString(w, item.ContentType)
		}
	}
	if item.FieldsMask&(1<<3) != 0 {
		if len(item.AdditionalHeaders) != 0 {
			w = basictl.JSONAddCommaIfNeeded(w)
			w = append(w, `"additional_headers":`...)
			if w, err = VectorDictionaryFieldString0WriteJSON(w, item.AdditionalHeaders); err != nil {
				return w, err
			}
		}
	}
	return append(w, '}'), nil
}

func (item *EngineHttpQueryResponse) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *EngineHttpQueryResponse) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("engine.httpQueryResponse", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("engine.httpQueryResponse", err.Error())
	}
	return nil
}
