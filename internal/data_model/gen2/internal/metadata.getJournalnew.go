// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataGetJournalnew struct {
	FieldMask uint32
	From      int64
	Limit     int64
	// ReturnIfEmpty (TrueType) // Conditional: item.FieldMask.3
}

func (MetadataGetJournalnew) TLName() string { return "metadata.getJournalnew" }
func (MetadataGetJournalnew) TLTag() uint32  { return 0x93ba92f8 }

func (item *MetadataGetJournalnew) SetReturnIfEmpty(v bool) {
	if v {
		item.FieldMask |= 1 << 3
	} else {
		item.FieldMask &^= 1 << 3
	}
}
func (item MetadataGetJournalnew) IsSetReturnIfEmpty() bool { return item.FieldMask&(1<<3) != 0 }

func (item *MetadataGetJournalnew) Reset() {
	item.FieldMask = 0
	item.From = 0
	item.Limit = 0
}

func (item *MetadataGetJournalnew) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldMask); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.From); err != nil {
		return w, err
	}
	if w, err = basictl.LongRead(w, &item.Limit); err != nil {
		return w, err
	}
	return w, nil
}

func (item *MetadataGetJournalnew) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldMask)
	w = basictl.LongWrite(w, item.From)
	w = basictl.LongWrite(w, item.Limit)
	return w, nil
}

func (item *MetadataGetJournalnew) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x93ba92f8); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *MetadataGetJournalnew) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x93ba92f8)
	return item.Write(w)
}

func (item *MetadataGetJournalnew) ReadResult(w []byte, ret *MetadataGetJournalResponsenew) (_ []byte, err error) {
	return ret.ReadBoxed(w, item.FieldMask)
}

func (item *MetadataGetJournalnew) WriteResult(w []byte, ret MetadataGetJournalResponsenew) (_ []byte, err error) {
	return ret.WriteBoxed(w, item.FieldMask)
}

func (item *MetadataGetJournalnew) ReadResultJSON(j interface{}, ret *MetadataGetJournalResponsenew) error {
	if err := MetadataGetJournalResponsenew__ReadJSON(ret, j, item.FieldMask); err != nil {
		return err
	}
	return nil
}

func (item *MetadataGetJournalnew) WriteResultJSON(w []byte, ret MetadataGetJournalResponsenew) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w, item.FieldMask); err != nil {
		return w, err
	}
	return w, nil
}

func (item *MetadataGetJournalnew) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret MetadataGetJournalResponsenew
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *MetadataGetJournalnew) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("metadata.getJournalnew", err.Error())
	}
	var ret MetadataGetJournalResponsenew
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item MetadataGetJournalnew) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func MetadataGetJournalnew__ReadJSON(item *MetadataGetJournalnew, j interface{}) error {
	return item.readJSON(j)
}
func (item *MetadataGetJournalnew) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("metadata.getJournalnew", "expected json object")
	}
	_jFieldMask := _jm["field_mask"]
	delete(_jm, "field_mask")
	if err := JsonReadUint32(_jFieldMask, &item.FieldMask); err != nil {
		return err
	}
	_jFrom := _jm["from"]
	delete(_jm, "from")
	if err := JsonReadInt64(_jFrom, &item.From); err != nil {
		return err
	}
	_jLimit := _jm["limit"]
	delete(_jm, "limit")
	if err := JsonReadInt64(_jLimit, &item.Limit); err != nil {
		return err
	}
	_jReturnIfEmpty := _jm["return_if_empty"]
	delete(_jm, "return_if_empty")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.getJournalnew", k)
	}
	if _jReturnIfEmpty != nil {
		_bit := false
		if err := JsonReadBool(_jReturnIfEmpty, &_bit); err != nil {
			return err
		}
		if _bit {
			item.FieldMask |= 1 << 3
		} else {
			item.FieldMask &^= 1 << 3
		}
	}
	return nil
}

func (item *MetadataGetJournalnew) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"field_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldMask)
	}
	if item.From != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"from":`...)
		w = basictl.JSONWriteInt64(w, item.From)
	}
	if item.Limit != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"limit":`...)
		w = basictl.JSONWriteInt64(w, item.Limit)
	}
	if item.FieldMask&(1<<3) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"return_if_empty":true`...)
	}
	return append(w, '}'), nil
}

func (item *MetadataGetJournalnew) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *MetadataGetJournalnew) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("metadata.getJournalnew", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("metadata.getJournalnew", err.Error())
	}
	return nil
}
