// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type MetadataGetMetricsResponse struct {
	CurrentVersion int64
	Metrics        []MetadataMetricOld
}

func (MetadataGetMetricsResponse) TLName() string { return "metadata.getMetricsResponse" }
func (MetadataGetMetricsResponse) TLTag() uint32  { return 0x9286abfb }

func (item *MetadataGetMetricsResponse) Reset() {
	item.CurrentVersion = 0
	item.Metrics = item.Metrics[:0]
}

func (item *MetadataGetMetricsResponse) Read(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.LongRead(w, &item.CurrentVersion); err != nil {
		return w, err
	}
	return VectorMetadataMetricOld0Read(w, &item.Metrics, nat_field_mask)
}

func (item *MetadataGetMetricsResponse) Write(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = basictl.LongWrite(w, item.CurrentVersion)
	return VectorMetadataMetricOld0Write(w, item.Metrics, nat_field_mask)
}

func (item *MetadataGetMetricsResponse) ReadBoxed(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x9286abfb); err != nil {
		return w, err
	}
	return item.Read(w, nat_field_mask)
}

func (item *MetadataGetMetricsResponse) WriteBoxed(w []byte, nat_field_mask uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x9286abfb)
	return item.Write(w, nat_field_mask)
}

func MetadataGetMetricsResponse__ReadJSON(item *MetadataGetMetricsResponse, j interface{}, nat_field_mask uint32) error {
	return item.readJSON(j, nat_field_mask)
}
func (item *MetadataGetMetricsResponse) readJSON(j interface{}, nat_field_mask uint32) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("metadata.getMetricsResponse", "expected json object")
	}
	_jCurrentVersion := _jm["current_version"]
	delete(_jm, "current_version")
	if err := JsonReadInt64(_jCurrentVersion, &item.CurrentVersion); err != nil {
		return err
	}
	_jMetrics := _jm["metrics"]
	delete(_jm, "metrics")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("metadata.getMetricsResponse", k)
	}
	if err := VectorMetadataMetricOld0ReadJSON(_jMetrics, &item.Metrics, nat_field_mask); err != nil {
		return err
	}
	return nil
}

func (item *MetadataGetMetricsResponse) WriteJSON(w []byte, nat_field_mask uint32) (_ []byte, err error) {
	w = append(w, '{')
	if item.CurrentVersion != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"current_version":`...)
		w = basictl.JSONWriteInt64(w, item.CurrentVersion)
	}
	if len(item.Metrics) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metrics":`...)
		if w, err = VectorMetadataMetricOld0WriteJSON(w, item.Metrics, nat_field_mask); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}
