// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type KvEngineCheck struct {
	Kv []KvEngineKv
}

func (KvEngineCheck) TLName() string { return "kv_engine.check" }
func (KvEngineCheck) TLTag() uint32  { return 0x2c3239ba }

func (item *KvEngineCheck) Reset() {
	item.Kv = item.Kv[:0]
}

func (item *KvEngineCheck) Read(w []byte) (_ []byte, err error) {
	return BuiltinVectorKvEngineKvBoxedRead(w, &item.Kv)
}

func (item *KvEngineCheck) Write(w []byte) (_ []byte, err error) {
	return BuiltinVectorKvEngineKvBoxedWrite(w, item.Kv)
}

func (item *KvEngineCheck) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x2c3239ba); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *KvEngineCheck) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x2c3239ba)
	return item.Write(w)
}

func (item *KvEngineCheck) ReadResult(w []byte, ret *bool) (_ []byte, err error) {
	return BoolReadBoxed(w, ret)
}

func (item *KvEngineCheck) WriteResult(w []byte, ret bool) (_ []byte, err error) {
	return BoolWriteBoxed(w, ret)
}

func (item *KvEngineCheck) ReadResultJSON(j interface{}, ret *bool) error {
	if err := JsonReadBool(j, ret); err != nil {
		return err
	}
	return nil
}

func (item *KvEngineCheck) WriteResultJSON(w []byte, ret bool) (_ []byte, err error) {
	return item.writeResultJSON(false, w, ret)
}

func (item *KvEngineCheck) writeResultJSON(short bool, w []byte, ret bool) (_ []byte, err error) {
	w = basictl.JSONWriteBool(w, ret)
	return w, nil
}

func (item *KvEngineCheck) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret bool
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *KvEngineCheck) ReadResultWriteResultJSONShort(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret bool
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(true, w, ret)
	return r, w, err
}

func (item *KvEngineCheck) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("kv_engine.check", err.Error())
	}
	var ret bool
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item KvEngineCheck) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func KvEngineCheck__ReadJSON(item *KvEngineCheck, j interface{}) error { return item.readJSON(j) }
func (item *KvEngineCheck) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("kv_engine.check", "expected json object")
	}
	_jKv := _jm["kv"]
	delete(_jm, "kv")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("kv_engine.check", k)
	}
	if err := BuiltinVectorKvEngineKvBoxedReadJSON(_jKv, &item.Kv); err != nil {
		return err
	}
	return nil
}

func (item *KvEngineCheck) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(false, w)
}
func (item *KvEngineCheck) WriteJSONOpt(short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if len(item.Kv) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"kv":`...)
		if w, err = BuiltinVectorKvEngineKvBoxedWriteJSONOpt(short, w, item.Kv); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *KvEngineCheck) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *KvEngineCheck) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("kv_engine.check", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("kv_engine.check", err.Error())
	}
	return nil
}
