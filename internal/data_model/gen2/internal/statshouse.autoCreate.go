// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseAutoCreate struct {
	FieldsMask uint32
	Header     StatshouseCommonProxyHeader
	Metric     string
	Kind       string
	Tags       []string
}

func (StatshouseAutoCreate) TLName() string { return "statshouse.autoCreate" }
func (StatshouseAutoCreate) TLTag() uint32  { return 0x28bea524 }

func (item *StatshouseAutoCreate) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.Metric = ""
	item.Kind = ""
	item.Tags = item.Tags[:0]
}

func (item *StatshouseAutoCreate) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Kind); err != nil {
		return w, err
	}
	return VectorString0Read(w, &item.Tags)
}

func (item *StatshouseAutoCreate) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = item.Header.Write(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringWrite(w, item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringWrite(w, item.Kind); err != nil {
		return w, err
	}
	return VectorString0Write(w, item.Tags)
}

func (item *StatshouseAutoCreate) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x28bea524); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseAutoCreate) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x28bea524)
	return item.Write(w)
}

func (item *StatshouseAutoCreate) ReadResult(w []byte, ret *True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseAutoCreate) WriteResult(w []byte, ret True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *StatshouseAutoCreate) ReadResultJSON(j interface{}, ret *True) error {
	if err := True__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseAutoCreate) WriteResultJSON(w []byte, ret True) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseAutoCreate) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseAutoCreate) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.autoCreate", err.Error())
	}
	var ret True
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseAutoCreate) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseAutoCreate__ReadJSON(item *StatshouseAutoCreate, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseAutoCreate) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.autoCreate", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jHeader := _jm["header"]
	delete(_jm, "header")
	_jMetric := _jm["metric"]
	delete(_jm, "metric")
	if err := JsonReadString(_jMetric, &item.Metric); err != nil {
		return err
	}
	_jKind := _jm["kind"]
	delete(_jm, "kind")
	if err := JsonReadString(_jKind, &item.Kind); err != nil {
		return err
	}
	_jTags := _jm["tags"]
	delete(_jm, "tags")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.autoCreate", k)
	}
	if err := StatshouseCommonProxyHeader__ReadJSON(&item.Header, _jHeader, item.FieldsMask); err != nil {
		return err
	}
	if err := VectorString0ReadJSON(_jTags, &item.Tags); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseAutoCreate) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	if w, err = item.Header.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	if len(item.Metric) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric":`...)
		w = basictl.JSONWriteString(w, item.Metric)
	}
	if len(item.Kind) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"kind":`...)
		w = basictl.JSONWriteString(w, item.Kind)
	}
	if len(item.Tags) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"tags":`...)
		if w, err = VectorString0WriteJSON(w, item.Tags); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseAutoCreate) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseAutoCreate) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.autoCreate", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.autoCreate", err.Error())
	}
	return nil
}

type StatshouseAutoCreateBytes struct {
	FieldsMask uint32
	Header     StatshouseCommonProxyHeaderBytes
	Metric     []byte
	Kind       []byte
	Tags       [][]byte
}

func (StatshouseAutoCreateBytes) TLName() string { return "statshouse.autoCreate" }
func (StatshouseAutoCreateBytes) TLTag() uint32  { return 0x28bea524 }

func (item *StatshouseAutoCreateBytes) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.Metric = item.Metric[:0]
	item.Kind = item.Kind[:0]
	item.Tags = item.Tags[:0]
}

func (item *StatshouseAutoCreateBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Kind); err != nil {
		return w, err
	}
	return VectorString0BytesRead(w, &item.Tags)
}

func (item *StatshouseAutoCreateBytes) Write(w []byte) (_ []byte, err error) {
	w = basictl.NatWrite(w, item.FieldsMask)
	if w, err = item.Header.Write(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringWriteBytes(w, item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringWriteBytes(w, item.Kind); err != nil {
		return w, err
	}
	return VectorString0BytesWrite(w, item.Tags)
}

func (item *StatshouseAutoCreateBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x28bea524); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *StatshouseAutoCreateBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x28bea524)
	return item.Write(w)
}

func (item *StatshouseAutoCreateBytes) ReadResult(w []byte, ret *True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseAutoCreateBytes) WriteResult(w []byte, ret True) (_ []byte, err error) {
	return ret.WriteBoxed(w)
}

func (item *StatshouseAutoCreateBytes) ReadResultJSON(j interface{}, ret *True) error {
	if err := True__ReadJSON(ret, j); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseAutoCreateBytes) WriteResultJSON(w []byte, ret True) (_ []byte, err error) {
	if w, err = ret.WriteJSON(w); err != nil {
		return w, err
	}
	return w, nil
}

func (item *StatshouseAutoCreateBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseAutoCreateBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	j, err := JsonBytesToInterface(r)
	if err != nil {
		return r, w, ErrorInvalidJSON("statshouse.autoCreate", err.Error())
	}
	var ret True
	if err = item.ReadResultJSON(j, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseAutoCreateBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func StatshouseAutoCreateBytes__ReadJSON(item *StatshouseAutoCreateBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *StatshouseAutoCreateBytes) readJSON(j interface{}) error {
	_jm, _ok := j.(map[string]interface{})
	if j != nil && !_ok {
		return ErrorInvalidJSON("statshouse.autoCreate", "expected json object")
	}
	_jFieldsMask := _jm["fields_mask"]
	delete(_jm, "fields_mask")
	if err := JsonReadUint32(_jFieldsMask, &item.FieldsMask); err != nil {
		return err
	}
	_jHeader := _jm["header"]
	delete(_jm, "header")
	_jMetric := _jm["metric"]
	delete(_jm, "metric")
	if err := JsonReadStringBytes(_jMetric, &item.Metric); err != nil {
		return err
	}
	_jKind := _jm["kind"]
	delete(_jm, "kind")
	if err := JsonReadStringBytes(_jKind, &item.Kind); err != nil {
		return err
	}
	_jTags := _jm["tags"]
	delete(_jm, "tags")
	for k := range _jm {
		return ErrorInvalidJSONExcessElement("statshouse.autoCreate", k)
	}
	if err := StatshouseCommonProxyHeaderBytes__ReadJSON(&item.Header, _jHeader, item.FieldsMask); err != nil {
		return err
	}
	if err := VectorString0BytesReadJSON(_jTags, &item.Tags); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseAutoCreateBytes) WriteJSON(w []byte) (_ []byte, err error) {
	w = append(w, '{')
	if item.FieldsMask != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"fields_mask":`...)
		w = basictl.JSONWriteUint32(w, item.FieldsMask)
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	if w, err = item.Header.WriteJSON(w, item.FieldsMask); err != nil {
		return w, err
	}
	if len(item.Metric) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"metric":`...)
		w = basictl.JSONWriteStringBytes(w, item.Metric)
	}
	if len(item.Kind) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"kind":`...)
		w = basictl.JSONWriteStringBytes(w, item.Kind)
	}
	if len(item.Tags) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"tags":`...)
		if w, err = VectorString0BytesWriteJSON(w, item.Tags); err != nil {
			return w, err
		}
	}
	return append(w, '}'), nil
}

func (item *StatshouseAutoCreateBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *StatshouseAutoCreateBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("statshouse.autoCreate", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("statshouse.autoCreate", err.Error())
	}
	return nil
}
