// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseAutoCreate struct {
	FieldsMask  uint32
	Header      StatshouseCommonProxyHeader
	Metric      string
	Kind        string
	Tags        []string
	Resolution  int32  // Conditional: item.FieldsMask.0
	Description string // Conditional: item.FieldsMask.1
}

func (StatshouseAutoCreate) TLName() string { return "statshouse.autoCreate" }
func (StatshouseAutoCreate) TLTag() uint32  { return 0x28bea524 }

func (item *StatshouseAutoCreate) SetResolution(v int32) {
	item.Resolution = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseAutoCreate) ClearResolution() {
	item.Resolution = 0
	item.FieldsMask &^= 1 << 0
}
func (item StatshouseAutoCreate) IsSetResolution() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseAutoCreate) SetDescription(v string) {
	item.Description = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseAutoCreate) ClearDescription() {
	item.Description = ""
	item.FieldsMask &^= 1 << 1
}
func (item StatshouseAutoCreate) IsSetDescription() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseAutoCreate) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.Metric = ""
	item.Kind = ""
	item.Tags = item.Tags[:0]
	item.Resolution = 0
	item.Description = ""
}

func (item *StatshouseAutoCreate) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringRead(w, &item.Kind); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorStringRead(w, &item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.Resolution); err != nil {
			return w, err
		}
	} else {
		item.Resolution = 0
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = basictl.StringRead(w, &item.Description); err != nil {
			return w, err
		}
	} else {
		item.Description = ""
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseAutoCreate) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseAutoCreate) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = item.Header.Write(w, item.FieldsMask)
	w = basictl.StringWrite(w, item.Metric)
	w = basictl.StringWrite(w, item.Kind)
	w = BuiltinVectorStringWrite(w, item.Tags)
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.Resolution)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.StringWrite(w, item.Description)
	}
	return w
}

func (item *StatshouseAutoCreate) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x28bea524); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseAutoCreate) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseAutoCreate) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x28bea524)
	return item.Write(w)
}

func (item *StatshouseAutoCreate) ReadResult(w []byte, ret *True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseAutoCreate) WriteResult(w []byte, ret True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *StatshouseAutoCreate) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseAutoCreate) WriteResultJSON(w []byte, ret True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *StatshouseAutoCreate) writeResultJSON(newTypeNames bool, short bool, w []byte, ret True) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *StatshouseAutoCreate) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseAutoCreate) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *StatshouseAutoCreate) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseAutoCreate) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseAutoCreate) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var rawHeader []byte
	var propMetricPresented bool
	var propKindPresented bool
	var propTagsPresented bool
	var propResolutionPresented bool
	var propDescriptionPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "header":
				if rawHeader != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "header")
				}
				rawHeader = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "metric":
				if propMetricPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "metric")
				}
				if err := Json2ReadString(in, &item.Metric); err != nil {
					return err
				}
				propMetricPresented = true
			case "kind":
				if propKindPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "kind")
				}
				if err := Json2ReadString(in, &item.Kind); err != nil {
					return err
				}
				propKindPresented = true
			case "tags":
				if propTagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "tags")
				}
				if err := BuiltinVectorStringReadJSON(legacyTypeNames, in, &item.Tags); err != nil {
					return err
				}
				propTagsPresented = true
			case "resolution":
				if propResolutionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "resolution")
				}
				if err := Json2ReadInt32(in, &item.Resolution); err != nil {
					return err
				}
				propResolutionPresented = true
			case "description":
				if propDescriptionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "description")
				}
				if err := Json2ReadString(in, &item.Description); err != nil {
					return err
				}
				propDescriptionPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.autoCreate", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propMetricPresented {
		item.Metric = ""
	}
	if !propKindPresented {
		item.Kind = ""
	}
	if !propTagsPresented {
		item.Tags = item.Tags[:0]
	}
	if !propResolutionPresented {
		item.Resolution = 0
	}
	if !propDescriptionPresented {
		item.Description = ""
	}
	if propResolutionPresented {
		item.FieldsMask |= 1 << 0
	}
	if propDescriptionPresented {
		item.FieldsMask |= 1 << 1
	}
	var inHeaderPointer *basictl.JsonLexer
	inHeader := basictl.JsonLexer{Data: rawHeader}
	if rawHeader != nil {
		inHeaderPointer = &inHeader
	}
	if err := item.Header.ReadJSON(legacyTypeNames, inHeaderPointer, item.FieldsMask); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseAutoCreate) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseAutoCreate) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseAutoCreate) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	w = item.Header.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	backupIndexMetric := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metric":`...)
	w = basictl.JSONWriteString(w, item.Metric)
	if (len(item.Metric) != 0) == false {
		w = w[:backupIndexMetric]
	}
	backupIndexKind := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"kind":`...)
	w = basictl.JSONWriteString(w, item.Kind)
	if (len(item.Kind) != 0) == false {
		w = w[:backupIndexKind]
	}
	backupIndexTags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tags":`...)
	w = BuiltinVectorStringWriteJSONOpt(newTypeNames, short, w, item.Tags)
	if (len(item.Tags) != 0) == false {
		w = w[:backupIndexTags]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"resolution":`...)
		w = basictl.JSONWriteInt32(w, item.Resolution)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"description":`...)
		w = basictl.JSONWriteString(w, item.Description)
	}
	return append(w, '}')
}

func (item *StatshouseAutoCreate) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseAutoCreate) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.autoCreate", err.Error())
	}
	return nil
}

type StatshouseAutoCreateBytes struct {
	FieldsMask  uint32
	Header      StatshouseCommonProxyHeaderBytes
	Metric      []byte
	Kind        []byte
	Tags        [][]byte
	Resolution  int32  // Conditional: item.FieldsMask.0
	Description []byte // Conditional: item.FieldsMask.1
}

func (StatshouseAutoCreateBytes) TLName() string { return "statshouse.autoCreate" }
func (StatshouseAutoCreateBytes) TLTag() uint32  { return 0x28bea524 }

func (item *StatshouseAutoCreateBytes) SetResolution(v int32) {
	item.Resolution = v
	item.FieldsMask |= 1 << 0
}
func (item *StatshouseAutoCreateBytes) ClearResolution() {
	item.Resolution = 0
	item.FieldsMask &^= 1 << 0
}
func (item StatshouseAutoCreateBytes) IsSetResolution() bool { return item.FieldsMask&(1<<0) != 0 }

func (item *StatshouseAutoCreateBytes) SetDescription(v []byte) {
	item.Description = v
	item.FieldsMask |= 1 << 1
}
func (item *StatshouseAutoCreateBytes) ClearDescription() {
	item.Description = item.Description[:0]
	item.FieldsMask &^= 1 << 1
}
func (item StatshouseAutoCreateBytes) IsSetDescription() bool { return item.FieldsMask&(1<<1) != 0 }

func (item *StatshouseAutoCreateBytes) Reset() {
	item.FieldsMask = 0
	item.Header.Reset()
	item.Metric = item.Metric[:0]
	item.Kind = item.Kind[:0]
	item.Tags = item.Tags[:0]
	item.Resolution = 0
	item.Description = item.Description[:0]
}

func (item *StatshouseAutoCreateBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = item.Header.Read(w, item.FieldsMask); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Metric); err != nil {
		return w, err
	}
	if w, err = basictl.StringReadBytes(w, &item.Kind); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorStringBytesRead(w, &item.Tags); err != nil {
		return w, err
	}
	if item.FieldsMask&(1<<0) != 0 {
		if w, err = basictl.IntRead(w, &item.Resolution); err != nil {
			return w, err
		}
	} else {
		item.Resolution = 0
	}
	if item.FieldsMask&(1<<1) != 0 {
		if w, err = basictl.StringReadBytes(w, &item.Description); err != nil {
			return w, err
		}
	} else {
		item.Description = item.Description[:0]
	}
	return w, nil
}

// This method is general version of Write, use it instead!
func (item *StatshouseAutoCreateBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseAutoCreateBytes) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = item.Header.Write(w, item.FieldsMask)
	w = basictl.StringWriteBytes(w, item.Metric)
	w = basictl.StringWriteBytes(w, item.Kind)
	w = BuiltinVectorStringBytesWrite(w, item.Tags)
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.IntWrite(w, item.Resolution)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.StringWriteBytes(w, item.Description)
	}
	return w
}

func (item *StatshouseAutoCreateBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x28bea524); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseAutoCreateBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseAutoCreateBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x28bea524)
	return item.Write(w)
}

func (item *StatshouseAutoCreateBytes) ReadResult(w []byte, ret *True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseAutoCreateBytes) WriteResult(w []byte, ret True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *StatshouseAutoCreateBytes) ReadResultJSON(legacyTypeNames bool, in *basictl.JsonLexer, ret *True) error {
	if err := ret.ReadJSON(legacyTypeNames, in); err != nil {
		return err
	}
	return nil
}

func (item *StatshouseAutoCreateBytes) WriteResultJSON(w []byte, ret True) (_ []byte, err error) {
	return item.writeResultJSON(true, false, w, ret)
}

func (item *StatshouseAutoCreateBytes) writeResultJSON(newTypeNames bool, short bool, w []byte, ret True) (_ []byte, err error) {
	w = ret.WriteJSONOpt(newTypeNames, short, w)
	return w, nil
}

func (item *StatshouseAutoCreateBytes) ReadResultWriteResultJSON(r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.WriteResultJSON(w, ret)
	return r, w, err
}

func (item *StatshouseAutoCreateBytes) ReadResultWriteResultJSONOpt(newTypeNames bool, short bool, r []byte, w []byte) (_ []byte, _ []byte, err error) {
	var ret True
	if r, err = item.ReadResult(r, &ret); err != nil {
		return r, w, err
	}
	w, err = item.writeResultJSON(newTypeNames, short, w, ret)
	return r, w, err
}

func (item *StatshouseAutoCreateBytes) ReadResultJSONWriteResult(r []byte, w []byte) ([]byte, []byte, error) {
	var ret True
	err := item.ReadResultJSON(true, &basictl.JsonLexer{Data: r}, &ret)
	if err != nil {
		return r, w, err
	}
	w, err = item.WriteResult(w, ret)
	return r, w, err
}

func (item StatshouseAutoCreateBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseAutoCreateBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var rawHeader []byte
	var propMetricPresented bool
	var propKindPresented bool
	var propTagsPresented bool
	var propResolutionPresented bool
	var propDescriptionPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "header":
				if rawHeader != nil {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "header")
				}
				rawHeader = in.Raw()
				if !in.Ok() {
					return in.Error()
				}
			case "metric":
				if propMetricPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "metric")
				}
				if err := Json2ReadStringBytes(in, &item.Metric); err != nil {
					return err
				}
				propMetricPresented = true
			case "kind":
				if propKindPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "kind")
				}
				if err := Json2ReadStringBytes(in, &item.Kind); err != nil {
					return err
				}
				propKindPresented = true
			case "tags":
				if propTagsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "tags")
				}
				if err := BuiltinVectorStringBytesReadJSON(legacyTypeNames, in, &item.Tags); err != nil {
					return err
				}
				propTagsPresented = true
			case "resolution":
				if propResolutionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "resolution")
				}
				if err := Json2ReadInt32(in, &item.Resolution); err != nil {
					return err
				}
				propResolutionPresented = true
			case "description":
				if propDescriptionPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.autoCreate", "description")
				}
				if err := Json2ReadStringBytes(in, &item.Description); err != nil {
					return err
				}
				propDescriptionPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.autoCreate", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propMetricPresented {
		item.Metric = item.Metric[:0]
	}
	if !propKindPresented {
		item.Kind = item.Kind[:0]
	}
	if !propTagsPresented {
		item.Tags = item.Tags[:0]
	}
	if !propResolutionPresented {
		item.Resolution = 0
	}
	if !propDescriptionPresented {
		item.Description = item.Description[:0]
	}
	if propResolutionPresented {
		item.FieldsMask |= 1 << 0
	}
	if propDescriptionPresented {
		item.FieldsMask |= 1 << 1
	}
	var inHeaderPointer *basictl.JsonLexer
	inHeader := basictl.JsonLexer{Data: rawHeader}
	if rawHeader != nil {
		inHeaderPointer = &inHeader
	}
	if err := item.Header.ReadJSON(legacyTypeNames, inHeaderPointer, item.FieldsMask); err != nil {
		return err
	}

	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseAutoCreateBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseAutoCreateBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseAutoCreateBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexFieldsMask := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"fields_mask":`...)
	w = basictl.JSONWriteUint32(w, item.FieldsMask)
	if (item.FieldsMask != 0) == false {
		w = w[:backupIndexFieldsMask]
	}
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"header":`...)
	w = item.Header.WriteJSONOpt(newTypeNames, short, w, item.FieldsMask)
	backupIndexMetric := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metric":`...)
	w = basictl.JSONWriteStringBytes(w, item.Metric)
	if (len(item.Metric) != 0) == false {
		w = w[:backupIndexMetric]
	}
	backupIndexKind := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"kind":`...)
	w = basictl.JSONWriteStringBytes(w, item.Kind)
	if (len(item.Kind) != 0) == false {
		w = w[:backupIndexKind]
	}
	backupIndexTags := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"tags":`...)
	w = BuiltinVectorStringBytesWriteJSONOpt(newTypeNames, short, w, item.Tags)
	if (len(item.Tags) != 0) == false {
		w = w[:backupIndexTags]
	}
	if item.FieldsMask&(1<<0) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"resolution":`...)
		w = basictl.JSONWriteInt32(w, item.Resolution)
	}
	if item.FieldsMask&(1<<1) != 0 {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = append(w, `"description":`...)
		w = basictl.JSONWriteStringBytes(w, item.Description)
	}
	return append(w, '}')
}

func (item *StatshouseAutoCreateBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseAutoCreateBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.autoCreate", err.Error())
	}
	return nil
}
