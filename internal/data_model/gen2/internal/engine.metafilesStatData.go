// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type EngineMetafilesStat struct {
	Data []EngineMetafilesOneMemoryStat
}

func (EngineMetafilesStat) TLName() string { return "engine.metafilesStatData" }
func (EngineMetafilesStat) TLTag() uint32  { return 0xb673669b }

func (item *EngineMetafilesStat) Reset() {
	item.Data = item.Data[:0]
}

func (item *EngineMetafilesStat) Read(w []byte) (_ []byte, err error) {
	return BuiltinVectorEngineMetafilesOneMemoryStatRead(w, &item.Data)
}

func (item *EngineMetafilesStat) Write(w []byte) (_ []byte, err error) {
	return BuiltinVectorEngineMetafilesOneMemoryStatWrite(w, item.Data)
}

func (item *EngineMetafilesStat) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0xb673669b); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *EngineMetafilesStat) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0xb673669b)
	return item.Write(w)
}

func (item EngineMetafilesStat) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func (item *EngineMetafilesStat) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propDataPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "data":
				if propDataPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("engine.metafilesStatData", "data")
				}
				if err := BuiltinVectorEngineMetafilesOneMemoryStatReadJSON(legacyTypeNames, in, &item.Data); err != nil {
					return err
				}
				propDataPresented = true
			default:
				return ErrorInvalidJSONExcessElement("engine.metafilesStatData", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propDataPresented {
		item.Data = item.Data[:0]
	}
	return nil
}

func (item *EngineMetafilesStat) WriteJSON(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w)
}
func (item *EngineMetafilesStat) WriteJSONOpt(newTypeNames bool, short bool, w []byte) (_ []byte, err error) {
	w = append(w, '{')
	backupIndexData := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"data":`...)
	if w, err = BuiltinVectorEngineMetafilesOneMemoryStatWriteJSONOpt(newTypeNames, short, w, item.Data); err != nil {
		return w, err
	}
	if (len(item.Data) != 0) == false {
		w = w[:backupIndexData]
	}
	return append(w, '}'), nil
}

func (item *EngineMetafilesStat) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *EngineMetafilesStat) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("engine.metafilesStatData", err.Error())
	}
	return nil
}
