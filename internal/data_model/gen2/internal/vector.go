// Copyright 2022 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type VectorDictionaryFieldEngineMetafilesStatBoxed map[string]EngineMetafilesStat

func (VectorDictionaryFieldEngineMetafilesStatBoxed) TLName() string { return "vector" }
func (VectorDictionaryFieldEngineMetafilesStatBoxed) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) Reset() {
	ptr := (*map[string]EngineMetafilesStat)(item)
	VectorDictionaryFieldEngineMetafilesStatBoxed0Reset(*ptr)
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]EngineMetafilesStat)(item)
	return VectorDictionaryFieldEngineMetafilesStatBoxed0Read(w, ptr)
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) Write(w []byte) (_ []byte, err error) {
	ptr := (*map[string]EngineMetafilesStat)(item)
	return VectorDictionaryFieldEngineMetafilesStatBoxed0Write(w, *ptr)
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldEngineMetafilesStatBoxed) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorDictionaryFieldEngineMetafilesStatBoxed__ReadJSON(item *VectorDictionaryFieldEngineMetafilesStatBoxed, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) readJSON(j interface{}) error {
	ptr := (*map[string]EngineMetafilesStat)(item)
	if err := VectorDictionaryFieldEngineMetafilesStatBoxed0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*map[string]EngineMetafilesStat)(item)
	if w, err = VectorDictionaryFieldEngineMetafilesStatBoxed0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDictionaryFieldString map[string]string

func (VectorDictionaryFieldString) TLName() string { return "vector" }
func (VectorDictionaryFieldString) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldString) Reset() {
	ptr := (*map[string]string)(item)
	VectorDictionaryFieldString0Reset(*ptr)
}

func (item *VectorDictionaryFieldString) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	return VectorDictionaryFieldString0Read(w, ptr)
}

func (item *VectorDictionaryFieldString) Write(w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	return VectorDictionaryFieldString0Write(w, *ptr)
}

func (item *VectorDictionaryFieldString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorDictionaryFieldString) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldString) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorDictionaryFieldString__ReadJSON(item *VectorDictionaryFieldString, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorDictionaryFieldString) readJSON(j interface{}) error {
	ptr := (*map[string]string)(item)
	if err := VectorDictionaryFieldString0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorDictionaryFieldString) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	if w, err = VectorDictionaryFieldString0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorDictionaryFieldString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorDictionaryFieldString) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDictionaryFieldStringBytes []DictionaryFieldStringBytes

func (VectorDictionaryFieldStringBytes) TLName() string { return "vector" }
func (VectorDictionaryFieldStringBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldStringBytes) Reset() {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorDictionaryFieldStringBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	return VectorDictionaryFieldString0BytesRead(w, ptr)
}

func (item *VectorDictionaryFieldStringBytes) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	return VectorDictionaryFieldString0BytesWrite(w, *ptr)
}

func (item *VectorDictionaryFieldStringBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorDictionaryFieldStringBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldStringBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorDictionaryFieldStringBytes__ReadJSON(item *VectorDictionaryFieldStringBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorDictionaryFieldStringBytes) readJSON(j interface{}) error {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	if err := VectorDictionaryFieldString0BytesReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorDictionaryFieldStringBytes) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	if w, err = VectorDictionaryFieldString0BytesWriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorDictionaryFieldStringBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorDictionaryFieldStringBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDouble []float64

func (VectorDouble) TLName() string { return "vector" }
func (VectorDouble) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDouble) Reset() {
	ptr := (*[]float64)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorDouble) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]float64)(item)
	return VectorDouble0Read(w, ptr)
}

func (item *VectorDouble) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]float64)(item)
	return VectorDouble0Write(w, *ptr)
}

func (item *VectorDouble) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorDouble) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDouble) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorDouble__ReadJSON(item *VectorDouble, j interface{}) error { return item.readJSON(j) }
func (item *VectorDouble) readJSON(j interface{}) error {
	ptr := (*[]float64)(item)
	if err := VectorDouble0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorDouble) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]float64)(item)
	if w, err = VectorDouble0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorDouble) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorDouble) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorEngineBinlogPrefix []EngineBinlogPrefix

func (VectorEngineBinlogPrefix) TLName() string { return "vector" }
func (VectorEngineBinlogPrefix) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorEngineBinlogPrefix) Reset() {
	ptr := (*[]EngineBinlogPrefix)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorEngineBinlogPrefix) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]EngineBinlogPrefix)(item)
	return VectorEngineBinlogPrefix0Read(w, ptr)
}

func (item *VectorEngineBinlogPrefix) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]EngineBinlogPrefix)(item)
	return VectorEngineBinlogPrefix0Write(w, *ptr)
}

func (item *VectorEngineBinlogPrefix) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorEngineBinlogPrefix) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorEngineBinlogPrefix) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorEngineBinlogPrefix__ReadJSON(item *VectorEngineBinlogPrefix, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorEngineBinlogPrefix) readJSON(j interface{}) error {
	ptr := (*[]EngineBinlogPrefix)(item)
	if err := VectorEngineBinlogPrefix0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorEngineBinlogPrefix) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]EngineBinlogPrefix)(item)
	if w, err = VectorEngineBinlogPrefix0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorEngineBinlogPrefix) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorEngineBinlogPrefix) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorEngineMetafilesOneMemoryStat []EngineMetafilesOneMemoryStat

func (VectorEngineMetafilesOneMemoryStat) TLName() string { return "vector" }
func (VectorEngineMetafilesOneMemoryStat) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorEngineMetafilesOneMemoryStat) Reset() {
	ptr := (*[]EngineMetafilesOneMemoryStat)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorEngineMetafilesOneMemoryStat) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]EngineMetafilesOneMemoryStat)(item)
	return VectorEngineMetafilesOneMemoryStat0Read(w, ptr)
}

func (item *VectorEngineMetafilesOneMemoryStat) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]EngineMetafilesOneMemoryStat)(item)
	return VectorEngineMetafilesOneMemoryStat0Write(w, *ptr)
}

func (item *VectorEngineMetafilesOneMemoryStat) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorEngineMetafilesOneMemoryStat) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorEngineMetafilesOneMemoryStat) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorEngineMetafilesOneMemoryStat__ReadJSON(item *VectorEngineMetafilesOneMemoryStat, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorEngineMetafilesOneMemoryStat) readJSON(j interface{}) error {
	ptr := (*[]EngineMetafilesOneMemoryStat)(item)
	if err := VectorEngineMetafilesOneMemoryStat0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorEngineMetafilesOneMemoryStat) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]EngineMetafilesOneMemoryStat)(item)
	if w, err = VectorEngineMetafilesOneMemoryStat0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorEngineMetafilesOneMemoryStat) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorEngineMetafilesOneMemoryStat) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorInt []int32

func (VectorInt) TLName() string { return "vector" }
func (VectorInt) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorInt) Reset() {
	ptr := (*[]int32)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorInt) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	return VectorInt0Read(w, ptr)
}

func (item *VectorInt) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	return VectorInt0Write(w, *ptr)
}

func (item *VectorInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorInt) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorInt) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorInt__ReadJSON(item *VectorInt, j interface{}) error { return item.readJSON(j) }
func (item *VectorInt) readJSON(j interface{}) error {
	ptr := (*[]int32)(item)
	if err := VectorInt0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorInt) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	if w, err = VectorInt0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorInt) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorLong []int64

func (VectorLong) TLName() string { return "vector" }
func (VectorLong) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorLong) Reset() {
	ptr := (*[]int64)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorLong) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]int64)(item)
	return VectorLong0Read(w, ptr)
}

func (item *VectorLong) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]int64)(item)
	return VectorLong0Write(w, *ptr)
}

func (item *VectorLong) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorLong) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorLong) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorLong__ReadJSON(item *VectorLong, j interface{}) error { return item.readJSON(j) }
func (item *VectorLong) readJSON(j interface{}) error {
	ptr := (*[]int64)(item)
	if err := VectorLong0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorLong) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]int64)(item)
	if w, err = VectorLong0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorLong) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorLong) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorMetadataEvent []MetadataEvent

func (VectorMetadataEvent) TLName() string { return "vector" }
func (VectorMetadataEvent) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorMetadataEvent) Reset() {
	ptr := (*[]MetadataEvent)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorMetadataEvent) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]MetadataEvent)(item)
	return VectorMetadataEvent0Read(w, ptr)
}

func (item *VectorMetadataEvent) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]MetadataEvent)(item)
	return VectorMetadataEvent0Write(w, *ptr)
}

func (item *VectorMetadataEvent) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorMetadataEvent) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorMetadataEvent) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorMetadataEvent__ReadJSON(item *VectorMetadataEvent, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorMetadataEvent) readJSON(j interface{}) error {
	ptr := (*[]MetadataEvent)(item)
	if err := VectorMetadataEvent0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorMetadataEvent) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]MetadataEvent)(item)
	if w, err = VectorMetadataEvent0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorMetadataEvent) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorMetadataEvent) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorMetadataEventBytes []MetadataEventBytes

func (VectorMetadataEventBytes) TLName() string { return "vector" }
func (VectorMetadataEventBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorMetadataEventBytes) Reset() {
	ptr := (*[]MetadataEventBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorMetadataEventBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]MetadataEventBytes)(item)
	return VectorMetadataEvent0BytesRead(w, ptr)
}

func (item *VectorMetadataEventBytes) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]MetadataEventBytes)(item)
	return VectorMetadataEvent0BytesWrite(w, *ptr)
}

func (item *VectorMetadataEventBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorMetadataEventBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorMetadataEventBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorMetadataEventBytes__ReadJSON(item *VectorMetadataEventBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorMetadataEventBytes) readJSON(j interface{}) error {
	ptr := (*[]MetadataEventBytes)(item)
	if err := VectorMetadataEvent0BytesReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorMetadataEventBytes) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]MetadataEventBytes)(item)
	if w, err = VectorMetadataEvent0BytesWriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorMetadataEventBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorMetadataEventBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorMetadataMetricOld []MetadataMetricOld

func (VectorMetadataMetricOld) TLName() string { return "vector" }
func (VectorMetadataMetricOld) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorMetadataMetricOld) Reset() {
	ptr := (*[]MetadataMetricOld)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorMetadataMetricOld) Read(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*[]MetadataMetricOld)(item)
	return VectorMetadataMetricOld0Read(w, ptr, nat_t)
}

func (item *VectorMetadataMetricOld) Write(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*[]MetadataMetricOld)(item)
	return VectorMetadataMetricOld0Write(w, *ptr, nat_t)
}

func (item *VectorMetadataMetricOld) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w, nat_t)
}

func (item *VectorMetadataMetricOld) WriteBoxed(w []byte, nat_t uint32) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w, nat_t)
}

func VectorMetadataMetricOld__ReadJSON(item *VectorMetadataMetricOld, j interface{}, nat_t uint32) error {
	return item.readJSON(j, nat_t)
}
func (item *VectorMetadataMetricOld) readJSON(j interface{}, nat_t uint32) error {
	ptr := (*[]MetadataMetricOld)(item)
	if err := VectorMetadataMetricOld0ReadJSON(j, ptr, nat_t); err != nil {
		return err
	}
	return nil
}

func (item *VectorMetadataMetricOld) WriteJSON(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*[]MetadataMetricOld)(item)
	if w, err = VectorMetadataMetricOld0WriteJSON(w, *ptr, nat_t); err != nil {
		return w, err
	}
	return w, nil
}

type VectorStatshouseApiFilter []StatshouseApiFilter

func (VectorStatshouseApiFilter) TLName() string { return "vector" }
func (VectorStatshouseApiFilter) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseApiFilter) Reset() {
	ptr := (*[]StatshouseApiFilter)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseApiFilter) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiFilter)(item)
	return VectorStatshouseApiFilter0Read(w, ptr)
}

func (item *VectorStatshouseApiFilter) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiFilter)(item)
	return VectorStatshouseApiFilter0Write(w, *ptr)
}

func (item *VectorStatshouseApiFilter) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseApiFilter) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseApiFilter) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseApiFilter__ReadJSON(item *VectorStatshouseApiFilter, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseApiFilter) readJSON(j interface{}) error {
	ptr := (*[]StatshouseApiFilter)(item)
	if err := VectorStatshouseApiFilter0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseApiFilter) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiFilter)(item)
	if w, err = VectorStatshouseApiFilter0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseApiFilter) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseApiFilter) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseApiFunctionBoxed []StatshouseApiFunction

func (VectorStatshouseApiFunctionBoxed) TLName() string { return "vector" }
func (VectorStatshouseApiFunctionBoxed) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseApiFunctionBoxed) Reset() {
	ptr := (*[]StatshouseApiFunction)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseApiFunctionBoxed) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiFunction)(item)
	return VectorStatshouseApiFunctionBoxed0Read(w, ptr)
}

func (item *VectorStatshouseApiFunctionBoxed) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiFunction)(item)
	return VectorStatshouseApiFunctionBoxed0Write(w, *ptr)
}

func (item *VectorStatshouseApiFunctionBoxed) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseApiFunctionBoxed) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseApiFunctionBoxed) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseApiFunctionBoxed__ReadJSON(item *VectorStatshouseApiFunctionBoxed, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseApiFunctionBoxed) readJSON(j interface{}) error {
	ptr := (*[]StatshouseApiFunction)(item)
	if err := VectorStatshouseApiFunctionBoxed0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseApiFunctionBoxed) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiFunction)(item)
	if w, err = VectorStatshouseApiFunctionBoxed0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseApiFunctionBoxed) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseApiFunctionBoxed) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseApiSeriesMeta []StatshouseApiSeriesMeta

func (VectorStatshouseApiSeriesMeta) TLName() string { return "vector" }
func (VectorStatshouseApiSeriesMeta) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseApiSeriesMeta) Reset() {
	ptr := (*[]StatshouseApiSeriesMeta)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseApiSeriesMeta) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiSeriesMeta)(item)
	return VectorStatshouseApiSeriesMeta0Read(w, ptr)
}

func (item *VectorStatshouseApiSeriesMeta) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiSeriesMeta)(item)
	return VectorStatshouseApiSeriesMeta0Write(w, *ptr)
}

func (item *VectorStatshouseApiSeriesMeta) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseApiSeriesMeta) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseApiSeriesMeta) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseApiSeriesMeta__ReadJSON(item *VectorStatshouseApiSeriesMeta, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseApiSeriesMeta) readJSON(j interface{}) error {
	ptr := (*[]StatshouseApiSeriesMeta)(item)
	if err := VectorStatshouseApiSeriesMeta0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseApiSeriesMeta) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiSeriesMeta)(item)
	if w, err = VectorStatshouseApiSeriesMeta0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseApiSeriesMeta) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseApiSeriesMeta) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseApiTagValue []StatshouseApiTagValue

func (VectorStatshouseApiTagValue) TLName() string { return "vector" }
func (VectorStatshouseApiTagValue) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseApiTagValue) Reset() {
	ptr := (*[]StatshouseApiTagValue)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseApiTagValue) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiTagValue)(item)
	return VectorStatshouseApiTagValue0Read(w, ptr)
}

func (item *VectorStatshouseApiTagValue) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiTagValue)(item)
	return VectorStatshouseApiTagValue0Write(w, *ptr)
}

func (item *VectorStatshouseApiTagValue) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseApiTagValue) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseApiTagValue) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseApiTagValue__ReadJSON(item *VectorStatshouseApiTagValue, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseApiTagValue) readJSON(j interface{}) error {
	ptr := (*[]StatshouseApiTagValue)(item)
	if err := VectorStatshouseApiTagValue0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseApiTagValue) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiTagValue)(item)
	if w, err = VectorStatshouseApiTagValue0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseApiTagValue) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseApiTagValue) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseCentroid []StatshouseCentroid

func (VectorStatshouseCentroid) TLName() string { return "vector" }
func (VectorStatshouseCentroid) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseCentroid) Reset() {
	ptr := (*[]StatshouseCentroid)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseCentroid) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseCentroid)(item)
	return VectorStatshouseCentroid0Read(w, ptr)
}

func (item *VectorStatshouseCentroid) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseCentroid)(item)
	return VectorStatshouseCentroid0Write(w, *ptr)
}

func (item *VectorStatshouseCentroid) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseCentroid) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseCentroid) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseCentroid__ReadJSON(item *VectorStatshouseCentroid, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseCentroid) readJSON(j interface{}) error {
	ptr := (*[]StatshouseCentroid)(item)
	if err := VectorStatshouseCentroid0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseCentroid) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseCentroid)(item)
	if w, err = VectorStatshouseCentroid0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseCentroid) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseCentroid) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseIngestionStatus2 []StatshouseIngestionStatus2

func (VectorStatshouseIngestionStatus2) TLName() string { return "vector" }
func (VectorStatshouseIngestionStatus2) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseIngestionStatus2) Reset() {
	ptr := (*[]StatshouseIngestionStatus2)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseIngestionStatus2) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseIngestionStatus2)(item)
	return VectorStatshouseIngestionStatus20Read(w, ptr)
}

func (item *VectorStatshouseIngestionStatus2) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseIngestionStatus2)(item)
	return VectorStatshouseIngestionStatus20Write(w, *ptr)
}

func (item *VectorStatshouseIngestionStatus2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseIngestionStatus2) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseIngestionStatus2) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseIngestionStatus2__ReadJSON(item *VectorStatshouseIngestionStatus2, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseIngestionStatus2) readJSON(j interface{}) error {
	ptr := (*[]StatshouseIngestionStatus2)(item)
	if err := VectorStatshouseIngestionStatus20ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseIngestionStatus2) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseIngestionStatus2)(item)
	if w, err = VectorStatshouseIngestionStatus20WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseIngestionStatus2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseIngestionStatus2) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMapping []StatshouseMapping

func (VectorStatshouseMapping) TLName() string { return "vector" }
func (VectorStatshouseMapping) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMapping) Reset() {
	ptr := (*[]StatshouseMapping)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMapping) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMapping)(item)
	return VectorStatshouseMapping0Read(w, ptr)
}

func (item *VectorStatshouseMapping) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMapping)(item)
	return VectorStatshouseMapping0Write(w, *ptr)
}

func (item *VectorStatshouseMapping) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseMapping) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMapping) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseMapping__ReadJSON(item *VectorStatshouseMapping, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseMapping) readJSON(j interface{}) error {
	ptr := (*[]StatshouseMapping)(item)
	if err := VectorStatshouseMapping0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseMapping) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMapping)(item)
	if w, err = VectorStatshouseMapping0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseMapping) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseMapping) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMappingBytes []StatshouseMappingBytes

func (VectorStatshouseMappingBytes) TLName() string { return "vector" }
func (VectorStatshouseMappingBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMappingBytes) Reset() {
	ptr := (*[]StatshouseMappingBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMappingBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMappingBytes)(item)
	return VectorStatshouseMapping0BytesRead(w, ptr)
}

func (item *VectorStatshouseMappingBytes) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMappingBytes)(item)
	return VectorStatshouseMapping0BytesWrite(w, *ptr)
}

func (item *VectorStatshouseMappingBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseMappingBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMappingBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseMappingBytes__ReadJSON(item *VectorStatshouseMappingBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseMappingBytes) readJSON(j interface{}) error {
	ptr := (*[]StatshouseMappingBytes)(item)
	if err := VectorStatshouseMapping0BytesReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseMappingBytes) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMappingBytes)(item)
	if w, err = VectorStatshouseMapping0BytesWriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseMappingBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseMappingBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMetric []StatshouseMetric

func (VectorStatshouseMetric) TLName() string { return "vector" }
func (VectorStatshouseMetric) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMetric) Reset() {
	ptr := (*[]StatshouseMetric)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMetric) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMetric)(item)
	return VectorStatshouseMetric0Read(w, ptr)
}

func (item *VectorStatshouseMetric) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMetric)(item)
	return VectorStatshouseMetric0Write(w, *ptr)
}

func (item *VectorStatshouseMetric) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseMetric) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMetric) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseMetric__ReadJSON(item *VectorStatshouseMetric, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseMetric) readJSON(j interface{}) error {
	ptr := (*[]StatshouseMetric)(item)
	if err := VectorStatshouseMetric0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseMetric) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMetric)(item)
	if w, err = VectorStatshouseMetric0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseMetric) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseMetric) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMetricBytes []StatshouseMetricBytes

func (VectorStatshouseMetricBytes) TLName() string { return "vector" }
func (VectorStatshouseMetricBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMetricBytes) Reset() {
	ptr := (*[]StatshouseMetricBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMetricBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMetricBytes)(item)
	return VectorStatshouseMetric0BytesRead(w, ptr)
}

func (item *VectorStatshouseMetricBytes) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMetricBytes)(item)
	return VectorStatshouseMetric0BytesWrite(w, *ptr)
}

func (item *VectorStatshouseMetricBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseMetricBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMetricBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseMetricBytes__ReadJSON(item *VectorStatshouseMetricBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseMetricBytes) readJSON(j interface{}) error {
	ptr := (*[]StatshouseMetricBytes)(item)
	if err := VectorStatshouseMetric0BytesReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseMetricBytes) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMetricBytes)(item)
	if w, err = VectorStatshouseMetric0BytesWriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseMetricBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseMetricBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMultiItem []StatshouseMultiItem

func (VectorStatshouseMultiItem) TLName() string { return "vector" }
func (VectorStatshouseMultiItem) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMultiItem) Reset() {
	ptr := (*[]StatshouseMultiItem)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMultiItem) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMultiItem)(item)
	return VectorStatshouseMultiItem0Read(w, ptr)
}

func (item *VectorStatshouseMultiItem) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMultiItem)(item)
	return VectorStatshouseMultiItem0Write(w, *ptr)
}

func (item *VectorStatshouseMultiItem) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseMultiItem) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMultiItem) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseMultiItem__ReadJSON(item *VectorStatshouseMultiItem, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseMultiItem) readJSON(j interface{}) error {
	ptr := (*[]StatshouseMultiItem)(item)
	if err := VectorStatshouseMultiItem0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseMultiItem) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMultiItem)(item)
	if w, err = VectorStatshouseMultiItem0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseMultiItem) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseMultiItem) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMultiItemBytes []StatshouseMultiItemBytes

func (VectorStatshouseMultiItemBytes) TLName() string { return "vector" }
func (VectorStatshouseMultiItemBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMultiItemBytes) Reset() {
	ptr := (*[]StatshouseMultiItemBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMultiItemBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMultiItemBytes)(item)
	return VectorStatshouseMultiItem0BytesRead(w, ptr)
}

func (item *VectorStatshouseMultiItemBytes) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMultiItemBytes)(item)
	return VectorStatshouseMultiItem0BytesWrite(w, *ptr)
}

func (item *VectorStatshouseMultiItemBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseMultiItemBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMultiItemBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseMultiItemBytes__ReadJSON(item *VectorStatshouseMultiItemBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseMultiItemBytes) readJSON(j interface{}) error {
	ptr := (*[]StatshouseMultiItemBytes)(item)
	if err := VectorStatshouseMultiItem0BytesReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseMultiItemBytes) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMultiItemBytes)(item)
	if w, err = VectorStatshouseMultiItem0BytesWriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseMultiItemBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseMultiItemBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshousePromTarget []StatshousePromTarget

func (VectorStatshousePromTarget) TLName() string { return "vector" }
func (VectorStatshousePromTarget) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshousePromTarget) Reset() {
	ptr := (*[]StatshousePromTarget)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshousePromTarget) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshousePromTarget)(item)
	return VectorStatshousePromTarget0Read(w, ptr)
}

func (item *VectorStatshousePromTarget) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshousePromTarget)(item)
	return VectorStatshousePromTarget0Write(w, *ptr)
}

func (item *VectorStatshousePromTarget) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshousePromTarget) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshousePromTarget) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshousePromTarget__ReadJSON(item *VectorStatshousePromTarget, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshousePromTarget) readJSON(j interface{}) error {
	ptr := (*[]StatshousePromTarget)(item)
	if err := VectorStatshousePromTarget0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshousePromTarget) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshousePromTarget)(item)
	if w, err = VectorStatshousePromTarget0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshousePromTarget) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshousePromTarget) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshousePromTargetBytes []StatshousePromTargetBytes

func (VectorStatshousePromTargetBytes) TLName() string { return "vector" }
func (VectorStatshousePromTargetBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshousePromTargetBytes) Reset() {
	ptr := (*[]StatshousePromTargetBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshousePromTargetBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshousePromTargetBytes)(item)
	return VectorStatshousePromTarget0BytesRead(w, ptr)
}

func (item *VectorStatshousePromTargetBytes) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshousePromTargetBytes)(item)
	return VectorStatshousePromTarget0BytesWrite(w, *ptr)
}

func (item *VectorStatshousePromTargetBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshousePromTargetBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshousePromTargetBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshousePromTargetBytes__ReadJSON(item *VectorStatshousePromTargetBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshousePromTargetBytes) readJSON(j interface{}) error {
	ptr := (*[]StatshousePromTargetBytes)(item)
	if err := VectorStatshousePromTarget0BytesReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshousePromTargetBytes) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshousePromTargetBytes)(item)
	if w, err = VectorStatshousePromTarget0BytesWriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshousePromTargetBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshousePromTargetBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseSampleFactor []StatshouseSampleFactor

func (VectorStatshouseSampleFactor) TLName() string { return "vector" }
func (VectorStatshouseSampleFactor) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseSampleFactor) Reset() {
	ptr := (*[]StatshouseSampleFactor)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseSampleFactor) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseSampleFactor)(item)
	return VectorStatshouseSampleFactor0Read(w, ptr)
}

func (item *VectorStatshouseSampleFactor) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseSampleFactor)(item)
	return VectorStatshouseSampleFactor0Write(w, *ptr)
}

func (item *VectorStatshouseSampleFactor) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseSampleFactor) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseSampleFactor) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseSampleFactor__ReadJSON(item *VectorStatshouseSampleFactor, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseSampleFactor) readJSON(j interface{}) error {
	ptr := (*[]StatshouseSampleFactor)(item)
	if err := VectorStatshouseSampleFactor0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseSampleFactor) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseSampleFactor)(item)
	if w, err = VectorStatshouseSampleFactor0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseSampleFactor) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseSampleFactor) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseTopElement []StatshouseTopElement

func (VectorStatshouseTopElement) TLName() string { return "vector" }
func (VectorStatshouseTopElement) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseTopElement) Reset() {
	ptr := (*[]StatshouseTopElement)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseTopElement) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseTopElement)(item)
	return VectorStatshouseTopElement0Read(w, ptr)
}

func (item *VectorStatshouseTopElement) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseTopElement)(item)
	return VectorStatshouseTopElement0Write(w, *ptr)
}

func (item *VectorStatshouseTopElement) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseTopElement) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseTopElement) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseTopElement__ReadJSON(item *VectorStatshouseTopElement, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseTopElement) readJSON(j interface{}) error {
	ptr := (*[]StatshouseTopElement)(item)
	if err := VectorStatshouseTopElement0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseTopElement) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseTopElement)(item)
	if w, err = VectorStatshouseTopElement0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseTopElement) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseTopElement) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseTopElementBytes []StatshouseTopElementBytes

func (VectorStatshouseTopElementBytes) TLName() string { return "vector" }
func (VectorStatshouseTopElementBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseTopElementBytes) Reset() {
	ptr := (*[]StatshouseTopElementBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseTopElementBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseTopElementBytes)(item)
	return VectorStatshouseTopElement0BytesRead(w, ptr)
}

func (item *VectorStatshouseTopElementBytes) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseTopElementBytes)(item)
	return VectorStatshouseTopElement0BytesWrite(w, *ptr)
}

func (item *VectorStatshouseTopElementBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStatshouseTopElementBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseTopElementBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStatshouseTopElementBytes__ReadJSON(item *VectorStatshouseTopElementBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStatshouseTopElementBytes) readJSON(j interface{}) error {
	ptr := (*[]StatshouseTopElementBytes)(item)
	if err := VectorStatshouseTopElement0BytesReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStatshouseTopElementBytes) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseTopElementBytes)(item)
	if w, err = VectorStatshouseTopElement0BytesWriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStatshouseTopElementBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStatshouseTopElementBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorString []string

func (VectorString) TLName() string { return "vector" }
func (VectorString) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorString) Reset() {
	ptr := (*[]string)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorString) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]string)(item)
	return VectorString0Read(w, ptr)
}

func (item *VectorString) Write(w []byte) (_ []byte, err error) {
	ptr := (*[]string)(item)
	return VectorString0Write(w, *ptr)
}

func (item *VectorString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorString) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorString) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorString__ReadJSON(item *VectorString, j interface{}) error { return item.readJSON(j) }
func (item *VectorString) readJSON(j interface{}) error {
	ptr := (*[]string)(item)
	if err := VectorString0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorString) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[]string)(item)
	if w, err = VectorString0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorString) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStringBytes [][]byte

func (VectorStringBytes) TLName() string { return "vector" }
func (VectorStringBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStringBytes) Reset() {
	ptr := (*[][]byte)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStringBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[][]byte)(item)
	return VectorString0BytesRead(w, ptr)
}

func (item *VectorStringBytes) Write(w []byte) (_ []byte, err error) {
	ptr := (*[][]byte)(item)
	return VectorString0BytesWrite(w, *ptr)
}

func (item *VectorStringBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorStringBytes) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStringBytes) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorStringBytes__ReadJSON(item *VectorStringBytes, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorStringBytes) readJSON(j interface{}) error {
	ptr := (*[][]byte)(item)
	if err := VectorString0BytesReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorStringBytes) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[][]byte)(item)
	if w, err = VectorString0BytesWriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorStringBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorStringBytes) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorVectorDouble [][]float64

func (VectorVectorDouble) TLName() string { return "vector" }
func (VectorVectorDouble) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorVectorDouble) Reset() {
	ptr := (*[][]float64)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorVectorDouble) Read(w []byte) (_ []byte, err error) {
	ptr := (*[][]float64)(item)
	return VectorVectorDouble0Read(w, ptr)
}

func (item *VectorVectorDouble) Write(w []byte) (_ []byte, err error) {
	ptr := (*[][]float64)(item)
	return VectorVectorDouble0Write(w, *ptr)
}

func (item *VectorVectorDouble) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

func (item *VectorVectorDouble) WriteBoxed(w []byte) ([]byte, error) {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorVectorDouble) String() string {
	w, err := item.WriteJSON(nil)
	if err != nil {
		return err.Error()
	}
	return string(w)
}

func VectorVectorDouble__ReadJSON(item *VectorVectorDouble, j interface{}) error {
	return item.readJSON(j)
}
func (item *VectorVectorDouble) readJSON(j interface{}) error {
	ptr := (*[][]float64)(item)
	if err := VectorVectorDouble0ReadJSON(j, ptr); err != nil {
		return err
	}
	return nil
}

func (item *VectorVectorDouble) WriteJSON(w []byte) (_ []byte, err error) {
	ptr := (*[][]float64)(item)
	if w, err = VectorVectorDouble0WriteJSON(w, *ptr); err != nil {
		return w, err
	}
	return w, nil
}
func (item *VectorVectorDouble) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil)
}

func (item *VectorVectorDouble) UnmarshalJSON(b []byte) error {
	j, err := JsonBytesToInterface(b)
	if err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	if err = item.readJSON(j); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

func VectorVectorDouble0Read(w []byte, vec *[][]float64) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([][]float64, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = VectorDouble0Read(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorVectorDouble0Write(w []byte, vec [][]float64) (_ []byte, err error) {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		if w, err = VectorDouble0Write(w, elem); err != nil {
			return w, err
		}
	}
	return w, nil
}

func VectorVectorDouble0ReadJSON(j interface{}, vec *[][]float64) error {
	l, _arr, err := JsonReadArray("[][]float64", j)
	if err != nil {
		return err
	}
	if cap(*vec) < l {
		*vec = make([][]float64, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if err := VectorDouble0ReadJSON(_arr[i], &(*vec)[i]); err != nil {
			return err
		}
	}
	return nil
}

func VectorVectorDouble0WriteJSON(w []byte, vec [][]float64) (_ []byte, err error) {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		if w, err = VectorDouble0WriteJSON(w, elem); err != nil {
			return w, err
		}
	}
	return append(w, ']'), nil
}
