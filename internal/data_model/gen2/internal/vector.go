// Copyright 2025 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/VKCOM/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

func BuiltinVectorVectorDoubleRead(w []byte, vec *[][]float64) (_ []byte, err error) {
	var l uint32
	if w, err = basictl.NatRead(w, &l); err != nil {
		return w, err
	}
	if err = basictl.CheckLengthSanity(w, l, 4); err != nil {
		return w, err
	}
	if uint32(cap(*vec)) < l {
		*vec = make([][]float64, l)
	} else {
		*vec = (*vec)[:l]
	}
	for i := range *vec {
		if w, err = BuiltinVectorDoubleRead(w, &(*vec)[i]); err != nil {
			return w, err
		}
	}
	return w, nil
}

func BuiltinVectorVectorDoubleWrite(w []byte, vec [][]float64) []byte {
	w = basictl.NatWrite(w, uint32(len(vec)))
	for _, elem := range vec {
		w = BuiltinVectorDoubleWrite(w, elem)
	}
	return w
}

func BuiltinVectorVectorDoubleReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, vec *[][]float64) error {
	*vec = (*vec)[:cap(*vec)]
	index := 0
	if in != nil {
		in.Delim('[')
		if !in.Ok() {
			return ErrorInvalidJSON("[][]float64", "expected json array")
		}
		for ; !in.IsDelim(']'); index++ {
			if len(*vec) <= index {
				var newValue []float64
				*vec = append(*vec, newValue)
				*vec = (*vec)[:cap(*vec)]
			}
			if err := BuiltinVectorDoubleReadJSON(legacyTypeNames, in, &(*vec)[index]); err != nil {
				return err
			}
			in.WantComma()
		}
		in.Delim(']')
		if !in.Ok() {
			return ErrorInvalidJSON("[][]float64", "expected json array's end")
		}
	}
	*vec = (*vec)[:index]
	return nil
}

func BuiltinVectorVectorDoubleWriteJSON(w []byte, vec [][]float64) []byte {
	return BuiltinVectorVectorDoubleWriteJSONOpt(true, false, w, vec)
}
func BuiltinVectorVectorDoubleWriteJSONOpt(newTypeNames bool, short bool, w []byte, vec [][]float64) []byte {
	w = append(w, '[')
	for _, elem := range vec {
		w = basictl.JSONAddCommaIfNeeded(w)
		w = BuiltinVectorDoubleWriteJSONOpt(newTypeNames, short, w, elem)
	}
	return append(w, ']')
}

type VectorDictionaryFieldEngineMetafilesStatBoxed map[string]EngineMetafilesStat

func (VectorDictionaryFieldEngineMetafilesStatBoxed) TLName() string { return "vector" }
func (VectorDictionaryFieldEngineMetafilesStatBoxed) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) Reset() {
	ptr := (*map[string]EngineMetafilesStat)(item)
	BuiltinVectorDictionaryFieldEngineMetafilesStatBoxedReset(*ptr)
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]EngineMetafilesStat)(item)
	return BuiltinVectorDictionaryFieldEngineMetafilesStatBoxedRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) Write(w []byte) []byte {
	ptr := (*map[string]EngineMetafilesStat)(item)
	return BuiltinVectorDictionaryFieldEngineMetafilesStatBoxedWrite(w, *ptr)
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldEngineMetafilesStatBoxed) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*map[string]EngineMetafilesStat)(item)
	if err := BuiltinVectorDictionaryFieldEngineMetafilesStatBoxedReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*map[string]EngineMetafilesStat)(item)
	w = BuiltinVectorDictionaryFieldEngineMetafilesStatBoxedWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorDictionaryFieldEngineMetafilesStatBoxed) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDictionaryFieldString map[string]string

func (VectorDictionaryFieldString) TLName() string { return "vector" }
func (VectorDictionaryFieldString) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldString) Reset() {
	ptr := (*map[string]string)(item)
	BuiltinVectorDictionaryFieldStringReset(*ptr)
}

func (item *VectorDictionaryFieldString) Read(w []byte) (_ []byte, err error) {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorDictionaryFieldString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorDictionaryFieldString) Write(w []byte) []byte {
	ptr := (*map[string]string)(item)
	return BuiltinVectorDictionaryFieldStringWrite(w, *ptr)
}

func (item *VectorDictionaryFieldString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorDictionaryFieldString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorDictionaryFieldString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldString) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorDictionaryFieldString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*map[string]string)(item)
	if err := BuiltinVectorDictionaryFieldStringReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDictionaryFieldString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorDictionaryFieldString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorDictionaryFieldString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*map[string]string)(item)
	w = BuiltinVectorDictionaryFieldStringWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorDictionaryFieldString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorDictionaryFieldString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDictionaryFieldStringBytes []DictionaryFieldStringBytes

func (VectorDictionaryFieldStringBytes) TLName() string { return "vector" }
func (VectorDictionaryFieldStringBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDictionaryFieldStringBytes) Reset() {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorDictionaryFieldStringBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	return BuiltinVectorDictionaryFieldStringBytesRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorDictionaryFieldStringBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorDictionaryFieldStringBytes) Write(w []byte) []byte {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	return BuiltinVectorDictionaryFieldStringBytesWrite(w, *ptr)
}

func (item *VectorDictionaryFieldStringBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorDictionaryFieldStringBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorDictionaryFieldStringBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDictionaryFieldStringBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorDictionaryFieldStringBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	if err := BuiltinVectorDictionaryFieldStringBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDictionaryFieldStringBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorDictionaryFieldStringBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorDictionaryFieldStringBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]DictionaryFieldStringBytes)(item)
	w = BuiltinVectorDictionaryFieldStringBytesWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorDictionaryFieldStringBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorDictionaryFieldStringBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorDouble []float64

func (VectorDouble) TLName() string { return "vector" }
func (VectorDouble) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorDouble) Reset() {
	ptr := (*[]float64)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorDouble) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]float64)(item)
	return BuiltinVectorDoubleRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorDouble) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorDouble) Write(w []byte) []byte {
	ptr := (*[]float64)(item)
	return BuiltinVectorDoubleWrite(w, *ptr)
}

func (item *VectorDouble) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorDouble) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorDouble) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorDouble) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorDouble) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]float64)(item)
	if err := BuiltinVectorDoubleReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorDouble) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorDouble) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorDouble) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]float64)(item)
	w = BuiltinVectorDoubleWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorDouble) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorDouble) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorEngineBinlogPrefix []EngineBinlogPrefix

func (VectorEngineBinlogPrefix) TLName() string { return "vector" }
func (VectorEngineBinlogPrefix) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorEngineBinlogPrefix) Reset() {
	ptr := (*[]EngineBinlogPrefix)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorEngineBinlogPrefix) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]EngineBinlogPrefix)(item)
	return BuiltinVectorEngineBinlogPrefixRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorEngineBinlogPrefix) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorEngineBinlogPrefix) Write(w []byte) []byte {
	ptr := (*[]EngineBinlogPrefix)(item)
	return BuiltinVectorEngineBinlogPrefixWrite(w, *ptr)
}

func (item *VectorEngineBinlogPrefix) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorEngineBinlogPrefix) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorEngineBinlogPrefix) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorEngineBinlogPrefix) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorEngineBinlogPrefix) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]EngineBinlogPrefix)(item)
	if err := BuiltinVectorEngineBinlogPrefixReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorEngineBinlogPrefix) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorEngineBinlogPrefix) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorEngineBinlogPrefix) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]EngineBinlogPrefix)(item)
	w = BuiltinVectorEngineBinlogPrefixWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorEngineBinlogPrefix) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorEngineBinlogPrefix) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorEngineMetafilesOneMemoryStat []EngineMetafilesOneMemoryStat

func (VectorEngineMetafilesOneMemoryStat) TLName() string { return "vector" }
func (VectorEngineMetafilesOneMemoryStat) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorEngineMetafilesOneMemoryStat) Reset() {
	ptr := (*[]EngineMetafilesOneMemoryStat)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorEngineMetafilesOneMemoryStat) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]EngineMetafilesOneMemoryStat)(item)
	return BuiltinVectorEngineMetafilesOneMemoryStatRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorEngineMetafilesOneMemoryStat) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorEngineMetafilesOneMemoryStat) Write(w []byte) []byte {
	ptr := (*[]EngineMetafilesOneMemoryStat)(item)
	return BuiltinVectorEngineMetafilesOneMemoryStatWrite(w, *ptr)
}

func (item *VectorEngineMetafilesOneMemoryStat) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorEngineMetafilesOneMemoryStat) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorEngineMetafilesOneMemoryStat) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorEngineMetafilesOneMemoryStat) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorEngineMetafilesOneMemoryStat) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]EngineMetafilesOneMemoryStat)(item)
	if err := BuiltinVectorEngineMetafilesOneMemoryStatReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorEngineMetafilesOneMemoryStat) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorEngineMetafilesOneMemoryStat) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorEngineMetafilesOneMemoryStat) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]EngineMetafilesOneMemoryStat)(item)
	w = BuiltinVectorEngineMetafilesOneMemoryStatWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorEngineMetafilesOneMemoryStat) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorEngineMetafilesOneMemoryStat) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorInt []int32

func (VectorInt) TLName() string { return "vector" }
func (VectorInt) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorInt) Reset() {
	ptr := (*[]int32)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorInt) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]int32)(item)
	return BuiltinVectorIntRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorInt) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorInt) Write(w []byte) []byte {
	ptr := (*[]int32)(item)
	return BuiltinVectorIntWrite(w, *ptr)
}

func (item *VectorInt) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorInt) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorInt) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorInt) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorInt) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]int32)(item)
	if err := BuiltinVectorIntReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorInt) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorInt) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorInt) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]int32)(item)
	w = BuiltinVectorIntWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorInt) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorInt) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorLong []int64

func (VectorLong) TLName() string { return "vector" }
func (VectorLong) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorLong) Reset() {
	ptr := (*[]int64)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorLong) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]int64)(item)
	return BuiltinVectorLongRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorLong) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorLong) Write(w []byte) []byte {
	ptr := (*[]int64)(item)
	return BuiltinVectorLongWrite(w, *ptr)
}

func (item *VectorLong) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorLong) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorLong) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorLong) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorLong) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]int64)(item)
	if err := BuiltinVectorLongReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorLong) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorLong) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorLong) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]int64)(item)
	w = BuiltinVectorLongWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorLong) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorLong) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorMetadataEvent []MetadataEvent

func (VectorMetadataEvent) TLName() string { return "vector" }
func (VectorMetadataEvent) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorMetadataEvent) Reset() {
	ptr := (*[]MetadataEvent)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorMetadataEvent) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]MetadataEvent)(item)
	return BuiltinVectorMetadataEventRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorMetadataEvent) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorMetadataEvent) Write(w []byte) []byte {
	ptr := (*[]MetadataEvent)(item)
	return BuiltinVectorMetadataEventWrite(w, *ptr)
}

func (item *VectorMetadataEvent) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorMetadataEvent) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorMetadataEvent) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorMetadataEvent) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorMetadataEvent) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]MetadataEvent)(item)
	if err := BuiltinVectorMetadataEventReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorMetadataEvent) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorMetadataEvent) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorMetadataEvent) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]MetadataEvent)(item)
	w = BuiltinVectorMetadataEventWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorMetadataEvent) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorMetadataEvent) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorMetadataEventBytes []MetadataEventBytes

func (VectorMetadataEventBytes) TLName() string { return "vector" }
func (VectorMetadataEventBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorMetadataEventBytes) Reset() {
	ptr := (*[]MetadataEventBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorMetadataEventBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]MetadataEventBytes)(item)
	return BuiltinVectorMetadataEventBytesRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorMetadataEventBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorMetadataEventBytes) Write(w []byte) []byte {
	ptr := (*[]MetadataEventBytes)(item)
	return BuiltinVectorMetadataEventBytesWrite(w, *ptr)
}

func (item *VectorMetadataEventBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorMetadataEventBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorMetadataEventBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorMetadataEventBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorMetadataEventBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]MetadataEventBytes)(item)
	if err := BuiltinVectorMetadataEventBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorMetadataEventBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorMetadataEventBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorMetadataEventBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]MetadataEventBytes)(item)
	w = BuiltinVectorMetadataEventBytesWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorMetadataEventBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorMetadataEventBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorMetadataHistoryShortResponseEvent []MetadataHistoryShortResponseEvent

func (VectorMetadataHistoryShortResponseEvent) TLName() string { return "vector" }
func (VectorMetadataHistoryShortResponseEvent) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorMetadataHistoryShortResponseEvent) Reset() {
	ptr := (*[]MetadataHistoryShortResponseEvent)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorMetadataHistoryShortResponseEvent) Read(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*[]MetadataHistoryShortResponseEvent)(item)
	return BuiltinVectorMetadataHistoryShortResponseEventRead(w, ptr, nat_t)
}

// This method is general version of Write, use it instead!
func (item *VectorMetadataHistoryShortResponseEvent) WriteGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.Write(w, nat_t), nil
}

func (item *VectorMetadataHistoryShortResponseEvent) Write(w []byte, nat_t uint32) []byte {
	ptr := (*[]MetadataHistoryShortResponseEvent)(item)
	return BuiltinVectorMetadataHistoryShortResponseEventWrite(w, *ptr, nat_t)
}

func (item *VectorMetadataHistoryShortResponseEvent) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w, nat_t)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorMetadataHistoryShortResponseEvent) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *VectorMetadataHistoryShortResponseEvent) WriteBoxed(w []byte, nat_t uint32) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w, nat_t)
}

func (item *VectorMetadataHistoryShortResponseEvent) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	ptr := (*[]MetadataHistoryShortResponseEvent)(item)
	if err := BuiltinVectorMetadataHistoryShortResponseEventReadJSON(legacyTypeNames, in, ptr, nat_t); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorMetadataHistoryShortResponseEvent) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSON(w, nat_t), nil
}

func (item *VectorMetadataHistoryShortResponseEvent) WriteJSON(w []byte, nat_t uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_t)
}

func (item *VectorMetadataHistoryShortResponseEvent) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_t uint32) []byte {
	ptr := (*[]MetadataHistoryShortResponseEvent)(item)
	w = BuiltinVectorMetadataHistoryShortResponseEventWriteJSONOpt(newTypeNames, short, w, *ptr, nat_t)
	return w
}

type VectorMetadataMetricOld []MetadataMetricOld

func (VectorMetadataMetricOld) TLName() string { return "vector" }
func (VectorMetadataMetricOld) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorMetadataMetricOld) Reset() {
	ptr := (*[]MetadataMetricOld)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorMetadataMetricOld) Read(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*[]MetadataMetricOld)(item)
	return BuiltinVectorMetadataMetricOldRead(w, ptr, nat_t)
}

// This method is general version of Write, use it instead!
func (item *VectorMetadataMetricOld) WriteGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.Write(w, nat_t), nil
}

func (item *VectorMetadataMetricOld) Write(w []byte, nat_t uint32) []byte {
	ptr := (*[]MetadataMetricOld)(item)
	return BuiltinVectorMetadataMetricOldWrite(w, *ptr, nat_t)
}

func (item *VectorMetadataMetricOld) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w, nat_t)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorMetadataMetricOld) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *VectorMetadataMetricOld) WriteBoxed(w []byte, nat_t uint32) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w, nat_t)
}

func (item *VectorMetadataMetricOld) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	ptr := (*[]MetadataMetricOld)(item)
	if err := BuiltinVectorMetadataMetricOldReadJSON(legacyTypeNames, in, ptr, nat_t); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorMetadataMetricOld) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSON(w, nat_t), nil
}

func (item *VectorMetadataMetricOld) WriteJSON(w []byte, nat_t uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_t)
}

func (item *VectorMetadataMetricOld) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_t uint32) []byte {
	ptr := (*[]MetadataMetricOld)(item)
	w = BuiltinVectorMetadataMetricOldWriteJSONOpt(newTypeNames, short, w, *ptr, nat_t)
	return w
}

type VectorStatshouseApiFilter []StatshouseApiFilter

func (VectorStatshouseApiFilter) TLName() string { return "vector" }
func (VectorStatshouseApiFilter) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseApiFilter) Reset() {
	ptr := (*[]StatshouseApiFilter)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseApiFilter) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiFilter)(item)
	return BuiltinVectorStatshouseApiFilterRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseApiFilter) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseApiFilter) Write(w []byte) []byte {
	ptr := (*[]StatshouseApiFilter)(item)
	return BuiltinVectorStatshouseApiFilterWrite(w, *ptr)
}

func (item *VectorStatshouseApiFilter) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseApiFilter) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseApiFilter) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseApiFilter) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseApiFilter) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseApiFilter)(item)
	if err := BuiltinVectorStatshouseApiFilterReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseApiFilter) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseApiFilter) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseApiFilter) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseApiFilter)(item)
	w = BuiltinVectorStatshouseApiFilterWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseApiFilter) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseApiFilter) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseApiFunction []StatshouseApiFunction

func (VectorStatshouseApiFunction) TLName() string { return "vector" }
func (VectorStatshouseApiFunction) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseApiFunction) Reset() {
	ptr := (*[]StatshouseApiFunction)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseApiFunction) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiFunction)(item)
	return BuiltinVectorStatshouseApiFunctionRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseApiFunction) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseApiFunction) Write(w []byte) []byte {
	ptr := (*[]StatshouseApiFunction)(item)
	return BuiltinVectorStatshouseApiFunctionWrite(w, *ptr)
}

func (item *VectorStatshouseApiFunction) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseApiFunction) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseApiFunction) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseApiFunction) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseApiFunction) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseApiFunction)(item)
	if err := BuiltinVectorStatshouseApiFunctionReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseApiFunction) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseApiFunction) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseApiFunction) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseApiFunction)(item)
	w = BuiltinVectorStatshouseApiFunctionWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseApiFunction) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseApiFunction) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseApiPointMeta []StatshouseApiPointMeta

func (VectorStatshouseApiPointMeta) TLName() string { return "vector" }
func (VectorStatshouseApiPointMeta) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseApiPointMeta) Reset() {
	ptr := (*[]StatshouseApiPointMeta)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseApiPointMeta) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiPointMeta)(item)
	return BuiltinVectorStatshouseApiPointMetaRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseApiPointMeta) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseApiPointMeta) Write(w []byte) []byte {
	ptr := (*[]StatshouseApiPointMeta)(item)
	return BuiltinVectorStatshouseApiPointMetaWrite(w, *ptr)
}

func (item *VectorStatshouseApiPointMeta) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseApiPointMeta) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseApiPointMeta) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseApiPointMeta) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseApiPointMeta) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseApiPointMeta)(item)
	if err := BuiltinVectorStatshouseApiPointMetaReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseApiPointMeta) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseApiPointMeta) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseApiPointMeta) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseApiPointMeta)(item)
	w = BuiltinVectorStatshouseApiPointMetaWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseApiPointMeta) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseApiPointMeta) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseApiSeriesMeta []StatshouseApiSeriesMeta

func (VectorStatshouseApiSeriesMeta) TLName() string { return "vector" }
func (VectorStatshouseApiSeriesMeta) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseApiSeriesMeta) Reset() {
	ptr := (*[]StatshouseApiSeriesMeta)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseApiSeriesMeta) Read(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*[]StatshouseApiSeriesMeta)(item)
	return BuiltinVectorStatshouseApiSeriesMetaRead(w, ptr, nat_t)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseApiSeriesMeta) WriteGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.Write(w, nat_t), nil
}

func (item *VectorStatshouseApiSeriesMeta) Write(w []byte, nat_t uint32) []byte {
	ptr := (*[]StatshouseApiSeriesMeta)(item)
	return BuiltinVectorStatshouseApiSeriesMetaWrite(w, *ptr, nat_t)
}

func (item *VectorStatshouseApiSeriesMeta) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w, nat_t)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseApiSeriesMeta) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *VectorStatshouseApiSeriesMeta) WriteBoxed(w []byte, nat_t uint32) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w, nat_t)
}

func (item *VectorStatshouseApiSeriesMeta) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	ptr := (*[]StatshouseApiSeriesMeta)(item)
	if err := BuiltinVectorStatshouseApiSeriesMetaReadJSON(legacyTypeNames, in, ptr, nat_t); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseApiSeriesMeta) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSON(w, nat_t), nil
}

func (item *VectorStatshouseApiSeriesMeta) WriteJSON(w []byte, nat_t uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_t)
}

func (item *VectorStatshouseApiSeriesMeta) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_t uint32) []byte {
	ptr := (*[]StatshouseApiSeriesMeta)(item)
	w = BuiltinVectorStatshouseApiSeriesMetaWriteJSONOpt(newTypeNames, short, w, *ptr, nat_t)
	return w
}

type VectorStatshouseApiTagValue []StatshouseApiTagValue

func (VectorStatshouseApiTagValue) TLName() string { return "vector" }
func (VectorStatshouseApiTagValue) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseApiTagValue) Reset() {
	ptr := (*[]StatshouseApiTagValue)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseApiTagValue) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseApiTagValue)(item)
	return BuiltinVectorStatshouseApiTagValueRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseApiTagValue) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseApiTagValue) Write(w []byte) []byte {
	ptr := (*[]StatshouseApiTagValue)(item)
	return BuiltinVectorStatshouseApiTagValueWrite(w, *ptr)
}

func (item *VectorStatshouseApiTagValue) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseApiTagValue) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseApiTagValue) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseApiTagValue) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseApiTagValue) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseApiTagValue)(item)
	if err := BuiltinVectorStatshouseApiTagValueReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseApiTagValue) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseApiTagValue) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseApiTagValue) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseApiTagValue)(item)
	w = BuiltinVectorStatshouseApiTagValueWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseApiTagValue) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseApiTagValue) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseCentroidFloat []StatshouseCentroidFloat

func (VectorStatshouseCentroidFloat) TLName() string { return "vector" }
func (VectorStatshouseCentroidFloat) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseCentroidFloat) Reset() {
	ptr := (*[]StatshouseCentroidFloat)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseCentroidFloat) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseCentroidFloat)(item)
	return BuiltinVectorStatshouseCentroidFloatRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseCentroidFloat) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseCentroidFloat) Write(w []byte) []byte {
	ptr := (*[]StatshouseCentroidFloat)(item)
	return BuiltinVectorStatshouseCentroidFloatWrite(w, *ptr)
}

func (item *VectorStatshouseCentroidFloat) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseCentroidFloat) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseCentroidFloat) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseCentroidFloat) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseCentroidFloat) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseCentroidFloat)(item)
	if err := BuiltinVectorStatshouseCentroidFloatReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseCentroidFloat) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseCentroidFloat) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseCentroidFloat) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseCentroidFloat)(item)
	w = BuiltinVectorStatshouseCentroidFloatWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseCentroidFloat) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseCentroidFloat) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseIngestionStatus2 []StatshouseIngestionStatus2

func (VectorStatshouseIngestionStatus2) TLName() string { return "vector" }
func (VectorStatshouseIngestionStatus2) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseIngestionStatus2) Reset() {
	ptr := (*[]StatshouseIngestionStatus2)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseIngestionStatus2) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseIngestionStatus2)(item)
	return BuiltinVectorStatshouseIngestionStatus2Read(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseIngestionStatus2) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseIngestionStatus2) Write(w []byte) []byte {
	ptr := (*[]StatshouseIngestionStatus2)(item)
	return BuiltinVectorStatshouseIngestionStatus2Write(w, *ptr)
}

func (item *VectorStatshouseIngestionStatus2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseIngestionStatus2) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseIngestionStatus2) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseIngestionStatus2) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseIngestionStatus2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseIngestionStatus2)(item)
	if err := BuiltinVectorStatshouseIngestionStatus2ReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseIngestionStatus2) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseIngestionStatus2) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseIngestionStatus2) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseIngestionStatus2)(item)
	w = BuiltinVectorStatshouseIngestionStatus2WriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseIngestionStatus2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseIngestionStatus2) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMapping []StatshouseMapping

func (VectorStatshouseMapping) TLName() string { return "vector" }
func (VectorStatshouseMapping) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMapping) Reset() {
	ptr := (*[]StatshouseMapping)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMapping) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMapping)(item)
	return BuiltinVectorStatshouseMappingRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseMapping) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseMapping) Write(w []byte) []byte {
	ptr := (*[]StatshouseMapping)(item)
	return BuiltinVectorStatshouseMappingWrite(w, *ptr)
}

func (item *VectorStatshouseMapping) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseMapping) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseMapping) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMapping) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseMapping) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseMapping)(item)
	if err := BuiltinVectorStatshouseMappingReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseMapping) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseMapping) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseMapping) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseMapping)(item)
	w = BuiltinVectorStatshouseMappingWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseMapping) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseMapping) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMappingBytes []StatshouseMappingBytes

func (VectorStatshouseMappingBytes) TLName() string { return "vector" }
func (VectorStatshouseMappingBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMappingBytes) Reset() {
	ptr := (*[]StatshouseMappingBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMappingBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMappingBytes)(item)
	return BuiltinVectorStatshouseMappingBytesRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseMappingBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseMappingBytes) Write(w []byte) []byte {
	ptr := (*[]StatshouseMappingBytes)(item)
	return BuiltinVectorStatshouseMappingBytesWrite(w, *ptr)
}

func (item *VectorStatshouseMappingBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseMappingBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseMappingBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMappingBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseMappingBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseMappingBytes)(item)
	if err := BuiltinVectorStatshouseMappingBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseMappingBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseMappingBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseMappingBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseMappingBytes)(item)
	w = BuiltinVectorStatshouseMappingBytesWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseMappingBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseMappingBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMetric []StatshouseMetric

func (VectorStatshouseMetric) TLName() string { return "vector" }
func (VectorStatshouseMetric) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMetric) Reset() {
	ptr := (*[]StatshouseMetric)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMetric) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMetric)(item)
	return BuiltinVectorStatshouseMetricRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseMetric) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseMetric) Write(w []byte) []byte {
	ptr := (*[]StatshouseMetric)(item)
	return BuiltinVectorStatshouseMetricWrite(w, *ptr)
}

func (item *VectorStatshouseMetric) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseMetric) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseMetric) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMetric) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseMetric) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseMetric)(item)
	if err := BuiltinVectorStatshouseMetricReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseMetric) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseMetric) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseMetric) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseMetric)(item)
	w = BuiltinVectorStatshouseMetricWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseMetric) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseMetric) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMetricBytes []StatshouseMetricBytes

func (VectorStatshouseMetricBytes) TLName() string { return "vector" }
func (VectorStatshouseMetricBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMetricBytes) Reset() {
	ptr := (*[]StatshouseMetricBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMetricBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMetricBytes)(item)
	return BuiltinVectorStatshouseMetricBytesRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseMetricBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseMetricBytes) Write(w []byte) []byte {
	ptr := (*[]StatshouseMetricBytes)(item)
	return BuiltinVectorStatshouseMetricBytesWrite(w, *ptr)
}

func (item *VectorStatshouseMetricBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseMetricBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseMetricBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMetricBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseMetricBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseMetricBytes)(item)
	if err := BuiltinVectorStatshouseMetricBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseMetricBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseMetricBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseMetricBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseMetricBytes)(item)
	w = BuiltinVectorStatshouseMetricBytesWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseMetricBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseMetricBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMultiItem []StatshouseMultiItem

func (VectorStatshouseMultiItem) TLName() string { return "vector" }
func (VectorStatshouseMultiItem) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMultiItem) Reset() {
	ptr := (*[]StatshouseMultiItem)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMultiItem) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMultiItem)(item)
	return BuiltinVectorStatshouseMultiItemRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseMultiItem) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseMultiItem) Write(w []byte) []byte {
	ptr := (*[]StatshouseMultiItem)(item)
	return BuiltinVectorStatshouseMultiItemWrite(w, *ptr)
}

func (item *VectorStatshouseMultiItem) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseMultiItem) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseMultiItem) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMultiItem) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseMultiItem) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseMultiItem)(item)
	if err := BuiltinVectorStatshouseMultiItemReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseMultiItem) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseMultiItem) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseMultiItem) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseMultiItem)(item)
	w = BuiltinVectorStatshouseMultiItemWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseMultiItem) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseMultiItem) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseMultiItemBytes []StatshouseMultiItemBytes

func (VectorStatshouseMultiItemBytes) TLName() string { return "vector" }
func (VectorStatshouseMultiItemBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseMultiItemBytes) Reset() {
	ptr := (*[]StatshouseMultiItemBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseMultiItemBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseMultiItemBytes)(item)
	return BuiltinVectorStatshouseMultiItemBytesRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseMultiItemBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseMultiItemBytes) Write(w []byte) []byte {
	ptr := (*[]StatshouseMultiItemBytes)(item)
	return BuiltinVectorStatshouseMultiItemBytesWrite(w, *ptr)
}

func (item *VectorStatshouseMultiItemBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseMultiItemBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseMultiItemBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseMultiItemBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseMultiItemBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseMultiItemBytes)(item)
	if err := BuiltinVectorStatshouseMultiItemBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseMultiItemBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseMultiItemBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseMultiItemBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseMultiItemBytes)(item)
	w = BuiltinVectorStatshouseMultiItemBytesWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseMultiItemBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseMultiItemBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshousePromTarget []StatshousePromTarget

func (VectorStatshousePromTarget) TLName() string { return "vector" }
func (VectorStatshousePromTarget) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshousePromTarget) Reset() {
	ptr := (*[]StatshousePromTarget)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshousePromTarget) Read(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*[]StatshousePromTarget)(item)
	return BuiltinVectorStatshousePromTargetRead(w, ptr, nat_t)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshousePromTarget) WriteGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.Write(w, nat_t), nil
}

func (item *VectorStatshousePromTarget) Write(w []byte, nat_t uint32) []byte {
	ptr := (*[]StatshousePromTarget)(item)
	return BuiltinVectorStatshousePromTargetWrite(w, *ptr, nat_t)
}

func (item *VectorStatshousePromTarget) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w, nat_t)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshousePromTarget) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *VectorStatshousePromTarget) WriteBoxed(w []byte, nat_t uint32) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w, nat_t)
}

func (item *VectorStatshousePromTarget) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	ptr := (*[]StatshousePromTarget)(item)
	if err := BuiltinVectorStatshousePromTargetReadJSON(legacyTypeNames, in, ptr, nat_t); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshousePromTarget) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSON(w, nat_t), nil
}

func (item *VectorStatshousePromTarget) WriteJSON(w []byte, nat_t uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_t)
}

func (item *VectorStatshousePromTarget) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_t uint32) []byte {
	ptr := (*[]StatshousePromTarget)(item)
	w = BuiltinVectorStatshousePromTargetWriteJSONOpt(newTypeNames, short, w, *ptr, nat_t)
	return w
}

type VectorStatshousePromTargetBytes []StatshousePromTargetBytes

func (VectorStatshousePromTargetBytes) TLName() string { return "vector" }
func (VectorStatshousePromTargetBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshousePromTargetBytes) Reset() {
	ptr := (*[]StatshousePromTargetBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshousePromTargetBytes) Read(w []byte, nat_t uint32) (_ []byte, err error) {
	ptr := (*[]StatshousePromTargetBytes)(item)
	return BuiltinVectorStatshousePromTargetBytesRead(w, ptr, nat_t)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshousePromTargetBytes) WriteGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.Write(w, nat_t), nil
}

func (item *VectorStatshousePromTargetBytes) Write(w []byte, nat_t uint32) []byte {
	ptr := (*[]StatshousePromTargetBytes)(item)
	return BuiltinVectorStatshousePromTargetBytesWrite(w, *ptr, nat_t)
}

func (item *VectorStatshousePromTargetBytes) ReadBoxed(w []byte, nat_t uint32) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w, nat_t)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshousePromTargetBytes) WriteBoxedGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteBoxed(w, nat_t), nil
}

func (item *VectorStatshousePromTargetBytes) WriteBoxed(w []byte, nat_t uint32) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w, nat_t)
}

func (item *VectorStatshousePromTargetBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer, nat_t uint32) error {
	ptr := (*[]StatshousePromTargetBytes)(item)
	if err := BuiltinVectorStatshousePromTargetBytesReadJSON(legacyTypeNames, in, ptr, nat_t); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshousePromTargetBytes) WriteJSONGeneral(w []byte, nat_t uint32) (_ []byte, err error) {
	return item.WriteJSON(w, nat_t), nil
}

func (item *VectorStatshousePromTargetBytes) WriteJSON(w []byte, nat_t uint32) []byte {
	return item.WriteJSONOpt(true, false, w, nat_t)
}

func (item *VectorStatshousePromTargetBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte, nat_t uint32) []byte {
	ptr := (*[]StatshousePromTargetBytes)(item)
	w = BuiltinVectorStatshousePromTargetBytesWriteJSONOpt(newTypeNames, short, w, *ptr, nat_t)
	return w
}

type VectorStatshouseSampleFactor []StatshouseSampleFactor

func (VectorStatshouseSampleFactor) TLName() string { return "vector" }
func (VectorStatshouseSampleFactor) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseSampleFactor) Reset() {
	ptr := (*[]StatshouseSampleFactor)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseSampleFactor) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseSampleFactor)(item)
	return BuiltinVectorStatshouseSampleFactorRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseSampleFactor) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseSampleFactor) Write(w []byte) []byte {
	ptr := (*[]StatshouseSampleFactor)(item)
	return BuiltinVectorStatshouseSampleFactorWrite(w, *ptr)
}

func (item *VectorStatshouseSampleFactor) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseSampleFactor) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseSampleFactor) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseSampleFactor) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseSampleFactor) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseSampleFactor)(item)
	if err := BuiltinVectorStatshouseSampleFactorReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseSampleFactor) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseSampleFactor) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseSampleFactor) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseSampleFactor)(item)
	w = BuiltinVectorStatshouseSampleFactorWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseSampleFactor) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseSampleFactor) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseTopElement []StatshouseTopElement

func (VectorStatshouseTopElement) TLName() string { return "vector" }
func (VectorStatshouseTopElement) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseTopElement) Reset() {
	ptr := (*[]StatshouseTopElement)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseTopElement) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseTopElement)(item)
	return BuiltinVectorStatshouseTopElementRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseTopElement) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseTopElement) Write(w []byte) []byte {
	ptr := (*[]StatshouseTopElement)(item)
	return BuiltinVectorStatshouseTopElementWrite(w, *ptr)
}

func (item *VectorStatshouseTopElement) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseTopElement) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseTopElement) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseTopElement) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseTopElement) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseTopElement)(item)
	if err := BuiltinVectorStatshouseTopElementReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseTopElement) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseTopElement) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseTopElement) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseTopElement)(item)
	w = BuiltinVectorStatshouseTopElementWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseTopElement) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseTopElement) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStatshouseTopElementBytes []StatshouseTopElementBytes

func (VectorStatshouseTopElementBytes) TLName() string { return "vector" }
func (VectorStatshouseTopElementBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStatshouseTopElementBytes) Reset() {
	ptr := (*[]StatshouseTopElementBytes)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStatshouseTopElementBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]StatshouseTopElementBytes)(item)
	return BuiltinVectorStatshouseTopElementBytesRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStatshouseTopElementBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStatshouseTopElementBytes) Write(w []byte) []byte {
	ptr := (*[]StatshouseTopElementBytes)(item)
	return BuiltinVectorStatshouseTopElementBytesWrite(w, *ptr)
}

func (item *VectorStatshouseTopElementBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStatshouseTopElementBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStatshouseTopElementBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStatshouseTopElementBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStatshouseTopElementBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]StatshouseTopElementBytes)(item)
	if err := BuiltinVectorStatshouseTopElementBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStatshouseTopElementBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStatshouseTopElementBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStatshouseTopElementBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]StatshouseTopElementBytes)(item)
	w = BuiltinVectorStatshouseTopElementBytesWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStatshouseTopElementBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStatshouseTopElementBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorString []string

func (VectorString) TLName() string { return "vector" }
func (VectorString) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorString) Reset() {
	ptr := (*[]string)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorString) Read(w []byte) (_ []byte, err error) {
	ptr := (*[]string)(item)
	return BuiltinVectorStringRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorString) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorString) Write(w []byte) []byte {
	ptr := (*[]string)(item)
	return BuiltinVectorStringWrite(w, *ptr)
}

func (item *VectorString) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorString) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorString) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorString) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorString) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[]string)(item)
	if err := BuiltinVectorStringReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorString) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorString) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorString) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[]string)(item)
	w = BuiltinVectorStringWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorString) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorString) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorStringBytes [][]byte

func (VectorStringBytes) TLName() string { return "vector" }
func (VectorStringBytes) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorStringBytes) Reset() {
	ptr := (*[][]byte)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorStringBytes) Read(w []byte) (_ []byte, err error) {
	ptr := (*[][]byte)(item)
	return BuiltinVectorStringBytesRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorStringBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorStringBytes) Write(w []byte) []byte {
	ptr := (*[][]byte)(item)
	return BuiltinVectorStringBytesWrite(w, *ptr)
}

func (item *VectorStringBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorStringBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorStringBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorStringBytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorStringBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[][]byte)(item)
	if err := BuiltinVectorStringBytesReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorStringBytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorStringBytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorStringBytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[][]byte)(item)
	w = BuiltinVectorStringBytesWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorStringBytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorStringBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorTupleDouble2 [][2]float64

func (VectorTupleDouble2) TLName() string { return "vector" }
func (VectorTupleDouble2) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorTupleDouble2) Reset() {
	ptr := (*[][2]float64)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorTupleDouble2) Read(w []byte) (_ []byte, err error) {
	ptr := (*[][2]float64)(item)
	return BuiltinVectorTupleDouble2Read(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorTupleDouble2) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorTupleDouble2) Write(w []byte) []byte {
	ptr := (*[][2]float64)(item)
	return BuiltinVectorTupleDouble2Write(w, *ptr)
}

func (item *VectorTupleDouble2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorTupleDouble2) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorTupleDouble2) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorTupleDouble2) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorTupleDouble2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[][2]float64)(item)
	if err := BuiltinVectorTupleDouble2ReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorTupleDouble2) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorTupleDouble2) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorTupleDouble2) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[][2]float64)(item)
	w = BuiltinVectorTupleDouble2WriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorTupleDouble2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorTupleDouble2) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}

type VectorVectorDouble [][]float64

func (VectorVectorDouble) TLName() string { return "vector" }
func (VectorVectorDouble) TLTag() uint32  { return 0x1cb5c415 }

func (item *VectorVectorDouble) Reset() {
	ptr := (*[][]float64)(item)
	*ptr = (*ptr)[:0]
}

func (item *VectorVectorDouble) Read(w []byte) (_ []byte, err error) {
	ptr := (*[][]float64)(item)
	return BuiltinVectorVectorDoubleRead(w, ptr)
}

// This method is general version of Write, use it instead!
func (item *VectorVectorDouble) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *VectorVectorDouble) Write(w []byte) []byte {
	ptr := (*[][]float64)(item)
	return BuiltinVectorVectorDoubleWrite(w, *ptr)
}

func (item *VectorVectorDouble) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x1cb5c415); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *VectorVectorDouble) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *VectorVectorDouble) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x1cb5c415)
	return item.Write(w)
}

func (item VectorVectorDouble) String() string {
	return string(item.WriteJSON(nil))
}

func (item *VectorVectorDouble) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	ptr := (*[][]float64)(item)
	if err := BuiltinVectorVectorDoubleReadJSON(legacyTypeNames, in, ptr); err != nil {
		return err
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *VectorVectorDouble) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSON(w), nil
}

func (item *VectorVectorDouble) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}

func (item *VectorVectorDouble) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	ptr := (*[][]float64)(item)
	w = BuiltinVectorVectorDoubleWriteJSONOpt(newTypeNames, short, w, *ptr)
	return w
}
func (item *VectorVectorDouble) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *VectorVectorDouble) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("vector", err.Error())
	}
	return nil
}
