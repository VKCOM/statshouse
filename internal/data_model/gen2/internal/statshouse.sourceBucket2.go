// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"github.com/vkcom/statshouse/internal/vkgo/basictl"
)

var _ = basictl.NatWrite

type StatshouseSourceBucket2 struct {
	Metrics            []StatshouseMultiItem
	SampleFactors      []StatshouseSampleFactor
	IngestionStatusOk  []StatshouseSampleFactor
	MissedSeconds      uint32
	LegacyAgentEnv     int32
	IngestionStatusOk2 []StatshouseIngestionStatus2
}

func (StatshouseSourceBucket2) TLName() string { return "statshouse.sourceBucket2" }
func (StatshouseSourceBucket2) TLTag() uint32  { return 0x3af6e822 }

func (item *StatshouseSourceBucket2) Reset() {
	item.Metrics = item.Metrics[:0]
	item.SampleFactors = item.SampleFactors[:0]
	item.IngestionStatusOk = item.IngestionStatusOk[:0]
	item.MissedSeconds = 0
	item.LegacyAgentEnv = 0
	item.IngestionStatusOk2 = item.IngestionStatusOk2[:0]
}

func (item *StatshouseSourceBucket2) Read(w []byte) (_ []byte, err error) {
	if w, err = BuiltinVectorStatshouseMultiItemRead(w, &item.Metrics); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorStatshouseSampleFactorRead(w, &item.SampleFactors); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorStatshouseSampleFactorRead(w, &item.IngestionStatusOk); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.MissedSeconds); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.LegacyAgentEnv); err != nil {
		return w, err
	}
	return BuiltinVectorStatshouseIngestionStatus2Read(w, &item.IngestionStatusOk2)
}

// This method is general version of Write, use it instead!
func (item *StatshouseSourceBucket2) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseSourceBucket2) Write(w []byte) []byte {
	w = BuiltinVectorStatshouseMultiItemWrite(w, item.Metrics)
	w = BuiltinVectorStatshouseSampleFactorWrite(w, item.SampleFactors)
	w = BuiltinVectorStatshouseSampleFactorWrite(w, item.IngestionStatusOk)
	w = basictl.NatWrite(w, item.MissedSeconds)
	w = basictl.IntWrite(w, item.LegacyAgentEnv)
	w = BuiltinVectorStatshouseIngestionStatus2Write(w, item.IngestionStatusOk2)
	return w
}

func (item *StatshouseSourceBucket2) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3af6e822); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseSourceBucket2) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseSourceBucket2) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x3af6e822)
	return item.Write(w)
}

func (item StatshouseSourceBucket2) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseSourceBucket2) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propMetricsPresented bool
	var propSampleFactorsPresented bool
	var propIngestionStatusOkPresented bool
	var propMissedSecondsPresented bool
	var propLegacyAgentEnvPresented bool
	var propIngestionStatusOk2Presented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "metrics":
				if propMetricsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "metrics")
				}
				if err := BuiltinVectorStatshouseMultiItemReadJSON(legacyTypeNames, in, &item.Metrics); err != nil {
					return err
				}
				propMetricsPresented = true
			case "sample_factors":
				if propSampleFactorsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "sample_factors")
				}
				if err := BuiltinVectorStatshouseSampleFactorReadJSON(legacyTypeNames, in, &item.SampleFactors); err != nil {
					return err
				}
				propSampleFactorsPresented = true
			case "ingestion_status_ok":
				if propIngestionStatusOkPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "ingestion_status_ok")
				}
				if err := BuiltinVectorStatshouseSampleFactorReadJSON(legacyTypeNames, in, &item.IngestionStatusOk); err != nil {
					return err
				}
				propIngestionStatusOkPresented = true
			case "missed_seconds":
				if propMissedSecondsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "missed_seconds")
				}
				if err := Json2ReadUint32(in, &item.MissedSeconds); err != nil {
					return err
				}
				propMissedSecondsPresented = true
			case "legacy_agent_env":
				if propLegacyAgentEnvPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "legacy_agent_env")
				}
				if err := Json2ReadInt32(in, &item.LegacyAgentEnv); err != nil {
					return err
				}
				propLegacyAgentEnvPresented = true
			case "ingestion_status_ok2":
				if propIngestionStatusOk2Presented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "ingestion_status_ok2")
				}
				if err := BuiltinVectorStatshouseIngestionStatus2ReadJSON(legacyTypeNames, in, &item.IngestionStatusOk2); err != nil {
					return err
				}
				propIngestionStatusOk2Presented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.sourceBucket2", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propMetricsPresented {
		item.Metrics = item.Metrics[:0]
	}
	if !propSampleFactorsPresented {
		item.SampleFactors = item.SampleFactors[:0]
	}
	if !propIngestionStatusOkPresented {
		item.IngestionStatusOk = item.IngestionStatusOk[:0]
	}
	if !propMissedSecondsPresented {
		item.MissedSeconds = 0
	}
	if !propLegacyAgentEnvPresented {
		item.LegacyAgentEnv = 0
	}
	if !propIngestionStatusOk2Presented {
		item.IngestionStatusOk2 = item.IngestionStatusOk2[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseSourceBucket2) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseSourceBucket2) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseSourceBucket2) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexMetrics := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metrics":`...)
	w = BuiltinVectorStatshouseMultiItemWriteJSONOpt(newTypeNames, short, w, item.Metrics)
	if (len(item.Metrics) != 0) == false {
		w = w[:backupIndexMetrics]
	}
	backupIndexSampleFactors := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"sample_factors":`...)
	w = BuiltinVectorStatshouseSampleFactorWriteJSONOpt(newTypeNames, short, w, item.SampleFactors)
	if (len(item.SampleFactors) != 0) == false {
		w = w[:backupIndexSampleFactors]
	}
	backupIndexIngestionStatusOk := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"ingestion_status_ok":`...)
	w = BuiltinVectorStatshouseSampleFactorWriteJSONOpt(newTypeNames, short, w, item.IngestionStatusOk)
	if (len(item.IngestionStatusOk) != 0) == false {
		w = w[:backupIndexIngestionStatusOk]
	}
	backupIndexMissedSeconds := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"missed_seconds":`...)
	w = basictl.JSONWriteUint32(w, item.MissedSeconds)
	if (item.MissedSeconds != 0) == false {
		w = w[:backupIndexMissedSeconds]
	}
	backupIndexLegacyAgentEnv := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"legacy_agent_env":`...)
	w = basictl.JSONWriteInt32(w, item.LegacyAgentEnv)
	if (item.LegacyAgentEnv != 0) == false {
		w = w[:backupIndexLegacyAgentEnv]
	}
	backupIndexIngestionStatusOk2 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"ingestion_status_ok2":`...)
	w = BuiltinVectorStatshouseIngestionStatus2WriteJSONOpt(newTypeNames, short, w, item.IngestionStatusOk2)
	if (len(item.IngestionStatusOk2) != 0) == false {
		w = w[:backupIndexIngestionStatusOk2]
	}
	return append(w, '}')
}

func (item *StatshouseSourceBucket2) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseSourceBucket2) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.sourceBucket2", err.Error())
	}
	return nil
}

type StatshouseSourceBucket2Bytes struct {
	Metrics            []StatshouseMultiItemBytes
	SampleFactors      []StatshouseSampleFactor
	IngestionStatusOk  []StatshouseSampleFactor
	MissedSeconds      uint32
	LegacyAgentEnv     int32
	IngestionStatusOk2 []StatshouseIngestionStatus2
}

func (StatshouseSourceBucket2Bytes) TLName() string { return "statshouse.sourceBucket2" }
func (StatshouseSourceBucket2Bytes) TLTag() uint32  { return 0x3af6e822 }

func (item *StatshouseSourceBucket2Bytes) Reset() {
	item.Metrics = item.Metrics[:0]
	item.SampleFactors = item.SampleFactors[:0]
	item.IngestionStatusOk = item.IngestionStatusOk[:0]
	item.MissedSeconds = 0
	item.LegacyAgentEnv = 0
	item.IngestionStatusOk2 = item.IngestionStatusOk2[:0]
}

func (item *StatshouseSourceBucket2Bytes) Read(w []byte) (_ []byte, err error) {
	if w, err = BuiltinVectorStatshouseMultiItemBytesRead(w, &item.Metrics); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorStatshouseSampleFactorRead(w, &item.SampleFactors); err != nil {
		return w, err
	}
	if w, err = BuiltinVectorStatshouseSampleFactorRead(w, &item.IngestionStatusOk); err != nil {
		return w, err
	}
	if w, err = basictl.NatRead(w, &item.MissedSeconds); err != nil {
		return w, err
	}
	if w, err = basictl.IntRead(w, &item.LegacyAgentEnv); err != nil {
		return w, err
	}
	return BuiltinVectorStatshouseIngestionStatus2Read(w, &item.IngestionStatusOk2)
}

// This method is general version of Write, use it instead!
func (item *StatshouseSourceBucket2Bytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseSourceBucket2Bytes) Write(w []byte) []byte {
	w = BuiltinVectorStatshouseMultiItemBytesWrite(w, item.Metrics)
	w = BuiltinVectorStatshouseSampleFactorWrite(w, item.SampleFactors)
	w = BuiltinVectorStatshouseSampleFactorWrite(w, item.IngestionStatusOk)
	w = basictl.NatWrite(w, item.MissedSeconds)
	w = basictl.IntWrite(w, item.LegacyAgentEnv)
	w = BuiltinVectorStatshouseIngestionStatus2Write(w, item.IngestionStatusOk2)
	return w
}

func (item *StatshouseSourceBucket2Bytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x3af6e822); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseSourceBucket2Bytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseSourceBucket2Bytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x3af6e822)
	return item.Write(w)
}

func (item StatshouseSourceBucket2Bytes) String() string {
	return string(item.WriteJSON(nil))
}

func (item *StatshouseSourceBucket2Bytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propMetricsPresented bool
	var propSampleFactorsPresented bool
	var propIngestionStatusOkPresented bool
	var propMissedSecondsPresented bool
	var propLegacyAgentEnvPresented bool
	var propIngestionStatusOk2Presented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "metrics":
				if propMetricsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "metrics")
				}
				if err := BuiltinVectorStatshouseMultiItemBytesReadJSON(legacyTypeNames, in, &item.Metrics); err != nil {
					return err
				}
				propMetricsPresented = true
			case "sample_factors":
				if propSampleFactorsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "sample_factors")
				}
				if err := BuiltinVectorStatshouseSampleFactorReadJSON(legacyTypeNames, in, &item.SampleFactors); err != nil {
					return err
				}
				propSampleFactorsPresented = true
			case "ingestion_status_ok":
				if propIngestionStatusOkPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "ingestion_status_ok")
				}
				if err := BuiltinVectorStatshouseSampleFactorReadJSON(legacyTypeNames, in, &item.IngestionStatusOk); err != nil {
					return err
				}
				propIngestionStatusOkPresented = true
			case "missed_seconds":
				if propMissedSecondsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "missed_seconds")
				}
				if err := Json2ReadUint32(in, &item.MissedSeconds); err != nil {
					return err
				}
				propMissedSecondsPresented = true
			case "legacy_agent_env":
				if propLegacyAgentEnvPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "legacy_agent_env")
				}
				if err := Json2ReadInt32(in, &item.LegacyAgentEnv); err != nil {
					return err
				}
				propLegacyAgentEnvPresented = true
			case "ingestion_status_ok2":
				if propIngestionStatusOk2Presented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.sourceBucket2", "ingestion_status_ok2")
				}
				if err := BuiltinVectorStatshouseIngestionStatus2ReadJSON(legacyTypeNames, in, &item.IngestionStatusOk2); err != nil {
					return err
				}
				propIngestionStatusOk2Presented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.sourceBucket2", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propMetricsPresented {
		item.Metrics = item.Metrics[:0]
	}
	if !propSampleFactorsPresented {
		item.SampleFactors = item.SampleFactors[:0]
	}
	if !propIngestionStatusOkPresented {
		item.IngestionStatusOk = item.IngestionStatusOk[:0]
	}
	if !propMissedSecondsPresented {
		item.MissedSeconds = 0
	}
	if !propLegacyAgentEnvPresented {
		item.LegacyAgentEnv = 0
	}
	if !propIngestionStatusOk2Presented {
		item.IngestionStatusOk2 = item.IngestionStatusOk2[:0]
	}
	return nil
}

// This method is general version of WriteJSON, use it instead!
func (item *StatshouseSourceBucket2Bytes) WriteJSONGeneral(w []byte) (_ []byte, err error) {
	return item.WriteJSONOpt(true, false, w), nil
}

func (item *StatshouseSourceBucket2Bytes) WriteJSON(w []byte) []byte {
	return item.WriteJSONOpt(true, false, w)
}
func (item *StatshouseSourceBucket2Bytes) WriteJSONOpt(newTypeNames bool, short bool, w []byte) []byte {
	w = append(w, '{')
	backupIndexMetrics := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"metrics":`...)
	w = BuiltinVectorStatshouseMultiItemBytesWriteJSONOpt(newTypeNames, short, w, item.Metrics)
	if (len(item.Metrics) != 0) == false {
		w = w[:backupIndexMetrics]
	}
	backupIndexSampleFactors := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"sample_factors":`...)
	w = BuiltinVectorStatshouseSampleFactorWriteJSONOpt(newTypeNames, short, w, item.SampleFactors)
	if (len(item.SampleFactors) != 0) == false {
		w = w[:backupIndexSampleFactors]
	}
	backupIndexIngestionStatusOk := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"ingestion_status_ok":`...)
	w = BuiltinVectorStatshouseSampleFactorWriteJSONOpt(newTypeNames, short, w, item.IngestionStatusOk)
	if (len(item.IngestionStatusOk) != 0) == false {
		w = w[:backupIndexIngestionStatusOk]
	}
	backupIndexMissedSeconds := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"missed_seconds":`...)
	w = basictl.JSONWriteUint32(w, item.MissedSeconds)
	if (item.MissedSeconds != 0) == false {
		w = w[:backupIndexMissedSeconds]
	}
	backupIndexLegacyAgentEnv := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"legacy_agent_env":`...)
	w = basictl.JSONWriteInt32(w, item.LegacyAgentEnv)
	if (item.LegacyAgentEnv != 0) == false {
		w = w[:backupIndexLegacyAgentEnv]
	}
	backupIndexIngestionStatusOk2 := len(w)
	w = basictl.JSONAddCommaIfNeeded(w)
	w = append(w, `"ingestion_status_ok2":`...)
	w = BuiltinVectorStatshouseIngestionStatus2WriteJSONOpt(newTypeNames, short, w, item.IngestionStatusOk2)
	if (len(item.IngestionStatusOk2) != 0) == false {
		w = w[:backupIndexIngestionStatusOk2]
	}
	return append(w, '}')
}

func (item *StatshouseSourceBucket2Bytes) MarshalJSON() ([]byte, error) {
	return item.WriteJSON(nil), nil
}

func (item *StatshouseSourceBucket2Bytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.sourceBucket2", err.Error())
	}
	return nil
}
